
morse.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000012  00800100  00000128  0000019c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000128  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000030  00000000  00000000  000001ae  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000001e0  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000020  00000000  00000000  00000220  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   000007ac  00000000  00000000  00000240  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000006a1  00000000  00000000  000009ec  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000298  00000000  00000000  0000108d  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000034  00000000  00000000  00001328  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000003bc  00000000  00000000  0000135c  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000133  00000000  00000000  00001718  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000010  00000000  00000000  0000184b  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
   8:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
   c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  10:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  14:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  18:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  1c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  20:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  24:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  28:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  2c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  30:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  34:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  38:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  3c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  40:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  44:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  48:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  4c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  50:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  54:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  58:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  5c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  60:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  64:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
  74:	11 e0       	ldi	r17, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	e8 e2       	ldi	r30, 0x28	; 40
  7c:	f1 e0       	ldi	r31, 0x01	; 1
  7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
  80:	05 90       	lpm	r0, Z+
  82:	0d 92       	st	X+, r0
  84:	a2 31       	cpi	r26, 0x12	; 18
  86:	b1 07       	cpc	r27, r17
  88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>
  8a:	0e 94 4b 00 	call	0x96	; 0x96 <main>
  8e:	0c 94 92 00 	jmp	0x124	; 0x124 <_exit>

00000092 <__bad_interrupt>:
  92:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000096 <main>:
#include <stdio.h>
#include <avr/io.h>


int main(void)
{
  96:	cf 93       	push	r28
  98:	df 93       	push	r29
  9a:	cd b7       	in	r28, 0x3d	; 61
  9c:	de b7       	in	r29, 0x3e	; 62
  9e:	62 97       	sbiw	r28, 0x12	; 18
  a0:	0f b6       	in	r0, 0x3f	; 63
  a2:	f8 94       	cli
  a4:	de bf       	out	0x3e, r29	; 62
  a6:	0f be       	out	0x3f, r0	; 63
  a8:	cd bf       	out	0x3d, r28	; 61
	int morse[MESSAGE_SIZE] = {1,0,0,0,0,0,1,1,1};
  aa:	82 e1       	ldi	r24, 0x12	; 18
  ac:	e0 e0       	ldi	r30, 0x00	; 0
  ae:	f1 e0       	ldi	r31, 0x01	; 1
  b0:	de 01       	movw	r26, r28
  b2:	11 96       	adiw	r26, 0x01	; 1
  b4:	01 90       	ld	r0, Z+
  b6:	0d 92       	st	X+, r0
  b8:	8a 95       	dec	r24
  ba:	e1 f7       	brne	.-8      	; 0xb4 <main+0x1e>
	DDRB = DDRB | (1<<LED_GREEN);
  bc:	25 9a       	sbi	0x04, 5	; 4
	
	PORTB = PORTB & ~(1<<LED_GREEN);
  be:	2d 98       	cbi	0x05, 5	; 5
  c0:	9e 01       	movw	r18, r28
  c2:	2b 5e       	subi	r18, 0xEB	; 235
  c4:	3f 4f       	sbci	r19, 0xFF	; 255
			if (morse[i] == 1){
				PORTB = PORTB ^ (1<<LED_GREEN);
				_delay_ms(LONG_DELAY);
				PORTB = PORTB & ~(1<<LED_GREEN);
			}else{
				PORTB = PORTB ^ (1<<LED_GREEN);
  c6:	40 e2       	ldi	r20, 0x20	; 32
  c8:	fe 01       	movw	r30, r28
  ca:	31 96       	adiw	r30, 0x01	; 1
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  cc:	5f ef       	ldi	r21, 0xFF	; 255
  ce:	85 ea       	ldi	r24, 0xA5	; 165
  d0:	9e e0       	ldi	r25, 0x0E	; 14
  d2:	51 50       	subi	r21, 0x01	; 1
  d4:	80 40       	sbci	r24, 0x00	; 0
  d6:	90 40       	sbci	r25, 0x00	; 0
  d8:	e1 f7       	brne	.-8      	; 0xd2 <main+0x3c>
  da:	00 c0       	rjmp	.+0      	; 0xdc <main+0x46>
  dc:	00 00       	nop
    while (1) 
    {
		for ( i = 0; i <= MESSAGE_SIZE; i++)
		{
			_delay_ms(PAUSE);
			if (morse[i] == 1){
  de:	81 91       	ld	r24, Z+
  e0:	91 91       	ld	r25, Z+
  e2:	01 97       	sbiw	r24, 0x01	; 1
  e4:	71 f4       	brne	.+28     	; 0x102 <main+0x6c>
				PORTB = PORTB ^ (1<<LED_GREEN);
  e6:	85 b1       	in	r24, 0x05	; 5
  e8:	84 27       	eor	r24, r20
  ea:	85 b9       	out	0x05, r24	; 5
  ec:	5f ef       	ldi	r21, 0xFF	; 255
  ee:	8b e7       	ldi	r24, 0x7B	; 123
  f0:	92 e9       	ldi	r25, 0x92	; 146
  f2:	51 50       	subi	r21, 0x01	; 1
  f4:	80 40       	sbci	r24, 0x00	; 0
  f6:	90 40       	sbci	r25, 0x00	; 0
  f8:	e1 f7       	brne	.-8      	; 0xf2 <main+0x5c>
  fa:	00 c0       	rjmp	.+0      	; 0xfc <main+0x66>
  fc:	00 00       	nop
				_delay_ms(LONG_DELAY);
				PORTB = PORTB & ~(1<<LED_GREEN);
  fe:	2d 98       	cbi	0x05, 5	; 5
 100:	0d c0       	rjmp	.+26     	; 0x11c <main+0x86>
			}else{
				PORTB = PORTB ^ (1<<LED_GREEN);
 102:	85 b1       	in	r24, 0x05	; 5
 104:	84 27       	eor	r24, r20
 106:	85 b9       	out	0x05, r24	; 5
 108:	5f ef       	ldi	r21, 0xFF	; 255
 10a:	89 e6       	ldi	r24, 0x69	; 105
 10c:	98 e1       	ldi	r25, 0x18	; 24
 10e:	51 50       	subi	r21, 0x01	; 1
 110:	80 40       	sbci	r24, 0x00	; 0
 112:	90 40       	sbci	r25, 0x00	; 0
 114:	e1 f7       	brne	.-8      	; 0x10e <main+0x78>
 116:	00 c0       	rjmp	.+0      	; 0x118 <main+0x82>
 118:	00 00       	nop
				_delay_ms(SHORT_DELAY);
				PORTB = PORTB & ~(1<<LED_GREEN);
 11a:	2d 98       	cbi	0x05, 5	; 5
	PORTB = PORTB & ~(1<<LED_GREEN);
    /* Replace with your application code */
	int i;
    while (1) 
    {
		for ( i = 0; i <= MESSAGE_SIZE; i++)
 11c:	e2 17       	cp	r30, r18
 11e:	f3 07       	cpc	r31, r19
 120:	a9 f6       	brne	.-86     	; 0xcc <main+0x36>
 122:	d2 cf       	rjmp	.-92     	; 0xc8 <main+0x32>

00000124 <_exit>:
 124:	f8 94       	cli

00000126 <__stop_program>:
 126:	ff cf       	rjmp	.-2      	; 0x126 <__stop_program>
