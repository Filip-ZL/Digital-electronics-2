
uart.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000044  00800100  000005a4  00000638  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000005a4  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000045  00800144  00800144  0000067c  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  0000067c  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000006ac  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000100  00000000  00000000  000006ec  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000015a3  00000000  00000000  000007ec  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000ab0  00000000  00000000  00001d8f  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000a94  00000000  00000000  0000283f  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000002ac  00000000  00000000  000032d4  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000059c  00000000  00000000  00003580  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000bba  00000000  00000000  00003b1c  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000100  00000000  00000000  000046d6  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   8:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  10:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  14:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  18:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  1c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  20:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  24:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  28:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  2c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  30:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  34:	0c 94 32 01 	jmp	0x264	; 0x264 <__vector_13>
  38:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  3c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  40:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  44:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  48:	0c 94 06 02 	jmp	0x40c	; 0x40c <__vector_18>
  4c:	0c 94 34 02 	jmp	0x468	; 0x468 <__vector_19>
  50:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  54:	0c 94 47 01 	jmp	0x28e	; 0x28e <__vector_21>
  58:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  5c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  60:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  64:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
  74:	11 e0       	ldi	r17, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	e4 ea       	ldi	r30, 0xA4	; 164
  7c:	f5 e0       	ldi	r31, 0x05	; 5
  7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
  80:	05 90       	lpm	r0, Z+
  82:	0d 92       	st	X+, r0
  84:	a4 34       	cpi	r26, 0x44	; 68
  86:	b1 07       	cpc	r27, r17
  88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>

0000008a <__do_clear_bss>:
  8a:	21 e0       	ldi	r18, 0x01	; 1
  8c:	a4 e4       	ldi	r26, 0x44	; 68
  8e:	b1 e0       	ldi	r27, 0x01	; 1
  90:	01 c0       	rjmp	.+2      	; 0x94 <.do_clear_bss_start>

00000092 <.do_clear_bss_loop>:
  92:	1d 92       	st	X+, r1

00000094 <.do_clear_bss_start>:
  94:	a9 38       	cpi	r26, 0x89	; 137
  96:	b2 07       	cpc	r27, r18
  98:	e1 f7       	brne	.-8      	; 0x92 <.do_clear_bss_loop>
  9a:	0e 94 f6 00 	call	0x1ec	; 0x1ec <main>
  9e:	0c 94 d0 02 	jmp	0x5a0	; 0x5a0 <_exit>

000000a2 <__bad_interrupt>:
  a2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a6 <toggle_e>:

    while ( (c = pgm_read_byte(progmem_s++)) )
    {
        lcd_putc(c);
    }
}/* lcd_puts_p */
  a6:	29 9a       	sbi	0x05, 1	; 5
  a8:	85 e0       	ldi	r24, 0x05	; 5
  aa:	8a 95       	dec	r24
  ac:	f1 f7       	brne	.-4      	; 0xaa <toggle_e+0x4>
  ae:	00 00       	nop
  b0:	29 98       	cbi	0x05, 1	; 5
  b2:	08 95       	ret

000000b4 <lcd_write>:
  b4:	cf 93       	push	r28
  b6:	c8 2f       	mov	r28, r24
  b8:	66 23       	and	r22, r22
  ba:	11 f0       	breq	.+4      	; 0xc0 <lcd_write+0xc>
  bc:	28 9a       	sbi	0x05, 0	; 5
  be:	01 c0       	rjmp	.+2      	; 0xc2 <lcd_write+0xe>
  c0:	28 98       	cbi	0x05, 0	; 5
  c2:	54 9a       	sbi	0x0a, 4	; 10
  c4:	55 9a       	sbi	0x0a, 5	; 10
  c6:	56 9a       	sbi	0x0a, 6	; 10
  c8:	57 9a       	sbi	0x0a, 7	; 10
  ca:	5f 98       	cbi	0x0b, 7	; 11
  cc:	5e 98       	cbi	0x0b, 6	; 11
  ce:	5d 98       	cbi	0x0b, 5	; 11
  d0:	5c 98       	cbi	0x0b, 4	; 11
  d2:	cc 23       	and	r28, r28
  d4:	0c f4       	brge	.+2      	; 0xd8 <lcd_write+0x24>
  d6:	5f 9a       	sbi	0x0b, 7	; 11
  d8:	c6 fd       	sbrc	r28, 6
  da:	5e 9a       	sbi	0x0b, 6	; 11
  dc:	c5 fd       	sbrc	r28, 5
  de:	5d 9a       	sbi	0x0b, 5	; 11
  e0:	c4 fd       	sbrc	r28, 4
  e2:	5c 9a       	sbi	0x0b, 4	; 11
  e4:	0e 94 53 00 	call	0xa6	; 0xa6 <toggle_e>
  e8:	5f 98       	cbi	0x0b, 7	; 11
  ea:	5e 98       	cbi	0x0b, 6	; 11
  ec:	5d 98       	cbi	0x0b, 5	; 11
  ee:	5c 98       	cbi	0x0b, 4	; 11
  f0:	c3 fd       	sbrc	r28, 3
  f2:	5f 9a       	sbi	0x0b, 7	; 11
  f4:	c2 fd       	sbrc	r28, 2
  f6:	5e 9a       	sbi	0x0b, 6	; 11
  f8:	c1 fd       	sbrc	r28, 1
  fa:	5d 9a       	sbi	0x0b, 5	; 11
  fc:	c0 fd       	sbrc	r28, 0
  fe:	5c 9a       	sbi	0x0b, 4	; 11
 100:	0e 94 53 00 	call	0xa6	; 0xa6 <toggle_e>
 104:	5c 9a       	sbi	0x0b, 4	; 11
 106:	5d 9a       	sbi	0x0b, 5	; 11
 108:	5e 9a       	sbi	0x0b, 6	; 11
 10a:	5f 9a       	sbi	0x0b, 7	; 11
 10c:	87 eb       	ldi	r24, 0xB7	; 183
 10e:	9b e0       	ldi	r25, 0x0B	; 11
 110:	01 97       	sbiw	r24, 0x01	; 1
 112:	f1 f7       	brne	.-4      	; 0x110 <lcd_write+0x5c>
 114:	00 c0       	rjmp	.+0      	; 0x116 <lcd_write+0x62>
 116:	00 00       	nop
 118:	cf 91       	pop	r28
 11a:	08 95       	ret

0000011c <lcd_command>:
 11c:	60 e0       	ldi	r22, 0x00	; 0
 11e:	0e 94 5a 00 	call	0xb4	; 0xb4 <lcd_write>
 122:	08 95       	ret

00000124 <lcd_gotoxy>:
 124:	61 11       	cpse	r22, r1
 126:	04 c0       	rjmp	.+8      	; 0x130 <lcd_gotoxy+0xc>
 128:	80 58       	subi	r24, 0x80	; 128
 12a:	0e 94 8e 00 	call	0x11c	; 0x11c <lcd_command>
 12e:	08 95       	ret
 130:	80 54       	subi	r24, 0x40	; 64
 132:	0e 94 8e 00 	call	0x11c	; 0x11c <lcd_command>
 136:	08 95       	ret

00000138 <lcd_clrscr>:
 138:	81 e0       	ldi	r24, 0x01	; 1
 13a:	0e 94 8e 00 	call	0x11c	; 0x11c <lcd_command>
 13e:	08 95       	ret

00000140 <lcd_putc>:
 140:	61 e0       	ldi	r22, 0x01	; 1
 142:	0e 94 5a 00 	call	0xb4	; 0xb4 <lcd_write>
 146:	08 95       	ret

00000148 <lcd_puts>:
 148:	cf 93       	push	r28
 14a:	df 93       	push	r29
 14c:	ec 01       	movw	r28, r24
 14e:	21 96       	adiw	r28, 0x01	; 1
 150:	fc 01       	movw	r30, r24
 152:	80 81       	ld	r24, Z
 154:	88 23       	and	r24, r24
 156:	29 f0       	breq	.+10     	; 0x162 <lcd_puts+0x1a>
 158:	0e 94 a0 00 	call	0x140	; 0x140 <lcd_putc>
 15c:	89 91       	ld	r24, Y+
 15e:	81 11       	cpse	r24, r1
 160:	fb cf       	rjmp	.-10     	; 0x158 <lcd_puts+0x10>
 162:	df 91       	pop	r29
 164:	cf 91       	pop	r28
 166:	08 95       	ret

00000168 <lcd_init>:
*                  LCD_DISP_ON_CURSOR      display on, cursor on
*                  LCD_DISP_CURSOR_BLINK   display on, cursor on flashing
*  Returns:  none
*************************************************************************/
void lcd_init(uint8_t dispAttr)
{
 168:	cf 93       	push	r28
 16a:	c8 2f       	mov	r28, r24
        DDR(LCD_E_PORT)     |= _BV(LCD_E_PIN);
    }
    else
    {
        /* configure all port bits as output (LCD data and control lines on different ports */
        DDR(LCD_RS_PORT)    |= _BV(LCD_RS_PIN);
 16c:	20 9a       	sbi	0x04, 0	; 4
        DDR(LCD_RW_PORT)    |= _BV(LCD_RW_PIN);
 16e:	55 9a       	sbi	0x0a, 5	; 10
        DDR(LCD_E_PORT)     |= _BV(LCD_E_PIN);
 170:	21 9a       	sbi	0x04, 1	; 4
        DDR(LCD_DATA0_PORT) |= _BV(LCD_DATA0_PIN);
 172:	54 9a       	sbi	0x0a, 4	; 10
        DDR(LCD_DATA1_PORT) |= _BV(LCD_DATA1_PIN);
 174:	55 9a       	sbi	0x0a, 5	; 10
        DDR(LCD_DATA2_PORT) |= _BV(LCD_DATA2_PIN);
 176:	56 9a       	sbi	0x0a, 6	; 10
        DDR(LCD_DATA3_PORT) |= _BV(LCD_DATA3_PIN);
 178:	57 9a       	sbi	0x0a, 7	; 10
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 17a:	8f ef       	ldi	r24, 0xFF	; 255
 17c:	99 ef       	ldi	r25, 0xF9	; 249
 17e:	01 97       	sbiw	r24, 0x01	; 1
 180:	f1 f7       	brne	.-4      	; 0x17e <lcd_init+0x16>
 182:	00 c0       	rjmp	.+0      	; 0x184 <lcd_init+0x1c>
 184:	00 00       	nop
    }
    delay(LCD_DELAY_BOOTUP); /* wait 16ms or more after power-on       */

    /* initial write to lcd is 8bit */
    LCD_DATA1_PORT |= _BV(LCD_DATA1_PIN); // LCD_FUNCTION>>4;
 186:	5d 9a       	sbi	0x0b, 5	; 11
    LCD_DATA0_PORT |= _BV(LCD_DATA0_PIN); // LCD_FUNCTION_8BIT>>4;
 188:	5c 9a       	sbi	0x0b, 4	; 11
    lcd_e_toggle();
 18a:	0e 94 53 00 	call	0xa6	; 0xa6 <toggle_e>
 18e:	8f e1       	ldi	r24, 0x1F	; 31
 190:	9e e4       	ldi	r25, 0x4E	; 78
 192:	01 97       	sbiw	r24, 0x01	; 1
 194:	f1 f7       	brne	.-4      	; 0x192 <lcd_init+0x2a>
 196:	00 c0       	rjmp	.+0      	; 0x198 <lcd_init+0x30>
 198:	00 00       	nop
    delay(LCD_DELAY_INIT); /* delay, busy flag can't be checked here */

    /* repeat last command */
    lcd_e_toggle();
 19a:	0e 94 53 00 	call	0xa6	; 0xa6 <toggle_e>
 19e:	8f ef       	ldi	r24, 0xFF	; 255
 1a0:	90 e0       	ldi	r25, 0x00	; 0
 1a2:	01 97       	sbiw	r24, 0x01	; 1
 1a4:	f1 f7       	brne	.-4      	; 0x1a2 <lcd_init+0x3a>
 1a6:	00 c0       	rjmp	.+0      	; 0x1a8 <lcd_init+0x40>
 1a8:	00 00       	nop
    delay(LCD_DELAY_INIT_REP); /* delay, busy flag can't be checked here */

    /* repeat last command a third time */
    lcd_e_toggle();
 1aa:	0e 94 53 00 	call	0xa6	; 0xa6 <toggle_e>
 1ae:	8f ef       	ldi	r24, 0xFF	; 255
 1b0:	90 e0       	ldi	r25, 0x00	; 0
 1b2:	01 97       	sbiw	r24, 0x01	; 1
 1b4:	f1 f7       	brne	.-4      	; 0x1b2 <lcd_init+0x4a>
 1b6:	00 c0       	rjmp	.+0      	; 0x1b8 <lcd_init+0x50>
 1b8:	00 00       	nop
    delay(LCD_DELAY_INIT_REP); /* delay, busy flag can't be checked here */

    /* now configure for 4bit mode */
    LCD_DATA0_PORT &= ~_BV(LCD_DATA0_PIN); // LCD_FUNCTION_4BIT_1LINE>>4
 1ba:	5c 98       	cbi	0x0b, 4	; 11
    lcd_e_toggle();
 1bc:	0e 94 53 00 	call	0xa6	; 0xa6 <toggle_e>
 1c0:	8f ef       	ldi	r24, 0xFF	; 255
 1c2:	90 e0       	ldi	r25, 0x00	; 0
 1c4:	01 97       	sbiw	r24, 0x01	; 1
 1c6:	f1 f7       	brne	.-4      	; 0x1c4 <lcd_init+0x5c>
 1c8:	00 c0       	rjmp	.+0      	; 0x1ca <lcd_init+0x62>
 1ca:	00 00       	nop
    /* Display with KS0073 controller requires special commands for enabling 4 line mode */
    lcd_command(KS0073_EXTENDED_FUNCTION_REGISTER_ON);
    lcd_command(KS0073_4LINES_MODE);
    lcd_command(KS0073_EXTENDED_FUNCTION_REGISTER_OFF);
    #else
    lcd_command(LCD_FUNCTION_DEFAULT); /* function set: display lines  */
 1cc:	88 e2       	ldi	r24, 0x28	; 40
 1ce:	0e 94 8e 00 	call	0x11c	; 0x11c <lcd_command>
    #endif
    lcd_command(LCD_DISP_OFF);     /* display off                  */
 1d2:	88 e0       	ldi	r24, 0x08	; 8
 1d4:	0e 94 8e 00 	call	0x11c	; 0x11c <lcd_command>
    lcd_clrscr();                  /* display clear                */
 1d8:	0e 94 9c 00 	call	0x138	; 0x138 <lcd_clrscr>
    lcd_command(LCD_MODE_DEFAULT); /* set entry mode               */
 1dc:	86 e0       	ldi	r24, 0x06	; 6
 1de:	0e 94 8e 00 	call	0x11c	; 0x11c <lcd_command>
    lcd_command(dispAttr);         /* display/cursor control       */
 1e2:	8c 2f       	mov	r24, r28
 1e4:	0e 94 8e 00 	call	0x11c	; 0x11c <lcd_command>
}/* lcd_init */
 1e8:	cf 91       	pop	r28
 1ea:	08 95       	ret

000001ec <main>:
 * and UART.
 */
int main(void)
{
    // Initialize LCD display
    lcd_init(LCD_DISP_ON);
 1ec:	8c e0       	ldi	r24, 0x0C	; 12
 1ee:	0e 94 b4 00 	call	0x168	; 0x168 <lcd_init>
    lcd_gotoxy(1, 0);
 1f2:	60 e0       	ldi	r22, 0x00	; 0
 1f4:	81 e0       	ldi	r24, 0x01	; 1
 1f6:	0e 94 92 00 	call	0x124	; 0x124 <lcd_gotoxy>
    lcd_puts("value:");
 1fa:	80 e0       	ldi	r24, 0x00	; 0
 1fc:	91 e0       	ldi	r25, 0x01	; 1
 1fe:	0e 94 a4 00 	call	0x148	; 0x148 <lcd_puts>
    lcd_gotoxy(3, 1);
 202:	61 e0       	ldi	r22, 0x01	; 1
 204:	83 e0       	ldi	r24, 0x03	; 3
 206:	0e 94 92 00 	call	0x124	; 0x124 <lcd_gotoxy>
    lcd_puts("key:");
 20a:	87 e0       	ldi	r24, 0x07	; 7
 20c:	91 e0       	ldi	r25, 0x01	; 1
 20e:	0e 94 a4 00 	call	0x148	; 0x148 <lcd_puts>

    // Configure ADC to convert PC0[A0] analog value
    // Set ADC reference to AVcc
	ADMUX |= (1 << REFS0);
 212:	ec e7       	ldi	r30, 0x7C	; 124
 214:	f0 e0       	ldi	r31, 0x00	; 0
 216:	80 81       	ld	r24, Z
 218:	80 64       	ori	r24, 0x40	; 64
 21a:	80 83       	st	Z, r24
	ADMUX &= ~(1 << REFS1);
 21c:	80 81       	ld	r24, Z
 21e:	8f 77       	andi	r24, 0x7F	; 127
 220:	80 83       	st	Z, r24
    // Set input channet to ADC0
	ADMUX &= ~((1 << MUX3) | (1 << MUX2) | (1 << MUX1) | (1 << MUX0));
 222:	80 81       	ld	r24, Z
 224:	80 7f       	andi	r24, 0xF0	; 240
 226:	80 83       	st	Z, r24
    // Enable ADC module
	ADCSRA |= (1 << ADEN);
 228:	ea e7       	ldi	r30, 0x7A	; 122
 22a:	f0 e0       	ldi	r31, 0x00	; 0
 22c:	80 81       	ld	r24, Z
 22e:	80 68       	ori	r24, 0x80	; 128
 230:	80 83       	st	Z, r24
    // Enable conversion complete interrupt
	ADCSRA |= (1 << ADIE);
 232:	80 81       	ld	r24, Z
 234:	88 60       	ori	r24, 0x08	; 8
 236:	80 83       	st	Z, r24
    // Set clock prescaler to 128
	ADCSRA |= (1 << ADPS2) | (1 << ADPS1) | (1 << ADPS0);
 238:	80 81       	ld	r24, Z
 23a:	87 60       	ori	r24, 0x07	; 7
 23c:	80 83       	st	Z, r24

    // Configure 16-bit Timer/Counter1 to start ADC conversion
    // Enable interrupt and set the overflow prescaler to 262 ms
	TIM1_overflow_262ms();
 23e:	e1 e8       	ldi	r30, 0x81	; 129
 240:	f0 e0       	ldi	r31, 0x00	; 0
 242:	80 81       	ld	r24, Z
 244:	8b 7f       	andi	r24, 0xFB	; 251
 246:	80 83       	st	Z, r24
 248:	80 81       	ld	r24, Z
 24a:	83 60       	ori	r24, 0x03	; 3
 24c:	80 83       	st	Z, r24
	TIM1_overflow_interrupt_enable();
 24e:	ef e6       	ldi	r30, 0x6F	; 111
 250:	f0 e0       	ldi	r31, 0x00	; 0
 252:	80 81       	ld	r24, Z
 254:	81 60       	ori	r24, 0x01	; 1
 256:	80 83       	st	Z, r24
    // Initialize UART to asynchronous, 8N1, 9600
	uart_init(UART_BAUD_SELECT(9600,F_CPU));
 258:	87 e6       	ldi	r24, 0x67	; 103
 25a:	90 e0       	ldi	r25, 0x00	; 0
 25c:	0e 94 5e 02 	call	0x4bc	; 0x4bc <uart_init>
	
    // Enables interrupts by setting the global interrupt mask
    sei();
 260:	78 94       	sei
 262:	ff cf       	rjmp	.-2      	; 0x262 <main+0x76>

00000264 <__vector_13>:
/**
 * ISR starts when Timer/Counter1 overflows. Use single conversion mode
 * and start conversion four times per second.
 */
ISR(TIMER1_OVF_vect)
{
 264:	1f 92       	push	r1
 266:	0f 92       	push	r0
 268:	0f b6       	in	r0, 0x3f	; 63
 26a:	0f 92       	push	r0
 26c:	11 24       	eor	r1, r1
 26e:	8f 93       	push	r24
 270:	ef 93       	push	r30
 272:	ff 93       	push	r31
    // Start ADC conversion
	ADCSRA |= (1 << ADSC);
 274:	ea e7       	ldi	r30, 0x7A	; 122
 276:	f0 e0       	ldi	r31, 0x00	; 0
 278:	80 81       	ld	r24, Z
 27a:	80 64       	ori	r24, 0x40	; 64
 27c:	80 83       	st	Z, r24
}
 27e:	ff 91       	pop	r31
 280:	ef 91       	pop	r30
 282:	8f 91       	pop	r24
 284:	0f 90       	pop	r0
 286:	0f be       	out	0x3f, r0	; 63
 288:	0f 90       	pop	r0
 28a:	1f 90       	pop	r1
 28c:	18 95       	reti

0000028e <__vector_21>:
/**
 * ISR starts when ADC complets the conversion. Display value on LCD
 * and send it to UART.
 */
ISR(ADC_vect)
{
 28e:	1f 92       	push	r1
 290:	0f 92       	push	r0
 292:	0f b6       	in	r0, 0x3f	; 63
 294:	0f 92       	push	r0
 296:	11 24       	eor	r1, r1
 298:	0f 93       	push	r16
 29a:	1f 93       	push	r17
 29c:	2f 93       	push	r18
 29e:	3f 93       	push	r19
 2a0:	4f 93       	push	r20
 2a2:	5f 93       	push	r21
 2a4:	6f 93       	push	r22
 2a6:	7f 93       	push	r23
 2a8:	8f 93       	push	r24
 2aa:	9f 93       	push	r25
 2ac:	af 93       	push	r26
 2ae:	bf 93       	push	r27
 2b0:	ef 93       	push	r30
 2b2:	ff 93       	push	r31
 2b4:	cf 93       	push	r28
 2b6:	df 93       	push	r29
 2b8:	cd b7       	in	r28, 0x3d	; 61
 2ba:	de b7       	in	r29, 0x3e	; 62
 2bc:	25 97       	sbiw	r28, 0x05	; 5
 2be:	de bf       	out	0x3e, r29	; 62
 2c0:	cd bf       	out	0x3d, r28	; 61
	uint16_t value;
	char lcd_string[5];
	
	value = ADC;
 2c2:	00 91 78 00 	lds	r16, 0x0078	; 0x800078 <__DATA_REGION_ORIGIN__+0x18>
 2c6:	10 91 79 00 	lds	r17, 0x0079	; 0x800079 <__DATA_REGION_ORIGIN__+0x19>
    } else if (__radix < 2 || __radix > 36) {
	*__s = 0;
	return __s;
    } else {
	extern char *__itoa_ncheck (int, char *, unsigned char);
	return __itoa_ncheck (__val, __s, __radix);
 2ca:	4a e0       	ldi	r20, 0x0A	; 10
 2cc:	be 01       	movw	r22, r28
 2ce:	6f 5f       	subi	r22, 0xFF	; 255
 2d0:	7f 4f       	sbci	r23, 0xFF	; 255
 2d2:	c8 01       	movw	r24, r16
 2d4:	0e 94 9b 02 	call	0x536	; 0x536 <__itoa_ncheck>
	
	itoa(value, lcd_string, 10);
	lcd_gotoxy(8,0);
 2d8:	60 e0       	ldi	r22, 0x00	; 0
 2da:	88 e0       	ldi	r24, 0x08	; 8
 2dc:	0e 94 92 00 	call	0x124	; 0x124 <lcd_gotoxy>
	lcd_puts("     ");
 2e0:	8c e0       	ldi	r24, 0x0C	; 12
 2e2:	91 e0       	ldi	r25, 0x01	; 1
 2e4:	0e 94 a4 00 	call	0x148	; 0x148 <lcd_puts>
	lcd_gotoxy(8,0);
 2e8:	60 e0       	ldi	r22, 0x00	; 0
 2ea:	88 e0       	ldi	r24, 0x08	; 8
 2ec:	0e 94 92 00 	call	0x124	; 0x124 <lcd_gotoxy>
	lcd_puts(lcd_string);
 2f0:	ce 01       	movw	r24, r28
 2f2:	01 96       	adiw	r24, 0x01	; 1
 2f4:	0e 94 a4 00 	call	0x148	; 0x148 <lcd_puts>
 2f8:	40 e1       	ldi	r20, 0x10	; 16
 2fa:	be 01       	movw	r22, r28
 2fc:	6f 5f       	subi	r22, 0xFF	; 255
 2fe:	7f 4f       	sbci	r23, 0xFF	; 255
 300:	c8 01       	movw	r24, r16
 302:	0e 94 9b 02 	call	0x536	; 0x536 <__itoa_ncheck>
	
	itoa(value, lcd_string, 16);
	lcd_gotoxy(13,0);
 306:	60 e0       	ldi	r22, 0x00	; 0
 308:	8d e0       	ldi	r24, 0x0D	; 13
 30a:	0e 94 92 00 	call	0x124	; 0x124 <lcd_gotoxy>
	lcd_puts("   ");
 30e:	8e e0       	ldi	r24, 0x0E	; 14
 310:	91 e0       	ldi	r25, 0x01	; 1
 312:	0e 94 a4 00 	call	0x148	; 0x148 <lcd_puts>
	lcd_gotoxy(13,0);
 316:	60 e0       	ldi	r22, 0x00	; 0
 318:	8d e0       	ldi	r24, 0x0D	; 13
 31a:	0e 94 92 00 	call	0x124	; 0x124 <lcd_gotoxy>
	lcd_puts(lcd_string);
 31e:	ce 01       	movw	r24, r28
 320:	01 96       	adiw	r24, 0x01	; 1
 322:	0e 94 a4 00 	call	0x148	; 0x148 <lcd_puts>
    // WRITE YOUR CODE HERE
	lcd_gotoxy(8,1);
 326:	61 e0       	ldi	r22, 0x01	; 1
 328:	88 e0       	ldi	r24, 0x08	; 8
 32a:	0e 94 92 00 	call	0x124	; 0x124 <lcd_gotoxy>
	lcd_puts("     ");
 32e:	8c e0       	ldi	r24, 0x0C	; 12
 330:	91 e0       	ldi	r25, 0x01	; 1
 332:	0e 94 a4 00 	call	0x148	; 0x148 <lcd_puts>
	
	uart_puts("ADC value in decimal: ");
 336:	82 e1       	ldi	r24, 0x12	; 18
 338:	91 e0       	ldi	r25, 0x01	; 1
 33a:	0e 94 8c 02 	call	0x518	; 0x518 <uart_puts>
	uart_puts(lcd_string);
 33e:	ce 01       	movw	r24, r28
 340:	01 96       	adiw	r24, 0x01	; 1
 342:	0e 94 8c 02 	call	0x518	; 0x518 <uart_puts>
	uart_puts("\n\r");
 346:	89 e2       	ldi	r24, 0x29	; 41
 348:	91 e0       	ldi	r25, 0x01	; 1
 34a:	0e 94 8c 02 	call	0x518	; 0x518 <uart_puts>
	
	if (value >= 1016)
 34e:	08 3f       	cpi	r16, 0xF8	; 248
 350:	83 e0       	ldi	r24, 0x03	; 3
 352:	18 07       	cpc	r17, r24
 354:	48 f0       	brcs	.+18     	; 0x368 <__vector_21+0xda>
	{
		lcd_gotoxy(8, 1);
 356:	61 e0       	ldi	r22, 0x01	; 1
 358:	88 e0       	ldi	r24, 0x08	; 8
 35a:	0e 94 92 00 	call	0x124	; 0x124 <lcd_gotoxy>
		lcd_puts("None");
 35e:	8c e2       	ldi	r24, 0x2C	; 44
 360:	91 e0       	ldi	r25, 0x01	; 1
 362:	0e 94 a4 00 	call	0x148	; 0x148 <lcd_puts>
 366:	38 c0       	rjmp	.+112    	; 0x3d8 <__vector_21+0x14a>
	}
	else if(value >= 100 & value <= 200)
 368:	c8 01       	movw	r24, r16
 36a:	84 56       	subi	r24, 0x64	; 100
 36c:	91 09       	sbc	r25, r1
 36e:	85 36       	cpi	r24, 0x65	; 101
 370:	91 05       	cpc	r25, r1
 372:	48 f4       	brcc	.+18     	; 0x386 <__vector_21+0xf8>
	{
		lcd_gotoxy(8,1);
 374:	61 e0       	ldi	r22, 0x01	; 1
 376:	88 e0       	ldi	r24, 0x08	; 8
 378:	0e 94 92 00 	call	0x124	; 0x124 <lcd_gotoxy>
		lcd_puts("Left");
 37c:	81 e3       	ldi	r24, 0x31	; 49
 37e:	91 e0       	ldi	r25, 0x01	; 1
 380:	0e 94 a4 00 	call	0x148	; 0x148 <lcd_puts>
 384:	29 c0       	rjmp	.+82     	; 0x3d8 <__vector_21+0x14a>
	}
	else if(value >= 540 & value <= 590)
 386:	c8 01       	movw	r24, r16
 388:	8c 51       	subi	r24, 0x1C	; 28
 38a:	92 40       	sbci	r25, 0x02	; 2
 38c:	c3 97       	sbiw	r24, 0x33	; 51
 38e:	48 f4       	brcc	.+18     	; 0x3a2 <__vector_21+0x114>
	{
		lcd_gotoxy(8,1);
 390:	61 e0       	ldi	r22, 0x01	; 1
 392:	88 e0       	ldi	r24, 0x08	; 8
 394:	0e 94 92 00 	call	0x124	; 0x124 <lcd_gotoxy>
		lcd_puts("Up");
 398:	86 e3       	ldi	r24, 0x36	; 54
 39a:	91 e0       	ldi	r25, 0x01	; 1
 39c:	0e 94 a4 00 	call	0x148	; 0x148 <lcd_puts>
 3a0:	1b c0       	rjmp	.+54     	; 0x3d8 <__vector_21+0x14a>
	}
	else if(value >= 750 & value <= 790)
 3a2:	c8 01       	movw	r24, r16
 3a4:	8e 5e       	subi	r24, 0xEE	; 238
 3a6:	92 40       	sbci	r25, 0x02	; 2
 3a8:	89 97       	sbiw	r24, 0x29	; 41
 3aa:	48 f4       	brcc	.+18     	; 0x3be <__vector_21+0x130>
	{
		lcd_gotoxy(8,1);
 3ac:	61 e0       	ldi	r22, 0x01	; 1
 3ae:	88 e0       	ldi	r24, 0x08	; 8
 3b0:	0e 94 92 00 	call	0x124	; 0x124 <lcd_gotoxy>
		lcd_puts("Right");
 3b4:	89 e3       	ldi	r24, 0x39	; 57
 3b6:	91 e0       	ldi	r25, 0x01	; 1
 3b8:	0e 94 a4 00 	call	0x148	; 0x148 <lcd_puts>
 3bc:	0d c0       	rjmp	.+26     	; 0x3d8 <__vector_21+0x14a>
	}
	else if(value >= 650 & value <= 700)
 3be:	0a 58       	subi	r16, 0x8A	; 138
 3c0:	12 40       	sbci	r17, 0x02	; 2
 3c2:	03 33       	cpi	r16, 0x33	; 51
 3c4:	11 05       	cpc	r17, r1
 3c6:	40 f4       	brcc	.+16     	; 0x3d8 <__vector_21+0x14a>
	{
		lcd_gotoxy(8,1);
 3c8:	61 e0       	ldi	r22, 0x01	; 1
 3ca:	88 e0       	ldi	r24, 0x08	; 8
 3cc:	0e 94 92 00 	call	0x124	; 0x124 <lcd_gotoxy>
		lcd_puts("Down");
 3d0:	8f e3       	ldi	r24, 0x3F	; 63
 3d2:	91 e0       	ldi	r25, 0x01	; 1
 3d4:	0e 94 a4 00 	call	0x148	; 0x148 <lcd_puts>
	}

 3d8:	0f 90       	pop	r0
 3da:	0f 90       	pop	r0
 3dc:	0f 90       	pop	r0
 3de:	0f 90       	pop	r0
 3e0:	0f 90       	pop	r0
 3e2:	df 91       	pop	r29
 3e4:	cf 91       	pop	r28
 3e6:	ff 91       	pop	r31
 3e8:	ef 91       	pop	r30
 3ea:	bf 91       	pop	r27
 3ec:	af 91       	pop	r26
 3ee:	9f 91       	pop	r25
 3f0:	8f 91       	pop	r24
 3f2:	7f 91       	pop	r23
 3f4:	6f 91       	pop	r22
 3f6:	5f 91       	pop	r21
 3f8:	4f 91       	pop	r20
 3fa:	3f 91       	pop	r19
 3fc:	2f 91       	pop	r18
 3fe:	1f 91       	pop	r17
 400:	0f 91       	pop	r16
 402:	0f 90       	pop	r0
 404:	0f be       	out	0x3f, r0	; 63
 406:	0f 90       	pop	r0
 408:	1f 90       	pop	r1
 40a:	18 95       	reti

0000040c <__vector_18>:
    /* store buffer index */
    UART_RxTail = tmptail;

    UART_LastRxError = 0;
    return (lastRxError << 8) + data;
}/* uart_getc */
 40c:	1f 92       	push	r1
 40e:	0f 92       	push	r0
 410:	0f b6       	in	r0, 0x3f	; 63
 412:	0f 92       	push	r0
 414:	11 24       	eor	r1, r1
 416:	2f 93       	push	r18
 418:	8f 93       	push	r24
 41a:	9f 93       	push	r25
 41c:	ef 93       	push	r30
 41e:	ff 93       	push	r31
 420:	80 91 c0 00 	lds	r24, 0x00C0	; 0x8000c0 <__DATA_REGION_ORIGIN__+0x60>
 424:	20 91 c6 00 	lds	r18, 0x00C6	; 0x8000c6 <__DATA_REGION_ORIGIN__+0x66>
 428:	8c 71       	andi	r24, 0x1C	; 28
 42a:	e0 91 46 01 	lds	r30, 0x0146	; 0x800146 <UART_RxHead>
 42e:	ef 5f       	subi	r30, 0xFF	; 255
 430:	ef 71       	andi	r30, 0x1F	; 31
 432:	90 91 45 01 	lds	r25, 0x0145	; 0x800145 <UART_RxTail>
 436:	e9 17       	cp	r30, r25
 438:	39 f0       	breq	.+14     	; 0x448 <__vector_18+0x3c>
 43a:	e0 93 46 01 	sts	0x0146, r30	; 0x800146 <UART_RxHead>
 43e:	f0 e0       	ldi	r31, 0x00	; 0
 440:	e7 5b       	subi	r30, 0xB7	; 183
 442:	fe 4f       	sbci	r31, 0xFE	; 254
 444:	20 83       	st	Z, r18
 446:	01 c0       	rjmp	.+2      	; 0x44a <__vector_18+0x3e>
 448:	82 e0       	ldi	r24, 0x02	; 2
 44a:	90 91 44 01 	lds	r25, 0x0144	; 0x800144 <__data_end>
 44e:	89 2b       	or	r24, r25
 450:	80 93 44 01 	sts	0x0144, r24	; 0x800144 <__data_end>
 454:	ff 91       	pop	r31
 456:	ef 91       	pop	r30
 458:	9f 91       	pop	r25
 45a:	8f 91       	pop	r24
 45c:	2f 91       	pop	r18
 45e:	0f 90       	pop	r0
 460:	0f be       	out	0x3f, r0	; 63
 462:	0f 90       	pop	r0
 464:	1f 90       	pop	r1
 466:	18 95       	reti

00000468 <__vector_19>:
 468:	1f 92       	push	r1
 46a:	0f 92       	push	r0
 46c:	0f b6       	in	r0, 0x3f	; 63
 46e:	0f 92       	push	r0
 470:	11 24       	eor	r1, r1
 472:	8f 93       	push	r24
 474:	9f 93       	push	r25
 476:	ef 93       	push	r30
 478:	ff 93       	push	r31
 47a:	90 91 48 01 	lds	r25, 0x0148	; 0x800148 <UART_TxHead>
 47e:	80 91 47 01 	lds	r24, 0x0147	; 0x800147 <UART_TxTail>
 482:	98 17       	cp	r25, r24
 484:	69 f0       	breq	.+26     	; 0x4a0 <__vector_19+0x38>
 486:	e0 91 47 01 	lds	r30, 0x0147	; 0x800147 <UART_TxTail>
 48a:	ef 5f       	subi	r30, 0xFF	; 255
 48c:	ef 71       	andi	r30, 0x1F	; 31
 48e:	e0 93 47 01 	sts	0x0147, r30	; 0x800147 <UART_TxTail>
 492:	f0 e0       	ldi	r31, 0x00	; 0
 494:	e7 59       	subi	r30, 0x97	; 151
 496:	fe 4f       	sbci	r31, 0xFE	; 254
 498:	80 81       	ld	r24, Z
 49a:	80 93 c6 00 	sts	0x00C6, r24	; 0x8000c6 <__DATA_REGION_ORIGIN__+0x66>
 49e:	05 c0       	rjmp	.+10     	; 0x4aa <__vector_19+0x42>
 4a0:	e1 ec       	ldi	r30, 0xC1	; 193
 4a2:	f0 e0       	ldi	r31, 0x00	; 0
 4a4:	80 81       	ld	r24, Z
 4a6:	8f 7d       	andi	r24, 0xDF	; 223
 4a8:	80 83       	st	Z, r24
 4aa:	ff 91       	pop	r31
 4ac:	ef 91       	pop	r30
 4ae:	9f 91       	pop	r25
 4b0:	8f 91       	pop	r24
 4b2:	0f 90       	pop	r0
 4b4:	0f be       	out	0x3f, r0	; 63
 4b6:	0f 90       	pop	r0
 4b8:	1f 90       	pop	r1
 4ba:	18 95       	reti

000004bc <uart_init>:
 4bc:	10 92 48 01 	sts	0x0148, r1	; 0x800148 <UART_TxHead>
 4c0:	10 92 47 01 	sts	0x0147, r1	; 0x800147 <UART_TxTail>
 4c4:	10 92 46 01 	sts	0x0146, r1	; 0x800146 <UART_RxHead>
 4c8:	10 92 45 01 	sts	0x0145, r1	; 0x800145 <UART_RxTail>
 4cc:	99 23       	and	r25, r25
 4ce:	1c f4       	brge	.+6      	; 0x4d6 <uart_init+0x1a>
 4d0:	22 e0       	ldi	r18, 0x02	; 2
 4d2:	20 93 c0 00 	sts	0x00C0, r18	; 0x8000c0 <__DATA_REGION_ORIGIN__+0x60>
 4d6:	90 78       	andi	r25, 0x80	; 128
 4d8:	90 93 c5 00 	sts	0x00C5, r25	; 0x8000c5 <__DATA_REGION_ORIGIN__+0x65>
 4dc:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__DATA_REGION_ORIGIN__+0x64>
 4e0:	88 e9       	ldi	r24, 0x98	; 152
 4e2:	80 93 c1 00 	sts	0x00C1, r24	; 0x8000c1 <__DATA_REGION_ORIGIN__+0x61>
 4e6:	86 e0       	ldi	r24, 0x06	; 6
 4e8:	80 93 c2 00 	sts	0x00C2, r24	; 0x8000c2 <__DATA_REGION_ORIGIN__+0x62>
 4ec:	08 95       	ret

000004ee <uart_putc>:
void uart_putc(unsigned char data)
{
    unsigned char tmphead;


    tmphead = (UART_TxHead + 1) & UART_TX_BUFFER_MASK;
 4ee:	20 91 48 01 	lds	r18, 0x0148	; 0x800148 <UART_TxHead>
 4f2:	2f 5f       	subi	r18, 0xFF	; 255
 4f4:	2f 71       	andi	r18, 0x1F	; 31

    while (tmphead == UART_TxTail)
 4f6:	90 91 47 01 	lds	r25, 0x0147	; 0x800147 <UART_TxTail>
 4fa:	29 17       	cp	r18, r25
 4fc:	e1 f3       	breq	.-8      	; 0x4f6 <uart_putc+0x8>
    {
        ;/* wait for free space in buffer */
    }

    UART_TxBuf[tmphead] = data;
 4fe:	e2 2f       	mov	r30, r18
 500:	f0 e0       	ldi	r31, 0x00	; 0
 502:	e7 59       	subi	r30, 0x97	; 151
 504:	fe 4f       	sbci	r31, 0xFE	; 254
 506:	80 83       	st	Z, r24
    UART_TxHead         = tmphead;
 508:	20 93 48 01 	sts	0x0148, r18	; 0x800148 <UART_TxHead>

    /* enable UDRE interrupt */
    UART0_CONTROL |= _BV(UART0_UDRIE);
 50c:	e1 ec       	ldi	r30, 0xC1	; 193
 50e:	f0 e0       	ldi	r31, 0x00	; 0
 510:	80 81       	ld	r24, Z
 512:	80 62       	ori	r24, 0x20	; 32
 514:	80 83       	st	Z, r24
 516:	08 95       	ret

00000518 <uart_puts>:
 * Purpose:  transmit string to UART
 * Input:    string to be transmitted
 * Returns:  none
 **************************************************************************/
void uart_puts(const char *s)
{
 518:	cf 93       	push	r28
 51a:	df 93       	push	r29
 51c:	ec 01       	movw	r28, r24
    while (*s)
 51e:	88 81       	ld	r24, Y
 520:	88 23       	and	r24, r24
 522:	31 f0       	breq	.+12     	; 0x530 <uart_puts+0x18>
 524:	21 96       	adiw	r28, 0x01	; 1
        uart_putc(*s++);
 526:	0e 94 77 02 	call	0x4ee	; 0x4ee <uart_putc>
 * Input:    string to be transmitted
 * Returns:  none
 **************************************************************************/
void uart_puts(const char *s)
{
    while (*s)
 52a:	89 91       	ld	r24, Y+
 52c:	81 11       	cpse	r24, r1
 52e:	fb cf       	rjmp	.-10     	; 0x526 <uart_puts+0xe>
        uart_putc(*s++);
}/* uart_puts */
 530:	df 91       	pop	r29
 532:	cf 91       	pop	r28
 534:	08 95       	ret

00000536 <__itoa_ncheck>:
 536:	bb 27       	eor	r27, r27
 538:	4a 30       	cpi	r20, 0x0A	; 10
 53a:	31 f4       	brne	.+12     	; 0x548 <__itoa_ncheck+0x12>
 53c:	99 23       	and	r25, r25
 53e:	22 f4       	brpl	.+8      	; 0x548 <__itoa_ncheck+0x12>
 540:	bd e2       	ldi	r27, 0x2D	; 45
 542:	90 95       	com	r25
 544:	81 95       	neg	r24
 546:	9f 4f       	sbci	r25, 0xFF	; 255
 548:	0c 94 a7 02 	jmp	0x54e	; 0x54e <__utoa_common>

0000054c <__utoa_ncheck>:
 54c:	bb 27       	eor	r27, r27

0000054e <__utoa_common>:
 54e:	fb 01       	movw	r30, r22
 550:	55 27       	eor	r21, r21
 552:	aa 27       	eor	r26, r26
 554:	88 0f       	add	r24, r24
 556:	99 1f       	adc	r25, r25
 558:	aa 1f       	adc	r26, r26
 55a:	a4 17       	cp	r26, r20
 55c:	10 f0       	brcs	.+4      	; 0x562 <__utoa_common+0x14>
 55e:	a4 1b       	sub	r26, r20
 560:	83 95       	inc	r24
 562:	50 51       	subi	r21, 0x10	; 16
 564:	b9 f7       	brne	.-18     	; 0x554 <__utoa_common+0x6>
 566:	a0 5d       	subi	r26, 0xD0	; 208
 568:	aa 33       	cpi	r26, 0x3A	; 58
 56a:	08 f0       	brcs	.+2      	; 0x56e <__utoa_common+0x20>
 56c:	a9 5d       	subi	r26, 0xD9	; 217
 56e:	a1 93       	st	Z+, r26
 570:	00 97       	sbiw	r24, 0x00	; 0
 572:	79 f7       	brne	.-34     	; 0x552 <__utoa_common+0x4>
 574:	b1 11       	cpse	r27, r1
 576:	b1 93       	st	Z+, r27
 578:	11 92       	st	Z+, r1
 57a:	cb 01       	movw	r24, r22
 57c:	0c 94 c0 02 	jmp	0x580	; 0x580 <strrev>

00000580 <strrev>:
 580:	dc 01       	movw	r26, r24
 582:	fc 01       	movw	r30, r24
 584:	67 2f       	mov	r22, r23
 586:	71 91       	ld	r23, Z+
 588:	77 23       	and	r23, r23
 58a:	e1 f7       	brne	.-8      	; 0x584 <strrev+0x4>
 58c:	32 97       	sbiw	r30, 0x02	; 2
 58e:	04 c0       	rjmp	.+8      	; 0x598 <strrev+0x18>
 590:	7c 91       	ld	r23, X
 592:	6d 93       	st	X+, r22
 594:	70 83       	st	Z, r23
 596:	62 91       	ld	r22, -Z
 598:	ae 17       	cp	r26, r30
 59a:	bf 07       	cpc	r27, r31
 59c:	c8 f3       	brcs	.-14     	; 0x590 <strrev+0x10>
 59e:	08 95       	ret

000005a0 <_exit>:
 5a0:	f8 94       	cli

000005a2 <__stop_program>:
 5a2:	ff cf       	rjmp	.-2      	; 0x5a2 <__stop_program>
