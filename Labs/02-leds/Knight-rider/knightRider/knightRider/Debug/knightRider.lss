
knightRider.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  00000274  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000220  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000030  00000000  00000000  00000274  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000002a4  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000020  00000000  00000000  000002e4  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000941  00000000  00000000  00000304  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 0000067e  00000000  00000000  00000c45  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   000003f4  00000000  00000000  000012c3  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000024  00000000  00000000  000016b8  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000411  00000000  00000000  000016dc  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    000003f8  00000000  00000000  00001aed  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000010  00000000  00000000  00001ee5  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
   8:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
   c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  10:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  14:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  18:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  1c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  20:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  24:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  28:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  2c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  30:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  34:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  38:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  3c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  40:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  44:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  48:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  4c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  50:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  54:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  58:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  5c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  60:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  64:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61
  74:	0e 94 40 00 	call	0x80	; 0x80 <main>
  78:	0c 94 0e 01 	jmp	0x21c	; 0x21c <_exit>

0000007c <__bad_interrupt>:
  7c:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000080 <main>:

int main(void)
{
	// Set DDRB pins as output for led's
	// Set output to low
	DDRB |= (1<<LED_0);
  80:	20 9a       	sbi	0x04, 0	; 4
	PORTB &= ~(1<<LED_0);
  82:	28 98       	cbi	0x05, 0	; 5
	DDRB |= (1<<LED_1);
  84:	21 9a       	sbi	0x04, 1	; 4
	PORTB &= ~(1<<LED_1);
  86:	29 98       	cbi	0x05, 1	; 5
	DDRB |= (1<<LED_2);
  88:	22 9a       	sbi	0x04, 2	; 4
	PORTB &= ~(1<<LED_2);
  8a:	2a 98       	cbi	0x05, 2	; 5
	DDRB |= (1<<LED_3);
  8c:	23 9a       	sbi	0x04, 3	; 4
	PORTB &= ~(1<<LED_3);
  8e:	2b 98       	cbi	0x05, 3	; 5
	DDRB |= (1<<LED_4);
  90:	24 9a       	sbi	0x04, 4	; 4
	PORTB &= ~(1<<LED_4);
  92:	2c 98       	cbi	0x05, 4	; 5
	//button	
	DDRD = DDRD & ~(1<<BTN);
  94:	50 98       	cbi	0x0a, 0	; 10
	PORTD = PORTD | (1<<BTN);
  96:	58 9a       	sbi	0x0b, 0	; 11
	int state;
	int Pressed = 0;
	int Pressed_Confidence_Level = 0;
	int Released_Confidence_Level = 0;
  98:	60 e0       	ldi	r22, 0x00	; 0
  9a:	70 e0       	ldi	r23, 0x00	; 0
	//button	
	DDRD = DDRD & ~(1<<BTN);
	PORTD = PORTD | (1<<BTN);
	int state;
	int Pressed = 0;
	int Pressed_Confidence_Level = 0;
  9c:	40 e0       	ldi	r20, 0x00	; 0
  9e:	50 e0       	ldi	r21, 0x00	; 0
	PORTB &= ~(1<<LED_4);
	//button	
	DDRD = DDRD & ~(1<<BTN);
	PORTD = PORTD | (1<<BTN);
	int state;
	int Pressed = 0;
  a0:	e0 e0       	ldi	r30, 0x00	; 0
  a2:	f0 e0       	ldi	r31, 0x00	; 0
			{
				if (Pressed == 0)
				{
				// one way
				_delay_ms(BLINK_DELAY);
				PORTB ^= (1<<LED_0);
  a4:	01 e0       	ldi	r16, 0x01	; 1
				_delay_ms(BLINK_DELAY);
				PORTB &= ~(1<<LED_0);
				PORTB ^= (1<<LED_1);
  a6:	12 e0       	ldi	r17, 0x02	; 2
				_delay_ms(BLINK_DELAY);
				PORTB &= ~(1<<LED_1);
				PORTB ^= (1<<LED_2);
  a8:	d4 e0       	ldi	r29, 0x04	; 4
				_delay_ms(BLINK_DELAY);
				PORTB &= ~(1<<LED_2);
				PORTB ^= (1<<LED_3);
  aa:	c8 e0       	ldi	r28, 0x08	; 8
				_delay_ms(BLINK_DELAY);
				PORTB &= ~(1<<LED_3);
				PORTB ^= (1<<LED_4);
  ac:	68 94       	set
  ae:	ff 24       	eor	r15, r15
  b0:	f4 f8       	bld	r15, 4
				_delay_ms(BLINK_DELAY);
				PORTB &= ~(1<<LED_1);
				PORTB ^= (1<<LED_0);
				_delay_ms(BLINK_DELAY);
				PORTB &= ~(1<<LED_0);
					Pressed = 1;
  b2:	a1 e0       	ldi	r26, 0x01	; 1
  b4:	b0 e0       	ldi	r27, 0x00	; 0
	int Pressed_Confidence_Level = 0;
	int Released_Confidence_Level = 0;
    /* Replace with your application code */
    while (1) 
    {
		if (bit_is_clear(PINB, BTN))
  b6:	18 99       	sbic	0x03, 0	; 3
  b8:	8e c0       	rjmp	.+284    	; 0x1d6 <main+0x156>
		{
			Pressed_Confidence_Level ++;
  ba:	4f 5f       	subi	r20, 0xFF	; 255
  bc:	5f 4f       	sbci	r21, 0xFF	; 255
			Released_Confidence_Level = 0;
			if (Pressed_Confidence_Level >500)
  be:	45 3f       	cpi	r20, 0xF5	; 245
  c0:	21 e0       	ldi	r18, 0x01	; 1
  c2:	52 07       	cpc	r21, r18
  c4:	0c f4       	brge	.+2      	; 0xc8 <main+0x48>
  c6:	92 c0       	rjmp	.+292    	; 0x1ec <main+0x16c>
			{
				if (Pressed == 0)
  c8:	30 97       	sbiw	r30, 0x00	; 0
  ca:	09 f0       	breq	.+2      	; 0xce <main+0x4e>
  cc:	92 c0       	rjmp	.+292    	; 0x1f2 <main+0x172>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  ce:	8f ef       	ldi	r24, 0xFF	; 255
  d0:	94 e3       	ldi	r25, 0x34	; 52
  d2:	2c e0       	ldi	r18, 0x0C	; 12
  d4:	81 50       	subi	r24, 0x01	; 1
  d6:	90 40       	sbci	r25, 0x00	; 0
  d8:	20 40       	sbci	r18, 0x00	; 0
  da:	e1 f7       	brne	.-8      	; 0xd4 <main+0x54>
  dc:	00 c0       	rjmp	.+0      	; 0xde <main+0x5e>
  de:	00 00       	nop
				{
				// one way
				_delay_ms(BLINK_DELAY);
				PORTB ^= (1<<LED_0);
  e0:	85 b1       	in	r24, 0x05	; 5
  e2:	80 27       	eor	r24, r16
  e4:	85 b9       	out	0x05, r24	; 5
  e6:	8f ef       	ldi	r24, 0xFF	; 255
  e8:	94 e3       	ldi	r25, 0x34	; 52
  ea:	2c e0       	ldi	r18, 0x0C	; 12
  ec:	81 50       	subi	r24, 0x01	; 1
  ee:	90 40       	sbci	r25, 0x00	; 0
  f0:	20 40       	sbci	r18, 0x00	; 0
  f2:	e1 f7       	brne	.-8      	; 0xec <main+0x6c>
  f4:	00 c0       	rjmp	.+0      	; 0xf6 <main+0x76>
  f6:	00 00       	nop
				_delay_ms(BLINK_DELAY);
				PORTB &= ~(1<<LED_0);
  f8:	28 98       	cbi	0x05, 0	; 5
				PORTB ^= (1<<LED_1);
  fa:	85 b1       	in	r24, 0x05	; 5
  fc:	81 27       	eor	r24, r17
  fe:	85 b9       	out	0x05, r24	; 5
 100:	8f ef       	ldi	r24, 0xFF	; 255
 102:	94 e3       	ldi	r25, 0x34	; 52
 104:	2c e0       	ldi	r18, 0x0C	; 12
 106:	81 50       	subi	r24, 0x01	; 1
 108:	90 40       	sbci	r25, 0x00	; 0
 10a:	20 40       	sbci	r18, 0x00	; 0
 10c:	e1 f7       	brne	.-8      	; 0x106 <main+0x86>
 10e:	00 c0       	rjmp	.+0      	; 0x110 <main+0x90>
 110:	00 00       	nop
				_delay_ms(BLINK_DELAY);
				PORTB &= ~(1<<LED_1);
 112:	29 98       	cbi	0x05, 1	; 5
				PORTB ^= (1<<LED_2);
 114:	85 b1       	in	r24, 0x05	; 5
 116:	8d 27       	eor	r24, r29
 118:	85 b9       	out	0x05, r24	; 5
 11a:	8f ef       	ldi	r24, 0xFF	; 255
 11c:	94 e3       	ldi	r25, 0x34	; 52
 11e:	2c e0       	ldi	r18, 0x0C	; 12
 120:	81 50       	subi	r24, 0x01	; 1
 122:	90 40       	sbci	r25, 0x00	; 0
 124:	20 40       	sbci	r18, 0x00	; 0
 126:	e1 f7       	brne	.-8      	; 0x120 <main+0xa0>
 128:	00 c0       	rjmp	.+0      	; 0x12a <main+0xaa>
 12a:	00 00       	nop
				_delay_ms(BLINK_DELAY);
				PORTB &= ~(1<<LED_2);
 12c:	2a 98       	cbi	0x05, 2	; 5
				PORTB ^= (1<<LED_3);
 12e:	85 b1       	in	r24, 0x05	; 5
 130:	8c 27       	eor	r24, r28
 132:	85 b9       	out	0x05, r24	; 5
 134:	8f ef       	ldi	r24, 0xFF	; 255
 136:	94 e3       	ldi	r25, 0x34	; 52
 138:	2c e0       	ldi	r18, 0x0C	; 12
 13a:	81 50       	subi	r24, 0x01	; 1
 13c:	90 40       	sbci	r25, 0x00	; 0
 13e:	20 40       	sbci	r18, 0x00	; 0
 140:	e1 f7       	brne	.-8      	; 0x13a <main+0xba>
 142:	00 c0       	rjmp	.+0      	; 0x144 <main+0xc4>
 144:	00 00       	nop
				_delay_ms(BLINK_DELAY);
				PORTB &= ~(1<<LED_3);
 146:	2b 98       	cbi	0x05, 3	; 5
				PORTB ^= (1<<LED_4);
 148:	85 b1       	in	r24, 0x05	; 5
 14a:	8f 25       	eor	r24, r15
 14c:	85 b9       	out	0x05, r24	; 5
 14e:	8f ef       	ldi	r24, 0xFF	; 255
 150:	94 e3       	ldi	r25, 0x34	; 52
 152:	2c e0       	ldi	r18, 0x0C	; 12
 154:	81 50       	subi	r24, 0x01	; 1
 156:	90 40       	sbci	r25, 0x00	; 0
 158:	20 40       	sbci	r18, 0x00	; 0
 15a:	e1 f7       	brne	.-8      	; 0x154 <main+0xd4>
 15c:	00 c0       	rjmp	.+0      	; 0x15e <main+0xde>
 15e:	00 00       	nop
				// other way
				_delay_ms(BLINK_DELAY);
				PORTB &= ~(1<<LED_4);
 160:	2c 98       	cbi	0x05, 4	; 5
				PORTB ^= (1<<LED_3);
 162:	85 b1       	in	r24, 0x05	; 5
 164:	8c 27       	eor	r24, r28
 166:	85 b9       	out	0x05, r24	; 5
 168:	8f ef       	ldi	r24, 0xFF	; 255
 16a:	94 e3       	ldi	r25, 0x34	; 52
 16c:	2c e0       	ldi	r18, 0x0C	; 12
 16e:	81 50       	subi	r24, 0x01	; 1
 170:	90 40       	sbci	r25, 0x00	; 0
 172:	20 40       	sbci	r18, 0x00	; 0
 174:	e1 f7       	brne	.-8      	; 0x16e <main+0xee>
 176:	00 c0       	rjmp	.+0      	; 0x178 <main+0xf8>
 178:	00 00       	nop
				_delay_ms(BLINK_DELAY);
				PORTB &= ~(1<<LED_3);
 17a:	2b 98       	cbi	0x05, 3	; 5
				PORTB ^= (1<<LED_2);
 17c:	85 b1       	in	r24, 0x05	; 5
 17e:	8d 27       	eor	r24, r29
 180:	85 b9       	out	0x05, r24	; 5
 182:	8f ef       	ldi	r24, 0xFF	; 255
 184:	94 e3       	ldi	r25, 0x34	; 52
 186:	2c e0       	ldi	r18, 0x0C	; 12
 188:	81 50       	subi	r24, 0x01	; 1
 18a:	90 40       	sbci	r25, 0x00	; 0
 18c:	20 40       	sbci	r18, 0x00	; 0
 18e:	e1 f7       	brne	.-8      	; 0x188 <main+0x108>
 190:	00 c0       	rjmp	.+0      	; 0x192 <main+0x112>
 192:	00 00       	nop
				_delay_ms(BLINK_DELAY);
				PORTB &= ~(1<<LED_2);
 194:	2a 98       	cbi	0x05, 2	; 5
				PORTB ^= (1<<LED_1);
 196:	85 b1       	in	r24, 0x05	; 5
 198:	81 27       	eor	r24, r17
 19a:	85 b9       	out	0x05, r24	; 5
 19c:	8f ef       	ldi	r24, 0xFF	; 255
 19e:	94 e3       	ldi	r25, 0x34	; 52
 1a0:	2c e0       	ldi	r18, 0x0C	; 12
 1a2:	81 50       	subi	r24, 0x01	; 1
 1a4:	90 40       	sbci	r25, 0x00	; 0
 1a6:	20 40       	sbci	r18, 0x00	; 0
 1a8:	e1 f7       	brne	.-8      	; 0x1a2 <main+0x122>
 1aa:	00 c0       	rjmp	.+0      	; 0x1ac <main+0x12c>
 1ac:	00 00       	nop
				_delay_ms(BLINK_DELAY);
				PORTB &= ~(1<<LED_1);
 1ae:	29 98       	cbi	0x05, 1	; 5
				PORTB ^= (1<<LED_0);
 1b0:	85 b1       	in	r24, 0x05	; 5
 1b2:	80 27       	eor	r24, r16
 1b4:	85 b9       	out	0x05, r24	; 5
 1b6:	8f ef       	ldi	r24, 0xFF	; 255
 1b8:	94 e3       	ldi	r25, 0x34	; 52
 1ba:	2c e0       	ldi	r18, 0x0C	; 12
 1bc:	81 50       	subi	r24, 0x01	; 1
 1be:	90 40       	sbci	r25, 0x00	; 0
 1c0:	20 40       	sbci	r18, 0x00	; 0
 1c2:	e1 f7       	brne	.-8      	; 0x1bc <main+0x13c>
 1c4:	00 c0       	rjmp	.+0      	; 0x1c6 <main+0x146>
 1c6:	00 00       	nop
				_delay_ms(BLINK_DELAY);
				PORTB &= ~(1<<LED_0);
 1c8:	28 98       	cbi	0x05, 0	; 5
    while (1) 
    {
		if (bit_is_clear(PINB, BTN))
		{
			Pressed_Confidence_Level ++;
			Released_Confidence_Level = 0;
 1ca:	60 e0       	ldi	r22, 0x00	; 0
 1cc:	70 e0       	ldi	r23, 0x00	; 0
				PORTB ^= (1<<LED_0);
				_delay_ms(BLINK_DELAY);
				PORTB &= ~(1<<LED_0);
					Pressed = 1;
				}
				Pressed_Confidence_Level = 0;
 1ce:	40 e0       	ldi	r20, 0x00	; 0
 1d0:	50 e0       	ldi	r21, 0x00	; 0
				_delay_ms(BLINK_DELAY);
				PORTB &= ~(1<<LED_1);
				PORTB ^= (1<<LED_0);
				_delay_ms(BLINK_DELAY);
				PORTB &= ~(1<<LED_0);
					Pressed = 1;
 1d2:	fd 01       	movw	r30, r26
 1d4:	15 c0       	rjmp	.+42     	; 0x200 <main+0x180>
				Pressed_Confidence_Level = 0;
			}
		}
		else
		{
			Released_Confidence_Level ++;
 1d6:	6f 5f       	subi	r22, 0xFF	; 255
 1d8:	7f 4f       	sbci	r23, 0xFF	; 255
			Pressed_Confidence_Level = 0;
			if (Released_Confidence_Level >500)
 1da:	65 3f       	cpi	r22, 0xF5	; 245
 1dc:	81 e0       	ldi	r24, 0x01	; 1
 1de:	78 07       	cpc	r23, r24
 1e0:	6c f0       	brlt	.+26     	; 0x1fc <main+0x17c>
			{
				//Pressed = 1;
				Released_Confidence_Level = 0;
 1e2:	60 e0       	ldi	r22, 0x00	; 0
 1e4:	70 e0       	ldi	r23, 0x00	; 0
			}
		}
		else
		{
			Released_Confidence_Level ++;
			Pressed_Confidence_Level = 0;
 1e6:	40 e0       	ldi	r20, 0x00	; 0
 1e8:	50 e0       	ldi	r21, 0x00	; 0
 1ea:	0a c0       	rjmp	.+20     	; 0x200 <main+0x180>
    while (1) 
    {
		if (bit_is_clear(PINB, BTN))
		{
			Pressed_Confidence_Level ++;
			Released_Confidence_Level = 0;
 1ec:	60 e0       	ldi	r22, 0x00	; 0
 1ee:	70 e0       	ldi	r23, 0x00	; 0
 1f0:	07 c0       	rjmp	.+14     	; 0x200 <main+0x180>
 1f2:	60 e0       	ldi	r22, 0x00	; 0
 1f4:	70 e0       	ldi	r23, 0x00	; 0
				PORTB ^= (1<<LED_0);
				_delay_ms(BLINK_DELAY);
				PORTB &= ~(1<<LED_0);
					Pressed = 1;
				}
				Pressed_Confidence_Level = 0;
 1f6:	40 e0       	ldi	r20, 0x00	; 0
 1f8:	50 e0       	ldi	r21, 0x00	; 0
 1fa:	02 c0       	rjmp	.+4      	; 0x200 <main+0x180>
			}
		}
		else
		{
			Released_Confidence_Level ++;
			Pressed_Confidence_Level = 0;
 1fc:	40 e0       	ldi	r20, 0x00	; 0
 1fe:	50 e0       	ldi	r21, 0x00	; 0
 200:	9d 01       	movw	r18, r26
 202:	0e 2e       	mov	r0, r30
 204:	02 c0       	rjmp	.+4      	; 0x20a <main+0x18a>
 206:	22 0f       	add	r18, r18
 208:	33 1f       	adc	r19, r19
 20a:	0a 94       	dec	r0
 20c:	e2 f7       	brpl	.-8      	; 0x206 <main+0x186>
			{
				//Pressed = 1;
				Released_Confidence_Level = 0;
			}
		}
		loop_until_bit_is_clear(PIND, Pressed);
 20e:	89 b1       	in	r24, 0x09	; 9
 210:	90 e0       	ldi	r25, 0x00	; 0
 212:	82 23       	and	r24, r18
 214:	93 23       	and	r25, r19
 216:	89 2b       	or	r24, r25
 218:	d1 f7       	brne	.-12     	; 0x20e <main+0x18e>
 21a:	4d cf       	rjmp	.-358    	; 0xb6 <main+0x36>

0000021c <_exit>:
 21c:	f8 94       	cli

0000021e <__stop_program>:
 21e:	ff cf       	rjmp	.-2      	; 0x21e <__stop_program>
