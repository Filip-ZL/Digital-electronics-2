
segments.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000000e  00800100  0000033e  000003d2  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000033e  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000005  0080010e  0080010e  000003e0  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000003e0  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000410  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000000b0  00000000  00000000  00000450  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0000117e  00000000  00000000  00000500  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000883  00000000  00000000  0000167e  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   0000074b  00000000  00000000  00001f01  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000184  00000000  00000000  0000264c  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000057e  00000000  00000000  000027d0  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000006a7  00000000  00000000  00002d4e  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000080  00000000  00000000  000033f5  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   8:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  10:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  14:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  18:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  1c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  20:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  24:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  28:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  2c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  30:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  34:	0c 94 e4 00 	jmp	0x1c8	; 0x1c8 <__vector_13>
  38:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  3c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  40:	0c 94 94 00 	jmp	0x128	; 0x128 <__vector_16>
  44:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  48:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  4c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  50:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  54:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  58:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  5c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  60:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  64:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
  74:	11 e0       	ldi	r17, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	ee e3       	ldi	r30, 0x3E	; 62
  7c:	f3 e0       	ldi	r31, 0x03	; 3
  7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
  80:	05 90       	lpm	r0, Z+
  82:	0d 92       	st	X+, r0
  84:	ae 30       	cpi	r26, 0x0E	; 14
  86:	b1 07       	cpc	r27, r17
  88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>

0000008a <__do_clear_bss>:
  8a:	21 e0       	ldi	r18, 0x01	; 1
  8c:	ae e0       	ldi	r26, 0x0E	; 14
  8e:	b1 e0       	ldi	r27, 0x01	; 1
  90:	01 c0       	rjmp	.+2      	; 0x94 <.do_clear_bss_start>

00000092 <.do_clear_bss_loop>:
  92:	1d 92       	st	X+, r1

00000094 <.do_clear_bss_start>:
  94:	a3 31       	cpi	r26, 0x13	; 19
  96:	b2 07       	cpc	r27, r18
  98:	e1 f7       	brne	.-8      	; 0x92 <.do_clear_bss_loop>
  9a:	0e 94 78 00 	call	0xf0	; 0xf0 <main>
  9e:	0c 94 9d 01 	jmp	0x33a	; 0x33a <_exit>

000000a2 <__bad_interrupt>:
  a2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a6 <GPIO_config_output>:
  a6:	fc 01       	movw	r30, r24
  a8:	40 81       	ld	r20, Z
  aa:	21 e0       	ldi	r18, 0x01	; 1
  ac:	30 e0       	ldi	r19, 0x00	; 0
  ae:	02 c0       	rjmp	.+4      	; 0xb4 <GPIO_config_output+0xe>
  b0:	22 0f       	add	r18, r18
  b2:	33 1f       	adc	r19, r19
  b4:	6a 95       	dec	r22
  b6:	e2 f7       	brpl	.-8      	; 0xb0 <GPIO_config_output+0xa>
  b8:	24 2b       	or	r18, r20
  ba:	20 83       	st	Z, r18
  bc:	08 95       	ret

000000be <GPIO_write_low>:
  be:	fc 01       	movw	r30, r24
  c0:	90 81       	ld	r25, Z
  c2:	21 e0       	ldi	r18, 0x01	; 1
  c4:	30 e0       	ldi	r19, 0x00	; 0
  c6:	02 c0       	rjmp	.+4      	; 0xcc <GPIO_write_low+0xe>
  c8:	22 0f       	add	r18, r18
  ca:	33 1f       	adc	r19, r19
  cc:	6a 95       	dec	r22
  ce:	e2 f7       	brpl	.-8      	; 0xc8 <GPIO_write_low+0xa>
  d0:	20 95       	com	r18
  d2:	29 23       	and	r18, r25
  d4:	20 83       	st	Z, r18
  d6:	08 95       	ret

000000d8 <GPIO_write_high>:
  d8:	fc 01       	movw	r30, r24
  da:	40 81       	ld	r20, Z
  dc:	21 e0       	ldi	r18, 0x01	; 1
  de:	30 e0       	ldi	r19, 0x00	; 0
  e0:	02 c0       	rjmp	.+4      	; 0xe6 <GPIO_write_high+0xe>
  e2:	22 0f       	add	r18, r18
  e4:	33 1f       	adc	r19, r19
  e6:	6a 95       	dec	r22
  e8:	e2 f7       	brpl	.-8      	; 0xe2 <GPIO_write_high+0xa>
  ea:	24 2b       	or	r18, r20
  ec:	20 83       	st	Z, r18
  ee:	08 95       	ret

000000f0 <main>:
 * Timer/Counter1 overflows.
 */
int main(void)
{
    // Configure SSD signals
    SEG_init();
  f0:	0e 94 18 01 	call	0x230	; 0x230 <SEG_init>
	
    // Test of SSD: display number '3' at position 0
	
	TIM0_overflow_1ms();
  f4:	85 b5       	in	r24, 0x25	; 37
  f6:	8b 7f       	andi	r24, 0xFB	; 251
  f8:	85 bd       	out	0x25, r24	; 37
  fa:	85 b5       	in	r24, 0x25	; 37
  fc:	83 60       	ori	r24, 0x03	; 3
  fe:	85 bd       	out	0x25, r24	; 37
	TIM0_overflow_interrupt_enable();
 100:	ee e6       	ldi	r30, 0x6E	; 110
 102:	f0 e0       	ldi	r31, 0x00	; 0
 104:	80 81       	ld	r24, Z
 106:	81 60       	ori	r24, 0x01	; 1
 108:	80 83       	st	Z, r24
	
	TIM1_overflow_1s();
 10a:	e1 e8       	ldi	r30, 0x81	; 129
 10c:	f0 e0       	ldi	r31, 0x00	; 0
 10e:	80 81       	ld	r24, Z
 110:	8c 7f       	andi	r24, 0xFC	; 252
 112:	80 83       	st	Z, r24
 114:	80 81       	ld	r24, Z
 116:	84 60       	ori	r24, 0x04	; 4
 118:	80 83       	st	Z, r24
	TIM1_overflow_interrupt_enable();
 11a:	ef e6       	ldi	r30, 0x6F	; 111
 11c:	f0 e0       	ldi	r31, 0x00	; 0
 11e:	80 81       	ld	r24, Z
 120:	81 60       	ori	r24, 0x01	; 1
 122:	80 83       	st	Z, r24
	
    /* Configure 16-bit Timer/Counter1
     * Set prescaler and enable overflow interrupt */

    // Enables interrupts by setting the global interrupt mask
	sei();
 124:	78 94       	sei
 126:	ff cf       	rjmp	.-2      	; 0x126 <main+0x36>

00000128 <__vector_16>:
/**
 * ISR starts when Timer/Counter1 overflows. Increment decimal counter
 * value and display it on SSD.
 */
ISR(TIMER0_OVF_vect)
{
 128:	1f 92       	push	r1
 12a:	0f 92       	push	r0
 12c:	0f b6       	in	r0, 0x3f	; 63
 12e:	0f 92       	push	r0
 130:	11 24       	eor	r1, r1
 132:	2f 93       	push	r18
 134:	3f 93       	push	r19
 136:	4f 93       	push	r20
 138:	5f 93       	push	r21
 13a:	6f 93       	push	r22
 13c:	7f 93       	push	r23
 13e:	8f 93       	push	r24
 140:	9f 93       	push	r25
 142:	af 93       	push	r26
 144:	bf 93       	push	r27
 146:	ef 93       	push	r30
 148:	ff 93       	push	r31
	static uint8_t position = 0;
	if (position == 0)
 14a:	80 91 0e 01 	lds	r24, 0x010E	; 0x80010e <__data_end>
 14e:	81 11       	cpse	r24, r1
 150:	0a c0       	rjmp	.+20     	; 0x166 <__vector_16+0x3e>
	{
		//SEG_update_shift_regs(singles, 0);
		SEG_update_shift_regs(singles,0,0);
 152:	40 e0       	ldi	r20, 0x00	; 0
 154:	60 e0       	ldi	r22, 0x00	; 0
 156:	80 91 12 01 	lds	r24, 0x0112	; 0x800112 <singles>
 15a:	0e 94 28 01 	call	0x250	; 0x250 <SEG_update_shift_regs>
		position = 1;	
 15e:	81 e0       	ldi	r24, 0x01	; 1
 160:	80 93 0e 01 	sts	0x010E, r24	; 0x80010e <__data_end>
 164:	20 c0       	rjmp	.+64     	; 0x1a6 <__vector_16+0x7e>
	}
	else if(position == 1)
 166:	81 30       	cpi	r24, 0x01	; 1
 168:	51 f4       	brne	.+20     	; 0x17e <__vector_16+0x56>
	{
		SEG_update_shift_regs(decimals,1,0);
 16a:	40 e0       	ldi	r20, 0x00	; 0
 16c:	61 e0       	ldi	r22, 0x01	; 1
 16e:	80 91 0f 01 	lds	r24, 0x010F	; 0x80010f <decimals>
 172:	0e 94 28 01 	call	0x250	; 0x250 <SEG_update_shift_regs>
		position = 2;
 176:	82 e0       	ldi	r24, 0x02	; 2
 178:	80 93 0e 01 	sts	0x010E, r24	; 0x80010e <__data_end>
 17c:	14 c0       	rjmp	.+40     	; 0x1a6 <__vector_16+0x7e>
	}
	else if(position == 2)
 17e:	82 30       	cpi	r24, 0x02	; 2
 180:	51 f4       	brne	.+20     	; 0x196 <__vector_16+0x6e>
	{
		SEG_update_shift_regs(minutes,2,1);
 182:	41 e0       	ldi	r20, 0x01	; 1
 184:	62 e0       	ldi	r22, 0x02	; 2
 186:	80 91 11 01 	lds	r24, 0x0111	; 0x800111 <minutes>
 18a:	0e 94 28 01 	call	0x250	; 0x250 <SEG_update_shift_regs>
		position = 3;
 18e:	83 e0       	ldi	r24, 0x03	; 3
 190:	80 93 0e 01 	sts	0x010E, r24	; 0x80010e <__data_end>
 194:	08 c0       	rjmp	.+16     	; 0x1a6 <__vector_16+0x7e>
	}
	else
	{
		SEG_update_shift_regs(tens_min,3,0);
 196:	40 e0       	ldi	r20, 0x00	; 0
 198:	63 e0       	ldi	r22, 0x03	; 3
 19a:	80 91 10 01 	lds	r24, 0x0110	; 0x800110 <tens_min>
 19e:	0e 94 28 01 	call	0x250	; 0x250 <SEG_update_shift_regs>
		position = 0;
 1a2:	10 92 0e 01 	sts	0x010E, r1	; 0x80010e <__data_end>
	}
}
 1a6:	ff 91       	pop	r31
 1a8:	ef 91       	pop	r30
 1aa:	bf 91       	pop	r27
 1ac:	af 91       	pop	r26
 1ae:	9f 91       	pop	r25
 1b0:	8f 91       	pop	r24
 1b2:	7f 91       	pop	r23
 1b4:	6f 91       	pop	r22
 1b6:	5f 91       	pop	r21
 1b8:	4f 91       	pop	r20
 1ba:	3f 91       	pop	r19
 1bc:	2f 91       	pop	r18
 1be:	0f 90       	pop	r0
 1c0:	0f be       	out	0x3f, r0	; 63
 1c2:	0f 90       	pop	r0
 1c4:	1f 90       	pop	r1
 1c6:	18 95       	reti

000001c8 <__vector_13>:

ISR(TIMER1_OVF_vect)
{
 1c8:	1f 92       	push	r1
 1ca:	0f 92       	push	r0
 1cc:	0f b6       	in	r0, 0x3f	; 63
 1ce:	0f 92       	push	r0
 1d0:	11 24       	eor	r1, r1
 1d2:	8f 93       	push	r24
	singles++;
 1d4:	80 91 12 01 	lds	r24, 0x0112	; 0x800112 <singles>
 1d8:	8f 5f       	subi	r24, 0xFF	; 255
	if(singles > 9)
 1da:	8a 30       	cpi	r24, 0x0A	; 10
 1dc:	18 f4       	brcc	.+6      	; 0x1e4 <__vector_13+0x1c>
	}
}

ISR(TIMER1_OVF_vect)
{
	singles++;
 1de:	80 93 12 01 	sts	0x0112, r24	; 0x800112 <singles>
 1e2:	20 c0       	rjmp	.+64     	; 0x224 <__vector_13+0x5c>
	if(singles > 9)
	{
		singles = 0;
 1e4:	10 92 12 01 	sts	0x0112, r1	; 0x800112 <singles>
		decimals++;
 1e8:	80 91 0f 01 	lds	r24, 0x010F	; 0x80010f <decimals>
 1ec:	8f 5f       	subi	r24, 0xFF	; 255
		if (decimals > 5)
 1ee:	86 30       	cpi	r24, 0x06	; 6
 1f0:	18 f4       	brcc	.+6      	; 0x1f8 <__vector_13+0x30>
{
	singles++;
	if(singles > 9)
	{
		singles = 0;
		decimals++;
 1f2:	80 93 0f 01 	sts	0x010F, r24	; 0x80010f <decimals>
 1f6:	16 c0       	rjmp	.+44     	; 0x224 <__vector_13+0x5c>
		if (decimals > 5)
		{
			decimals = 0;
 1f8:	10 92 0f 01 	sts	0x010F, r1	; 0x80010f <decimals>
			minutes++;
 1fc:	80 91 11 01 	lds	r24, 0x0111	; 0x800111 <minutes>
 200:	8f 5f       	subi	r24, 0xFF	; 255
			if(minutes > 9)
 202:	8a 30       	cpi	r24, 0x0A	; 10
 204:	18 f4       	brcc	.+6      	; 0x20c <__vector_13+0x44>
		singles = 0;
		decimals++;
		if (decimals > 5)
		{
			decimals = 0;
			minutes++;
 206:	80 93 11 01 	sts	0x0111, r24	; 0x800111 <minutes>
 20a:	0c c0       	rjmp	.+24     	; 0x224 <__vector_13+0x5c>
			if(minutes > 9)
			{
				minutes = 0;
 20c:	10 92 11 01 	sts	0x0111, r1	; 0x800111 <minutes>
				tens_min++;
 210:	80 91 10 01 	lds	r24, 0x0110	; 0x800110 <tens_min>
 214:	8f 5f       	subi	r24, 0xFF	; 255
				if(tens_min > 5)
 216:	86 30       	cpi	r24, 0x06	; 6
 218:	18 f4       	brcc	.+6      	; 0x220 <__vector_13+0x58>
			decimals = 0;
			minutes++;
			if(minutes > 9)
			{
				minutes = 0;
				tens_min++;
 21a:	80 93 10 01 	sts	0x0110, r24	; 0x800110 <tens_min>
 21e:	02 c0       	rjmp	.+4      	; 0x224 <__vector_13+0x5c>
				if(tens_min > 5)
				{
					tens_min = 0;
 220:	10 92 10 01 	sts	0x0110, r1	; 0x800110 <tens_min>
				}
			}
		}
	}
 224:	8f 91       	pop	r24
 226:	0f 90       	pop	r0
 228:	0f be       	out	0x3f, r0	; 63
 22a:	0f 90       	pop	r0
 22c:	1f 90       	pop	r1
 22e:	18 95       	reti

00000230 <SEG_init>:
	};
/* Function definitions ----------------------------------------------*/
void SEG_init(void)
{
    /* Configuration of SSD signals */
    GPIO_config_output(&DDRD, SEGMENT_LATCH);
 230:	64 e0       	ldi	r22, 0x04	; 4
 232:	8a e2       	ldi	r24, 0x2A	; 42
 234:	90 e0       	ldi	r25, 0x00	; 0
 236:	0e 94 53 00 	call	0xa6	; 0xa6 <GPIO_config_output>
    GPIO_config_output(&DDRD, SEGMENT_CLK);
 23a:	67 e0       	ldi	r22, 0x07	; 7
 23c:	8a e2       	ldi	r24, 0x2A	; 42
 23e:	90 e0       	ldi	r25, 0x00	; 0
 240:	0e 94 53 00 	call	0xa6	; 0xa6 <GPIO_config_output>
    GPIO_config_output(&DDRB, SEGMENT_DATA);
 244:	60 e0       	ldi	r22, 0x00	; 0
 246:	84 e2       	ldi	r24, 0x24	; 36
 248:	90 e0       	ldi	r25, 0x00	; 0
 24a:	0e 94 53 00 	call	0xa6	; 0xa6 <GPIO_config_output>
 24e:	08 95       	ret

00000250 <SEG_update_shift_regs>:
}

/*--------------------------------------------------------------------*/
void SEG_update_shift_regs(uint8_t segments, uint8_t position, uint8_t DP)
{
 250:	1f 93       	push	r17
 252:	cf 93       	push	r28
 254:	df 93       	push	r29
    uint8_t bit_number;
	segments = segment_value[segments];     // 0, 1, ..., 9
 256:	e8 2f       	mov	r30, r24
 258:	f0 e0       	ldi	r31, 0x00	; 0
 25a:	ec 5f       	subi	r30, 0xFC	; 252
 25c:	fe 4f       	sbci	r31, 0xFE	; 254
 25e:	c0 81       	ld	r28, Z
	position = segment_position[position];  // 0, 1, 2, 3
 260:	e6 2f       	mov	r30, r22
 262:	f0 e0       	ldi	r31, 0x00	; 0
 264:	e0 50       	subi	r30, 0x00	; 0
 266:	ff 4f       	sbci	r31, 0xFF	; 255
 268:	10 81       	ld	r17, Z
    // Pull LATCH, CLK, and DATA low
	if(DP)
 26a:	41 11       	cpse	r20, r1
	{
		segments &= ~(1 << 0);
 26c:	ce 7f       	andi	r28, 0xFE	; 254
	}
	GPIO_write_low(&PORTD, SEGMENT_LATCH);
 26e:	64 e0       	ldi	r22, 0x04	; 4
 270:	8b e2       	ldi	r24, 0x2B	; 43
 272:	90 e0       	ldi	r25, 0x00	; 0
 274:	0e 94 5f 00 	call	0xbe	; 0xbe <GPIO_write_low>
	GPIO_write_low(&PORTD, SEGMENT_CLK);
 278:	67 e0       	ldi	r22, 0x07	; 7
 27a:	8b e2       	ldi	r24, 0x2B	; 43
 27c:	90 e0       	ldi	r25, 0x00	; 0
 27e:	0e 94 5f 00 	call	0xbe	; 0xbe <GPIO_write_low>
	GPIO_write_low(&PORTD, SEGMENT_DATA);
 282:	60 e0       	ldi	r22, 0x00	; 0
 284:	8b e2       	ldi	r24, 0x2B	; 43
 286:	90 e0       	ldi	r25, 0x00	; 0
 288:	0e 94 5f 00 	call	0xbe	; 0xbe <GPIO_write_low>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 28c:	85 e0       	ldi	r24, 0x05	; 5
 28e:	8a 95       	dec	r24
 290:	f1 f7       	brne	.-4      	; 0x28e <SEG_update_shift_regs+0x3e>
 292:	00 00       	nop
 294:	d8 e0       	ldi	r29, 0x08	; 8
    // a b c d e f g DP (active low values)
    for (bit_number = 0; bit_number < 8; bit_number++)
    {
        // Output DATA value (bit 0 of "segments")
		// segments % 2 == 0
		if ((segments & 1) == 0)
 296:	c0 fd       	sbrc	r28, 0
 298:	06 c0       	rjmp	.+12     	; 0x2a6 <SEG_update_shift_regs+0x56>
		{
			GPIO_write_low(&PORTB, SEGMENT_DATA);
 29a:	60 e0       	ldi	r22, 0x00	; 0
 29c:	85 e2       	ldi	r24, 0x25	; 37
 29e:	90 e0       	ldi	r25, 0x00	; 0
 2a0:	0e 94 5f 00 	call	0xbe	; 0xbe <GPIO_write_low>
 2a4:	05 c0       	rjmp	.+10     	; 0x2b0 <SEG_update_shift_regs+0x60>
		}
		else
		{
			GPIO_write_high(&PORTB, SEGMENT_DATA);
 2a6:	60 e0       	ldi	r22, 0x00	; 0
 2a8:	85 e2       	ldi	r24, 0x25	; 37
 2aa:	90 e0       	ldi	r25, 0x00	; 0
 2ac:	0e 94 6c 00 	call	0xd8	; 0xd8 <GPIO_write_high>
 2b0:	85 e0       	ldi	r24, 0x05	; 5
 2b2:	8a 95       	dec	r24
 2b4:	f1 f7       	brne	.-4      	; 0x2b2 <SEG_update_shift_regs+0x62>
 2b6:	00 00       	nop
		}
        // Wait 1 us
		_delay_us(1);
        // Pull CLK high
		GPIO_write_high(&PORTD, SEGMENT_CLK);
 2b8:	67 e0       	ldi	r22, 0x07	; 7
 2ba:	8b e2       	ldi	r24, 0x2B	; 43
 2bc:	90 e0       	ldi	r25, 0x00	; 0
 2be:	0e 94 6c 00 	call	0xd8	; 0xd8 <GPIO_write_high>
 2c2:	85 e0       	ldi	r24, 0x05	; 5
 2c4:	8a 95       	dec	r24
 2c6:	f1 f7       	brne	.-4      	; 0x2c4 <SEG_update_shift_regs+0x74>
 2c8:	00 00       	nop
	
        // Wait 1 us
		_delay_us(1);
        // Pull CLK low
		GPIO_write_low(&PORTD, SEGMENT_CLK);
 2ca:	67 e0       	ldi	r22, 0x07	; 7
 2cc:	8b e2       	ldi	r24, 0x2B	; 43
 2ce:	90 e0       	ldi	r25, 0x00	; 0
 2d0:	0e 94 5f 00 	call	0xbe	; 0xbe <GPIO_write_low>
        // Shift "segments"
        segments = segments >> 1;
 2d4:	c6 95       	lsr	r28
 2d6:	d1 50       	subi	r29, 0x01	; 1
	
    // Wait 1 us
	_delay_us(1);
    // Loop through the 1st byte (segments)
    // a b c d e f g DP (active low values)
    for (bit_number = 0; bit_number < 8; bit_number++)
 2d8:	f1 f6       	brne	.-68     	; 0x296 <SEG_update_shift_regs+0x46>
 2da:	c8 e0       	ldi	r28, 0x08	; 8
    // Loop through the 2nd byte (position)
    // p3 p2 p1 p0 . . . . (active high values)
    for (bit_number = 0; bit_number < 8; bit_number++)
    {
        // Output DATA value (bit 0 of "position")
		if ((position & 1) == 0)
 2dc:	10 fd       	sbrc	r17, 0
 2de:	06 c0       	rjmp	.+12     	; 0x2ec <SEG_update_shift_regs+0x9c>
		{
			GPIO_write_low(&PORTB, SEGMENT_DATA);
 2e0:	60 e0       	ldi	r22, 0x00	; 0
 2e2:	85 e2       	ldi	r24, 0x25	; 37
 2e4:	90 e0       	ldi	r25, 0x00	; 0
 2e6:	0e 94 5f 00 	call	0xbe	; 0xbe <GPIO_write_low>
 2ea:	05 c0       	rjmp	.+10     	; 0x2f6 <SEG_update_shift_regs+0xa6>
		}
		else
		{
			GPIO_write_high(&PORTB, SEGMENT_DATA);
 2ec:	60 e0       	ldi	r22, 0x00	; 0
 2ee:	85 e2       	ldi	r24, 0x25	; 37
 2f0:	90 e0       	ldi	r25, 0x00	; 0
 2f2:	0e 94 6c 00 	call	0xd8	; 0xd8 <GPIO_write_high>
 2f6:	85 e0       	ldi	r24, 0x05	; 5
 2f8:	8a 95       	dec	r24
 2fa:	f1 f7       	brne	.-4      	; 0x2f8 <SEG_update_shift_regs+0xa8>
 2fc:	00 00       	nop
		}
        // Wait 1 us
		_delay_us(1);
        // Pull CLK high
		GPIO_write_high(&PORTD, SEGMENT_CLK);
 2fe:	67 e0       	ldi	r22, 0x07	; 7
 300:	8b e2       	ldi	r24, 0x2B	; 43
 302:	90 e0       	ldi	r25, 0x00	; 0
 304:	0e 94 6c 00 	call	0xd8	; 0xd8 <GPIO_write_high>
 308:	85 e0       	ldi	r24, 0x05	; 5
 30a:	8a 95       	dec	r24
 30c:	f1 f7       	brne	.-4      	; 0x30a <SEG_update_shift_regs+0xba>
 30e:	00 00       	nop
        // Wait 1 us
		_delay_us(1);
        // Pull CLK low
		GPIO_write_low(&PORTD, SEGMENT_CLK);
 310:	67 e0       	ldi	r22, 0x07	; 7
 312:	8b e2       	ldi	r24, 0x2B	; 43
 314:	90 e0       	ldi	r25, 0x00	; 0
 316:	0e 94 5f 00 	call	0xbe	; 0xbe <GPIO_write_low>
		
        // Shift "position"
        position = position >> 1;
 31a:	16 95       	lsr	r17
 31c:	c1 50       	subi	r28, 0x01	; 1
        segments = segments >> 1;
    }

    // Loop through the 2nd byte (position)
    // p3 p2 p1 p0 . . . . (active high values)
    for (bit_number = 0; bit_number < 8; bit_number++)
 31e:	f1 f6       	brne	.-68     	; 0x2dc <SEG_update_shift_regs+0x8c>
        // Shift "position"
        position = position >> 1;
    }

    // Pull LATCH high
	GPIO_write_high(&PORTD, SEGMENT_LATCH);
 320:	64 e0       	ldi	r22, 0x04	; 4
 322:	8b e2       	ldi	r24, 0x2B	; 43
 324:	90 e0       	ldi	r25, 0x00	; 0
 326:	0e 94 6c 00 	call	0xd8	; 0xd8 <GPIO_write_high>
 32a:	85 e0       	ldi	r24, 0x05	; 5
 32c:	8a 95       	dec	r24
 32e:	f1 f7       	brne	.-4      	; 0x32c <SEG_update_shift_regs+0xdc>
 330:	00 00       	nop
    // Wait 1 us
	_delay_us(1);
}
 332:	df 91       	pop	r29
 334:	cf 91       	pop	r28
 336:	1f 91       	pop	r17
 338:	08 95       	ret

0000033a <_exit>:
 33a:	f8 94       	cli

0000033c <__stop_program>:
 33c:	ff cf       	rjmp	.-2      	; 0x33c <__stop_program>
