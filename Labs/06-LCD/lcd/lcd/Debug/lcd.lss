
lcd.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000034  00800100  00000712  000007a6  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000712  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000007  00800134  00800134  000007da  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000007da  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  0000080c  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000000a8  00000000  00000000  0000084c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00001382  00000000  00000000  000008f4  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000009c9  00000000  00000000  00001c76  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   0000089d  00000000  00000000  0000263f  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000198  00000000  00000000  00002edc  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000505  00000000  00000000  00003074  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000934  00000000  00000000  00003579  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000000a0  00000000  00000000  00003ead  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   8:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  10:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  14:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  18:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  1c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  20:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  24:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  28:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  2c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  30:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  34:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  38:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  3c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  40:	0c 94 26 01 	jmp	0x24c	; 0x24c <__vector_16>
  44:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  48:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  4c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  50:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  54:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  58:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  5c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  60:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  64:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
  74:	11 e0       	ldi	r17, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	e2 e1       	ldi	r30, 0x12	; 18
  7c:	f7 e0       	ldi	r31, 0x07	; 7
  7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
  80:	05 90       	lpm	r0, Z+
  82:	0d 92       	st	X+, r0
  84:	a4 33       	cpi	r26, 0x34	; 52
  86:	b1 07       	cpc	r27, r17
  88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>

0000008a <__do_clear_bss>:
  8a:	21 e0       	ldi	r18, 0x01	; 1
  8c:	a4 e3       	ldi	r26, 0x34	; 52
  8e:	b1 e0       	ldi	r27, 0x01	; 1
  90:	01 c0       	rjmp	.+2      	; 0x94 <.do_clear_bss_start>

00000092 <.do_clear_bss_loop>:
  92:	1d 92       	st	X+, r1

00000094 <.do_clear_bss_start>:
  94:	ab 33       	cpi	r26, 0x3B	; 59
  96:	b2 07       	cpc	r27, r18
  98:	e1 f7       	brne	.-8      	; 0x92 <.do_clear_bss_loop>
  9a:	0e 94 fa 00 	call	0x1f4	; 0x1f4 <main>
  9e:	0c 94 87 03 	jmp	0x70e	; 0x70e <_exit>

000000a2 <__bad_interrupt>:
  a2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a6 <toggle_e>:

    while ( (c = pgm_read_byte(progmem_s++)) )
    {
        lcd_putc(c);
    }
}/* lcd_puts_p */
  a6:	29 9a       	sbi	0x05, 1	; 5
  a8:	85 e0       	ldi	r24, 0x05	; 5
  aa:	8a 95       	dec	r24
  ac:	f1 f7       	brne	.-4      	; 0xaa <toggle_e+0x4>
  ae:	00 00       	nop
  b0:	29 98       	cbi	0x05, 1	; 5
  b2:	08 95       	ret

000000b4 <lcd_write>:
  b4:	cf 93       	push	r28
  b6:	c8 2f       	mov	r28, r24
  b8:	66 23       	and	r22, r22
  ba:	11 f0       	breq	.+4      	; 0xc0 <lcd_write+0xc>
  bc:	28 9a       	sbi	0x05, 0	; 5
  be:	01 c0       	rjmp	.+2      	; 0xc2 <lcd_write+0xe>
  c0:	28 98       	cbi	0x05, 0	; 5
  c2:	54 9a       	sbi	0x0a, 4	; 10
  c4:	55 9a       	sbi	0x0a, 5	; 10
  c6:	56 9a       	sbi	0x0a, 6	; 10
  c8:	57 9a       	sbi	0x0a, 7	; 10
  ca:	5f 98       	cbi	0x0b, 7	; 11
  cc:	5e 98       	cbi	0x0b, 6	; 11
  ce:	5d 98       	cbi	0x0b, 5	; 11
  d0:	5c 98       	cbi	0x0b, 4	; 11
  d2:	cc 23       	and	r28, r28
  d4:	0c f4       	brge	.+2      	; 0xd8 <lcd_write+0x24>
  d6:	5f 9a       	sbi	0x0b, 7	; 11
  d8:	c6 fd       	sbrc	r28, 6
  da:	5e 9a       	sbi	0x0b, 6	; 11
  dc:	c5 fd       	sbrc	r28, 5
  de:	5d 9a       	sbi	0x0b, 5	; 11
  e0:	c4 fd       	sbrc	r28, 4
  e2:	5c 9a       	sbi	0x0b, 4	; 11
  e4:	0e 94 53 00 	call	0xa6	; 0xa6 <toggle_e>
  e8:	5f 98       	cbi	0x0b, 7	; 11
  ea:	5e 98       	cbi	0x0b, 6	; 11
  ec:	5d 98       	cbi	0x0b, 5	; 11
  ee:	5c 98       	cbi	0x0b, 4	; 11
  f0:	c3 fd       	sbrc	r28, 3
  f2:	5f 9a       	sbi	0x0b, 7	; 11
  f4:	c2 fd       	sbrc	r28, 2
  f6:	5e 9a       	sbi	0x0b, 6	; 11
  f8:	c1 fd       	sbrc	r28, 1
  fa:	5d 9a       	sbi	0x0b, 5	; 11
  fc:	c0 fd       	sbrc	r28, 0
  fe:	5c 9a       	sbi	0x0b, 4	; 11
 100:	0e 94 53 00 	call	0xa6	; 0xa6 <toggle_e>
 104:	5c 9a       	sbi	0x0b, 4	; 11
 106:	5d 9a       	sbi	0x0b, 5	; 11
 108:	5e 9a       	sbi	0x0b, 6	; 11
 10a:	5f 9a       	sbi	0x0b, 7	; 11
 10c:	87 eb       	ldi	r24, 0xB7	; 183
 10e:	9b e0       	ldi	r25, 0x0B	; 11
 110:	01 97       	sbiw	r24, 0x01	; 1
 112:	f1 f7       	brne	.-4      	; 0x110 <lcd_write+0x5c>
 114:	00 c0       	rjmp	.+0      	; 0x116 <lcd_write+0x62>
 116:	00 00       	nop
 118:	cf 91       	pop	r28
 11a:	08 95       	ret

0000011c <lcd_command>:
 11c:	60 e0       	ldi	r22, 0x00	; 0
 11e:	0e 94 5a 00 	call	0xb4	; 0xb4 <lcd_write>
 122:	08 95       	ret

00000124 <lcd_data>:
 124:	61 e0       	ldi	r22, 0x01	; 1
 126:	0e 94 5a 00 	call	0xb4	; 0xb4 <lcd_write>
 12a:	08 95       	ret

0000012c <lcd_gotoxy>:
 12c:	61 11       	cpse	r22, r1
 12e:	04 c0       	rjmp	.+8      	; 0x138 <lcd_gotoxy+0xc>
 130:	80 58       	subi	r24, 0x80	; 128
 132:	0e 94 8e 00 	call	0x11c	; 0x11c <lcd_command>
 136:	08 95       	ret
 138:	80 54       	subi	r24, 0x40	; 64
 13a:	0e 94 8e 00 	call	0x11c	; 0x11c <lcd_command>
 13e:	08 95       	ret

00000140 <lcd_clrscr>:
 140:	81 e0       	ldi	r24, 0x01	; 1
 142:	0e 94 8e 00 	call	0x11c	; 0x11c <lcd_command>
 146:	08 95       	ret

00000148 <lcd_putc>:
 148:	61 e0       	ldi	r22, 0x01	; 1
 14a:	0e 94 5a 00 	call	0xb4	; 0xb4 <lcd_write>
 14e:	08 95       	ret

00000150 <lcd_puts>:
 150:	cf 93       	push	r28
 152:	df 93       	push	r29
 154:	ec 01       	movw	r28, r24
 156:	21 96       	adiw	r28, 0x01	; 1
 158:	fc 01       	movw	r30, r24
 15a:	80 81       	ld	r24, Z
 15c:	88 23       	and	r24, r24
 15e:	29 f0       	breq	.+10     	; 0x16a <lcd_puts+0x1a>
 160:	0e 94 a4 00 	call	0x148	; 0x148 <lcd_putc>
 164:	89 91       	ld	r24, Y+
 166:	81 11       	cpse	r24, r1
 168:	fb cf       	rjmp	.-10     	; 0x160 <lcd_puts+0x10>
 16a:	df 91       	pop	r29
 16c:	cf 91       	pop	r28
 16e:	08 95       	ret

00000170 <lcd_init>:
*                  LCD_DISP_ON_CURSOR      display on, cursor on
*                  LCD_DISP_CURSOR_BLINK   display on, cursor on flashing
*  Returns:  none
*************************************************************************/
void lcd_init(uint8_t dispAttr)
{
 170:	cf 93       	push	r28
 172:	c8 2f       	mov	r28, r24
        DDR(LCD_E_PORT)     |= _BV(LCD_E_PIN);
    }
    else
    {
        /* configure all port bits as output (LCD data and control lines on different ports */
        DDR(LCD_RS_PORT)    |= _BV(LCD_RS_PIN);
 174:	20 9a       	sbi	0x04, 0	; 4
        DDR(LCD_RW_PORT)    |= _BV(LCD_RW_PIN);
 176:	55 9a       	sbi	0x0a, 5	; 10
        DDR(LCD_E_PORT)     |= _BV(LCD_E_PIN);
 178:	21 9a       	sbi	0x04, 1	; 4
        DDR(LCD_DATA0_PORT) |= _BV(LCD_DATA0_PIN);
 17a:	54 9a       	sbi	0x0a, 4	; 10
        DDR(LCD_DATA1_PORT) |= _BV(LCD_DATA1_PIN);
 17c:	55 9a       	sbi	0x0a, 5	; 10
        DDR(LCD_DATA2_PORT) |= _BV(LCD_DATA2_PIN);
 17e:	56 9a       	sbi	0x0a, 6	; 10
        DDR(LCD_DATA3_PORT) |= _BV(LCD_DATA3_PIN);
 180:	57 9a       	sbi	0x0a, 7	; 10
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 182:	8f ef       	ldi	r24, 0xFF	; 255
 184:	99 ef       	ldi	r25, 0xF9	; 249
 186:	01 97       	sbiw	r24, 0x01	; 1
 188:	f1 f7       	brne	.-4      	; 0x186 <lcd_init+0x16>
 18a:	00 c0       	rjmp	.+0      	; 0x18c <lcd_init+0x1c>
 18c:	00 00       	nop
    }
    delay(LCD_DELAY_BOOTUP); /* wait 16ms or more after power-on       */

    /* initial write to lcd is 8bit */
    LCD_DATA1_PORT |= _BV(LCD_DATA1_PIN); // LCD_FUNCTION>>4;
 18e:	5d 9a       	sbi	0x0b, 5	; 11
    LCD_DATA0_PORT |= _BV(LCD_DATA0_PIN); // LCD_FUNCTION_8BIT>>4;
 190:	5c 9a       	sbi	0x0b, 4	; 11
    lcd_e_toggle();
 192:	0e 94 53 00 	call	0xa6	; 0xa6 <toggle_e>
 196:	8f e1       	ldi	r24, 0x1F	; 31
 198:	9e e4       	ldi	r25, 0x4E	; 78
 19a:	01 97       	sbiw	r24, 0x01	; 1
 19c:	f1 f7       	brne	.-4      	; 0x19a <lcd_init+0x2a>
 19e:	00 c0       	rjmp	.+0      	; 0x1a0 <lcd_init+0x30>
 1a0:	00 00       	nop
    delay(LCD_DELAY_INIT); /* delay, busy flag can't be checked here */

    /* repeat last command */
    lcd_e_toggle();
 1a2:	0e 94 53 00 	call	0xa6	; 0xa6 <toggle_e>
 1a6:	8f ef       	ldi	r24, 0xFF	; 255
 1a8:	90 e0       	ldi	r25, 0x00	; 0
 1aa:	01 97       	sbiw	r24, 0x01	; 1
 1ac:	f1 f7       	brne	.-4      	; 0x1aa <lcd_init+0x3a>
 1ae:	00 c0       	rjmp	.+0      	; 0x1b0 <lcd_init+0x40>
 1b0:	00 00       	nop
    delay(LCD_DELAY_INIT_REP); /* delay, busy flag can't be checked here */

    /* repeat last command a third time */
    lcd_e_toggle();
 1b2:	0e 94 53 00 	call	0xa6	; 0xa6 <toggle_e>
 1b6:	8f ef       	ldi	r24, 0xFF	; 255
 1b8:	90 e0       	ldi	r25, 0x00	; 0
 1ba:	01 97       	sbiw	r24, 0x01	; 1
 1bc:	f1 f7       	brne	.-4      	; 0x1ba <lcd_init+0x4a>
 1be:	00 c0       	rjmp	.+0      	; 0x1c0 <lcd_init+0x50>
 1c0:	00 00       	nop
    delay(LCD_DELAY_INIT_REP); /* delay, busy flag can't be checked here */

    /* now configure for 4bit mode */
    LCD_DATA0_PORT &= ~_BV(LCD_DATA0_PIN); // LCD_FUNCTION_4BIT_1LINE>>4
 1c2:	5c 98       	cbi	0x0b, 4	; 11
    lcd_e_toggle();
 1c4:	0e 94 53 00 	call	0xa6	; 0xa6 <toggle_e>
 1c8:	8f ef       	ldi	r24, 0xFF	; 255
 1ca:	90 e0       	ldi	r25, 0x00	; 0
 1cc:	01 97       	sbiw	r24, 0x01	; 1
 1ce:	f1 f7       	brne	.-4      	; 0x1cc <lcd_init+0x5c>
 1d0:	00 c0       	rjmp	.+0      	; 0x1d2 <lcd_init+0x62>
 1d2:	00 00       	nop
    /* Display with KS0073 controller requires special commands for enabling 4 line mode */
    lcd_command(KS0073_EXTENDED_FUNCTION_REGISTER_ON);
    lcd_command(KS0073_4LINES_MODE);
    lcd_command(KS0073_EXTENDED_FUNCTION_REGISTER_OFF);
    #else
    lcd_command(LCD_FUNCTION_DEFAULT); /* function set: display lines  */
 1d4:	88 e2       	ldi	r24, 0x28	; 40
 1d6:	0e 94 8e 00 	call	0x11c	; 0x11c <lcd_command>
    #endif
    lcd_command(LCD_DISP_OFF);     /* display off                  */
 1da:	88 e0       	ldi	r24, 0x08	; 8
 1dc:	0e 94 8e 00 	call	0x11c	; 0x11c <lcd_command>
    lcd_clrscr();                  /* display clear                */
 1e0:	0e 94 a0 00 	call	0x140	; 0x140 <lcd_clrscr>
    lcd_command(LCD_MODE_DEFAULT); /* set entry mode               */
 1e4:	86 e0       	ldi	r24, 0x06	; 6
 1e6:	0e 94 8e 00 	call	0x11c	; 0x11c <lcd_command>
    lcd_command(dispAttr);         /* display/cursor control       */
 1ea:	8c 2f       	mov	r24, r28
 1ec:	0e 94 8e 00 	call	0x11c	; 0x11c <lcd_command>
}/* lcd_init */
 1f0:	cf 91       	pop	r28
 1f2:	08 95       	ret

000001f4 <main>:
};

int main(void)
{
    // Initialize LCD display
    lcd_init(LCD_DISP_ON);
 1f4:	8c e0       	ldi	r24, 0x0C	; 12
 1f6:	0e 94 b8 00 	call	0x170	; 0x170 <lcd_init>
	lcd_command(1 << LCD_CGRAM);
 1fa:	80 e4       	ldi	r24, 0x40	; 64
 1fc:	0e 94 8e 00 	call	0x11c	; 0x11c <lcd_command>
 200:	c0 e0       	ldi	r28, 0x00	; 0
 202:	d1 e0       	ldi	r29, 0x01	; 1
 204:	08 e2       	ldi	r16, 0x28	; 40
 206:	11 e0       	ldi	r17, 0x01	; 1
	for (uint8_t i = 0; i < 40; i++)
	{
		// Store all new chars to memory line by line
		lcd_data(customChar[i]);
 208:	89 91       	ld	r24, Y+
 20a:	0e 94 92 00 	call	0x124	; 0x124 <lcd_data>
int main(void)
{
    // Initialize LCD display
    lcd_init(LCD_DISP_ON);
	lcd_command(1 << LCD_CGRAM);
	for (uint8_t i = 0; i < 40; i++)
 20e:	c0 17       	cp	r28, r16
 210:	d1 07       	cpc	r29, r17
 212:	d1 f7       	brne	.-12     	; 0x208 <main+0x14>
	{
		// Store all new chars to memory line by line
		lcd_data(customChar[i]);
	}
	 // Set DDRAM address
	lcd_command(1 << LCD_DDRAM);
 214:	80 e8       	ldi	r24, 0x80	; 128
 216:	0e 94 8e 00 	call	0x11c	; 0x11c <lcd_command>
    // Put string(s) at LCD display
    lcd_gotoxy(1, 0);
 21a:	60 e0       	ldi	r22, 0x00	; 0
 21c:	81 e0       	ldi	r24, 0x01	; 1
 21e:	0e 94 96 00 	call	0x12c	; 0x12c <lcd_gotoxy>
    lcd_puts("00:00.0");
 222:	88 e2       	ldi	r24, 0x28	; 40
 224:	91 e0       	ldi	r25, 0x01	; 1
 226:	0e 94 a8 00 	call	0x150	; 0x150 <lcd_puts>
    lcd_gotoxy(11,1);
 22a:	61 e0       	ldi	r22, 0x01	; 1
 22c:	8b e0       	ldi	r24, 0x0B	; 11
 22e:	0e 94 96 00 	call	0x12c	; 0x12c <lcd_gotoxy>
	
	TIM0_overflow_1ms();
 232:	85 b5       	in	r24, 0x25	; 37
 234:	8b 7f       	andi	r24, 0xFB	; 251
 236:	85 bd       	out	0x25, r24	; 37
 238:	85 b5       	in	r24, 0x25	; 37
 23a:	83 60       	ori	r24, 0x03	; 3
 23c:	85 bd       	out	0x25, r24	; 37
	TIM0_overflow_interrupt_enable();
 23e:	ee e6       	ldi	r30, 0x6E	; 110
 240:	f0 e0       	ldi	r31, 0x00	; 0
 242:	80 81       	ld	r24, Z
 244:	81 60       	ori	r24, 0x01	; 1
 246:	80 83       	st	Z, r24
    // Configure 8-bit Timer/Counter2 for Stopwatch
    // Set prescaler and enable overflow interrupt every 16 ms


    // Enables interrupts by setting the global interrupt mask
    sei();
 248:	78 94       	sei
 24a:	ff cf       	rjmp	.-2      	; 0x24a <main+0x56>

0000024c <__vector_16>:
 * ISR starts when Timer/Counter2 overflows. Update the stopwatch on
 * LCD display every sixth overflow, ie approximately every 100 ms
 * (6 x 16 ms = 100 ms).
 */
ISR(TIMER0_OVF_vect)
{
 24c:	1f 92       	push	r1
 24e:	0f 92       	push	r0
 250:	0f b6       	in	r0, 0x3f	; 63
 252:	0f 92       	push	r0
 254:	11 24       	eor	r1, r1
 256:	2f 93       	push	r18
 258:	3f 93       	push	r19
 25a:	4f 93       	push	r20
 25c:	5f 93       	push	r21
 25e:	6f 93       	push	r22
 260:	7f 93       	push	r23
 262:	8f 93       	push	r24
 264:	9f 93       	push	r25
 266:	af 93       	push	r26
 268:	bf 93       	push	r27
 26a:	ef 93       	push	r30
 26c:	ff 93       	push	r31
 26e:	cf 93       	push	r28
 270:	df 93       	push	r29
 272:	00 d0       	rcall	.+0      	; 0x274 <__vector_16+0x28>
 274:	cd b7       	in	r28, 0x3d	; 61
 276:	de b7       	in	r29, 0x3e	; 62
	static uint8_t minutes = 0;
	static uint8_t t_minutes = 0;
	static uint8_t state = 0;
	static uint8_t loading = 0;	
	static uint8_t bar = 1;
	char lcd_string[2] = "";
 278:	1a 82       	std	Y+2, r1	; 0x02
 27a:	19 82       	std	Y+1, r1	; 0x01
    number_of_overflows++;
 27c:	80 91 3a 01 	lds	r24, 0x013A	; 0x80013a <number_of_overflows.2048>
 280:	8f 5f       	subi	r24, 0xFF	; 255
 282:	80 93 3a 01 	sts	0x013A, r24	; 0x80013a <number_of_overflows.2048>
	state++;
 286:	90 91 39 01 	lds	r25, 0x0139	; 0x800139 <state.2054>
 28a:	9f 5f       	subi	r25, 0xFF	; 255
 28c:	90 93 39 01 	sts	0x0139, r25	; 0x800139 <state.2054>
				//lcd_gotoxy(bar, 1);
				//lcd_puts("          ");
			//}
		//}
	//}
    if (number_of_overflows >= 100)
 290:	84 36       	cpi	r24, 0x64	; 100
 292:	08 f4       	brcc	.+2      	; 0x296 <__vector_16+0x4a>
 294:	c1 c0       	rjmp	.+386    	; 0x418 <__LOCK_REGION_LENGTH__+0x18>
    {
		int power = pow(seconds + 10*t_seconds,2);
 296:	80 91 37 01 	lds	r24, 0x0137	; 0x800137 <t_seconds.2051>
 29a:	90 e0       	ldi	r25, 0x00	; 0
 29c:	bc 01       	movw	r22, r24
 29e:	66 0f       	add	r22, r22
 2a0:	77 1f       	adc	r23, r23
 2a2:	88 0f       	add	r24, r24
 2a4:	99 1f       	adc	r25, r25
 2a6:	88 0f       	add	r24, r24
 2a8:	99 1f       	adc	r25, r25
 2aa:	88 0f       	add	r24, r24
 2ac:	99 1f       	adc	r25, r25
 2ae:	68 0f       	add	r22, r24
 2b0:	79 1f       	adc	r23, r25
 2b2:	80 91 38 01 	lds	r24, 0x0138	; 0x800138 <seconds.2050>
 2b6:	68 0f       	add	r22, r24
 2b8:	71 1d       	adc	r23, r1
 2ba:	07 2e       	mov	r0, r23
 2bc:	00 0c       	add	r0, r0
 2be:	88 0b       	sbc	r24, r24
 2c0:	99 0b       	sbc	r25, r25
 2c2:	0e 94 59 02 	call	0x4b2	; 0x4b2 <__floatsisf>
        // Do this every 6 x 16 ms = 100 ms
        number_of_overflows = 0;
 2c6:	10 92 3a 01 	sts	0x013A, r1	; 0x80013a <number_of_overflows.2048>
		tens++;
 2ca:	20 91 36 01 	lds	r18, 0x0136	; 0x800136 <tens.2049>
 2ce:	2f 5f       	subi	r18, 0xFF	; 255
 2d0:	20 93 36 01 	sts	0x0136, r18	; 0x800136 <tens.2049>
    } else if (__radix < 2 || __radix > 36) {
	*__s = 0;
	return __s;
    } else {
	extern char *__itoa_ncheck (int, char *, unsigned char);
	return __itoa_ncheck (__val, __s, __radix);
 2d4:	9b 01       	movw	r18, r22
 2d6:	ac 01       	movw	r20, r24
 2d8:	0e 94 bd 02 	call	0x57a	; 0x57a <__mulsf3>
 2dc:	0e 94 21 02 	call	0x442	; 0x442 <__fixsfsi>
 2e0:	dc 01       	movw	r26, r24
 2e2:	cb 01       	movw	r24, r22
 2e4:	4a e0       	ldi	r20, 0x0A	; 10
 2e6:	be 01       	movw	r22, r28
 2e8:	6f 5f       	subi	r22, 0xFF	; 255
 2ea:	7f 4f       	sbci	r23, 0xFF	; 255
 2ec:	0e 94 52 03 	call	0x6a4	; 0x6a4 <__itoa_ncheck>
		itoa(power, lcd_string, 10);
		lcd_gotoxy(11,0);
 2f0:	60 e0       	ldi	r22, 0x00	; 0
 2f2:	8b e0       	ldi	r24, 0x0B	; 11
 2f4:	0e 94 96 00 	call	0x12c	; 0x12c <lcd_gotoxy>
		lcd_puts(lcd_string);
 2f8:	ce 01       	movw	r24, r28
 2fa:	01 96       	adiw	r24, 0x01	; 1
 2fc:	0e 94 a8 00 	call	0x150	; 0x150 <lcd_puts>
		if(tens>9)
 300:	80 91 36 01 	lds	r24, 0x0136	; 0x800136 <tens.2049>
 304:	8a 30       	cpi	r24, 0x0A	; 10
 306:	98 f1       	brcs	.+102    	; 0x36e <__vector_16+0x122>
		{
			tens=0;
 308:	10 92 36 01 	sts	0x0136, r1	; 0x800136 <tens.2049>
			seconds++;
 30c:	80 91 38 01 	lds	r24, 0x0138	; 0x800138 <seconds.2050>
 310:	8f 5f       	subi	r24, 0xFF	; 255
			if(seconds>9)
 312:	8a 30       	cpi	r24, 0x0A	; 10
 314:	18 f4       	brcc	.+6      	; 0x31c <__vector_16+0xd0>
		lcd_gotoxy(11,0);
		lcd_puts(lcd_string);
		if(tens>9)
		{
			tens=0;
			seconds++;
 316:	80 93 38 01 	sts	0x0138, r24	; 0x800138 <seconds.2050>
 31a:	29 c0       	rjmp	.+82     	; 0x36e <__vector_16+0x122>
			if(seconds>9)
			{
				seconds = 0;
 31c:	10 92 38 01 	sts	0x0138, r1	; 0x800138 <seconds.2050>
				t_seconds++;
 320:	80 91 37 01 	lds	r24, 0x0137	; 0x800137 <t_seconds.2051>
 324:	8f 5f       	subi	r24, 0xFF	; 255
				if(t_seconds>5)
 326:	86 30       	cpi	r24, 0x06	; 6
 328:	18 f4       	brcc	.+6      	; 0x330 <__vector_16+0xe4>
			tens=0;
			seconds++;
			if(seconds>9)
			{
				seconds = 0;
				t_seconds++;
 32a:	80 93 37 01 	sts	0x0137, r24	; 0x800137 <t_seconds.2051>
 32e:	1f c0       	rjmp	.+62     	; 0x36e <__vector_16+0x122>
				if(t_seconds>5)
				{
					t_seconds = 0;
 330:	10 92 37 01 	sts	0x0137, r1	; 0x800137 <t_seconds.2051>
					minutes++;
 334:	80 91 35 01 	lds	r24, 0x0135	; 0x800135 <minutes.2052>
 338:	8f 5f       	subi	r24, 0xFF	; 255
 33a:	80 93 35 01 	sts	0x0135, r24	; 0x800135 <minutes.2052>
					lcd_gotoxy(12,0);
 33e:	60 e0       	ldi	r22, 0x00	; 0
 340:	8c e0       	ldi	r24, 0x0C	; 12
 342:	0e 94 96 00 	call	0x12c	; 0x12c <lcd_gotoxy>
					lcd_puts("   ");
 346:	80 e3       	ldi	r24, 0x30	; 48
 348:	91 e0       	ldi	r25, 0x01	; 1
 34a:	0e 94 a8 00 	call	0x150	; 0x150 <lcd_puts>
					if(minutes>9)
 34e:	80 91 35 01 	lds	r24, 0x0135	; 0x800135 <minutes.2052>
 352:	8a 30       	cpi	r24, 0x0A	; 10
 354:	60 f0       	brcs	.+24     	; 0x36e <__vector_16+0x122>
					{
						minutes = 0;
 356:	10 92 35 01 	sts	0x0135, r1	; 0x800135 <minutes.2052>
						t_minutes++;
 35a:	80 91 34 01 	lds	r24, 0x0134	; 0x800134 <__data_end>
 35e:	8f 5f       	subi	r24, 0xFF	; 255
						if(t_minutes>5)
 360:	86 30       	cpi	r24, 0x06	; 6
 362:	18 f4       	brcc	.+6      	; 0x36a <__vector_16+0x11e>
					lcd_gotoxy(12,0);
					lcd_puts("   ");
					if(minutes>9)
					{
						minutes = 0;
						t_minutes++;
 364:	80 93 34 01 	sts	0x0134, r24	; 0x800134 <__data_end>
 368:	02 c0       	rjmp	.+4      	; 0x36e <__vector_16+0x122>
						if(t_minutes>5)
						{
							t_minutes = 0;
 36a:	10 92 34 01 	sts	0x0134, r1	; 0x800134 <__data_end>
 36e:	80 91 36 01 	lds	r24, 0x0136	; 0x800136 <tens.2049>
 372:	4a e0       	ldi	r20, 0x0A	; 10
 374:	be 01       	movw	r22, r28
 376:	6f 5f       	subi	r22, 0xFF	; 255
 378:	7f 4f       	sbci	r23, 0xFF	; 255
 37a:	90 e0       	ldi	r25, 0x00	; 0
 37c:	0e 94 52 03 	call	0x6a4	; 0x6a4 <__itoa_ncheck>
					}
				}
			}
		}
		itoa(tens, lcd_string, 10);
		lcd_gotoxy(7,0);
 380:	60 e0       	ldi	r22, 0x00	; 0
 382:	87 e0       	ldi	r24, 0x07	; 7
 384:	0e 94 96 00 	call	0x12c	; 0x12c <lcd_gotoxy>
		lcd_puts(lcd_string);
 388:	ce 01       	movw	r24, r28
 38a:	01 96       	adiw	r24, 0x01	; 1
 38c:	0e 94 a8 00 	call	0x150	; 0x150 <lcd_puts>
 390:	80 91 38 01 	lds	r24, 0x0138	; 0x800138 <seconds.2050>
 394:	4a e0       	ldi	r20, 0x0A	; 10
 396:	be 01       	movw	r22, r28
 398:	6f 5f       	subi	r22, 0xFF	; 255
 39a:	7f 4f       	sbci	r23, 0xFF	; 255
 39c:	90 e0       	ldi	r25, 0x00	; 0
 39e:	0e 94 52 03 	call	0x6a4	; 0x6a4 <__itoa_ncheck>
		itoa(seconds, lcd_string, 10);
		lcd_gotoxy(5,0);
 3a2:	60 e0       	ldi	r22, 0x00	; 0
 3a4:	85 e0       	ldi	r24, 0x05	; 5
 3a6:	0e 94 96 00 	call	0x12c	; 0x12c <lcd_gotoxy>
		lcd_puts(lcd_string);
 3aa:	ce 01       	movw	r24, r28
 3ac:	01 96       	adiw	r24, 0x01	; 1
 3ae:	0e 94 a8 00 	call	0x150	; 0x150 <lcd_puts>
 3b2:	80 91 37 01 	lds	r24, 0x0137	; 0x800137 <t_seconds.2051>
 3b6:	4a e0       	ldi	r20, 0x0A	; 10
 3b8:	be 01       	movw	r22, r28
 3ba:	6f 5f       	subi	r22, 0xFF	; 255
 3bc:	7f 4f       	sbci	r23, 0xFF	; 255
 3be:	90 e0       	ldi	r25, 0x00	; 0
 3c0:	0e 94 52 03 	call	0x6a4	; 0x6a4 <__itoa_ncheck>
		itoa(t_seconds, lcd_string, 10);
		lcd_gotoxy(4,0);
 3c4:	60 e0       	ldi	r22, 0x00	; 0
 3c6:	84 e0       	ldi	r24, 0x04	; 4
 3c8:	0e 94 96 00 	call	0x12c	; 0x12c <lcd_gotoxy>
		lcd_puts(lcd_string);
 3cc:	ce 01       	movw	r24, r28
 3ce:	01 96       	adiw	r24, 0x01	; 1
 3d0:	0e 94 a8 00 	call	0x150	; 0x150 <lcd_puts>
 3d4:	80 91 35 01 	lds	r24, 0x0135	; 0x800135 <minutes.2052>
 3d8:	4a e0       	ldi	r20, 0x0A	; 10
 3da:	be 01       	movw	r22, r28
 3dc:	6f 5f       	subi	r22, 0xFF	; 255
 3de:	7f 4f       	sbci	r23, 0xFF	; 255
 3e0:	90 e0       	ldi	r25, 0x00	; 0
 3e2:	0e 94 52 03 	call	0x6a4	; 0x6a4 <__itoa_ncheck>
		itoa(minutes, lcd_string, 10);
		lcd_gotoxy(2,0);
 3e6:	60 e0       	ldi	r22, 0x00	; 0
 3e8:	82 e0       	ldi	r24, 0x02	; 2
 3ea:	0e 94 96 00 	call	0x12c	; 0x12c <lcd_gotoxy>
		lcd_puts(lcd_string);
 3ee:	ce 01       	movw	r24, r28
 3f0:	01 96       	adiw	r24, 0x01	; 1
 3f2:	0e 94 a8 00 	call	0x150	; 0x150 <lcd_puts>
 3f6:	80 91 34 01 	lds	r24, 0x0134	; 0x800134 <__data_end>
 3fa:	4a e0       	ldi	r20, 0x0A	; 10
 3fc:	be 01       	movw	r22, r28
 3fe:	6f 5f       	subi	r22, 0xFF	; 255
 400:	7f 4f       	sbci	r23, 0xFF	; 255
 402:	90 e0       	ldi	r25, 0x00	; 0
 404:	0e 94 52 03 	call	0x6a4	; 0x6a4 <__itoa_ncheck>
		itoa(t_minutes, lcd_string, 10);
		lcd_gotoxy(1,0);
 408:	60 e0       	ldi	r22, 0x00	; 0
 40a:	81 e0       	ldi	r24, 0x01	; 1
 40c:	0e 94 96 00 	call	0x12c	; 0x12c <lcd_gotoxy>
		lcd_puts(lcd_string);	
 410:	ce 01       	movw	r24, r28
 412:	01 96       	adiw	r24, 0x01	; 1
 414:	0e 94 a8 00 	call	0x150	; 0x150 <lcd_puts>
        // WRITE YOUR CODE HERE

    }
 418:	0f 90       	pop	r0
 41a:	0f 90       	pop	r0
 41c:	df 91       	pop	r29
 41e:	cf 91       	pop	r28
 420:	ff 91       	pop	r31
 422:	ef 91       	pop	r30
 424:	bf 91       	pop	r27
 426:	af 91       	pop	r26
 428:	9f 91       	pop	r25
 42a:	8f 91       	pop	r24
 42c:	7f 91       	pop	r23
 42e:	6f 91       	pop	r22
 430:	5f 91       	pop	r21
 432:	4f 91       	pop	r20
 434:	3f 91       	pop	r19
 436:	2f 91       	pop	r18
 438:	0f 90       	pop	r0
 43a:	0f be       	out	0x3f, r0	; 63
 43c:	0f 90       	pop	r0
 43e:	1f 90       	pop	r1
 440:	18 95       	reti

00000442 <__fixsfsi>:
 442:	0e 94 28 02 	call	0x450	; 0x450 <__fixunssfsi>
 446:	68 94       	set
 448:	b1 11       	cpse	r27, r1
 44a:	0c 94 b7 02 	jmp	0x56e	; 0x56e <__fp_szero>
 44e:	08 95       	ret

00000450 <__fixunssfsi>:
 450:	0e 94 9c 02 	call	0x538	; 0x538 <__fp_splitA>
 454:	88 f0       	brcs	.+34     	; 0x478 <__fixunssfsi+0x28>
 456:	9f 57       	subi	r25, 0x7F	; 127
 458:	98 f0       	brcs	.+38     	; 0x480 <__fixunssfsi+0x30>
 45a:	b9 2f       	mov	r27, r25
 45c:	99 27       	eor	r25, r25
 45e:	b7 51       	subi	r27, 0x17	; 23
 460:	b0 f0       	brcs	.+44     	; 0x48e <__fixunssfsi+0x3e>
 462:	e1 f0       	breq	.+56     	; 0x49c <__fixunssfsi+0x4c>
 464:	66 0f       	add	r22, r22
 466:	77 1f       	adc	r23, r23
 468:	88 1f       	adc	r24, r24
 46a:	99 1f       	adc	r25, r25
 46c:	1a f0       	brmi	.+6      	; 0x474 <__fixunssfsi+0x24>
 46e:	ba 95       	dec	r27
 470:	c9 f7       	brne	.-14     	; 0x464 <__fixunssfsi+0x14>
 472:	14 c0       	rjmp	.+40     	; 0x49c <__fixunssfsi+0x4c>
 474:	b1 30       	cpi	r27, 0x01	; 1
 476:	91 f0       	breq	.+36     	; 0x49c <__fixunssfsi+0x4c>
 478:	0e 94 b6 02 	call	0x56c	; 0x56c <__fp_zero>
 47c:	b1 e0       	ldi	r27, 0x01	; 1
 47e:	08 95       	ret
 480:	0c 94 b6 02 	jmp	0x56c	; 0x56c <__fp_zero>
 484:	67 2f       	mov	r22, r23
 486:	78 2f       	mov	r23, r24
 488:	88 27       	eor	r24, r24
 48a:	b8 5f       	subi	r27, 0xF8	; 248
 48c:	39 f0       	breq	.+14     	; 0x49c <__fixunssfsi+0x4c>
 48e:	b9 3f       	cpi	r27, 0xF9	; 249
 490:	cc f3       	brlt	.-14     	; 0x484 <__fixunssfsi+0x34>
 492:	86 95       	lsr	r24
 494:	77 95       	ror	r23
 496:	67 95       	ror	r22
 498:	b3 95       	inc	r27
 49a:	d9 f7       	brne	.-10     	; 0x492 <__fixunssfsi+0x42>
 49c:	3e f4       	brtc	.+14     	; 0x4ac <__fixunssfsi+0x5c>
 49e:	90 95       	com	r25
 4a0:	80 95       	com	r24
 4a2:	70 95       	com	r23
 4a4:	61 95       	neg	r22
 4a6:	7f 4f       	sbci	r23, 0xFF	; 255
 4a8:	8f 4f       	sbci	r24, 0xFF	; 255
 4aa:	9f 4f       	sbci	r25, 0xFF	; 255
 4ac:	08 95       	ret

000004ae <__floatunsisf>:
 4ae:	e8 94       	clt
 4b0:	09 c0       	rjmp	.+18     	; 0x4c4 <__floatsisf+0x12>

000004b2 <__floatsisf>:
 4b2:	97 fb       	bst	r25, 7
 4b4:	3e f4       	brtc	.+14     	; 0x4c4 <__floatsisf+0x12>
 4b6:	90 95       	com	r25
 4b8:	80 95       	com	r24
 4ba:	70 95       	com	r23
 4bc:	61 95       	neg	r22
 4be:	7f 4f       	sbci	r23, 0xFF	; 255
 4c0:	8f 4f       	sbci	r24, 0xFF	; 255
 4c2:	9f 4f       	sbci	r25, 0xFF	; 255
 4c4:	99 23       	and	r25, r25
 4c6:	a9 f0       	breq	.+42     	; 0x4f2 <__floatsisf+0x40>
 4c8:	f9 2f       	mov	r31, r25
 4ca:	96 e9       	ldi	r25, 0x96	; 150
 4cc:	bb 27       	eor	r27, r27
 4ce:	93 95       	inc	r25
 4d0:	f6 95       	lsr	r31
 4d2:	87 95       	ror	r24
 4d4:	77 95       	ror	r23
 4d6:	67 95       	ror	r22
 4d8:	b7 95       	ror	r27
 4da:	f1 11       	cpse	r31, r1
 4dc:	f8 cf       	rjmp	.-16     	; 0x4ce <__floatsisf+0x1c>
 4de:	fa f4       	brpl	.+62     	; 0x51e <__floatsisf+0x6c>
 4e0:	bb 0f       	add	r27, r27
 4e2:	11 f4       	brne	.+4      	; 0x4e8 <__floatsisf+0x36>
 4e4:	60 ff       	sbrs	r22, 0
 4e6:	1b c0       	rjmp	.+54     	; 0x51e <__floatsisf+0x6c>
 4e8:	6f 5f       	subi	r22, 0xFF	; 255
 4ea:	7f 4f       	sbci	r23, 0xFF	; 255
 4ec:	8f 4f       	sbci	r24, 0xFF	; 255
 4ee:	9f 4f       	sbci	r25, 0xFF	; 255
 4f0:	16 c0       	rjmp	.+44     	; 0x51e <__floatsisf+0x6c>
 4f2:	88 23       	and	r24, r24
 4f4:	11 f0       	breq	.+4      	; 0x4fa <__floatsisf+0x48>
 4f6:	96 e9       	ldi	r25, 0x96	; 150
 4f8:	11 c0       	rjmp	.+34     	; 0x51c <__floatsisf+0x6a>
 4fa:	77 23       	and	r23, r23
 4fc:	21 f0       	breq	.+8      	; 0x506 <__floatsisf+0x54>
 4fe:	9e e8       	ldi	r25, 0x8E	; 142
 500:	87 2f       	mov	r24, r23
 502:	76 2f       	mov	r23, r22
 504:	05 c0       	rjmp	.+10     	; 0x510 <__floatsisf+0x5e>
 506:	66 23       	and	r22, r22
 508:	71 f0       	breq	.+28     	; 0x526 <__floatsisf+0x74>
 50a:	96 e8       	ldi	r25, 0x86	; 134
 50c:	86 2f       	mov	r24, r22
 50e:	70 e0       	ldi	r23, 0x00	; 0
 510:	60 e0       	ldi	r22, 0x00	; 0
 512:	2a f0       	brmi	.+10     	; 0x51e <__floatsisf+0x6c>
 514:	9a 95       	dec	r25
 516:	66 0f       	add	r22, r22
 518:	77 1f       	adc	r23, r23
 51a:	88 1f       	adc	r24, r24
 51c:	da f7       	brpl	.-10     	; 0x514 <__floatsisf+0x62>
 51e:	88 0f       	add	r24, r24
 520:	96 95       	lsr	r25
 522:	87 95       	ror	r24
 524:	97 f9       	bld	r25, 7
 526:	08 95       	ret

00000528 <__fp_split3>:
 528:	57 fd       	sbrc	r21, 7
 52a:	90 58       	subi	r25, 0x80	; 128
 52c:	44 0f       	add	r20, r20
 52e:	55 1f       	adc	r21, r21
 530:	59 f0       	breq	.+22     	; 0x548 <__fp_splitA+0x10>
 532:	5f 3f       	cpi	r21, 0xFF	; 255
 534:	71 f0       	breq	.+28     	; 0x552 <__fp_splitA+0x1a>
 536:	47 95       	ror	r20

00000538 <__fp_splitA>:
 538:	88 0f       	add	r24, r24
 53a:	97 fb       	bst	r25, 7
 53c:	99 1f       	adc	r25, r25
 53e:	61 f0       	breq	.+24     	; 0x558 <__fp_splitA+0x20>
 540:	9f 3f       	cpi	r25, 0xFF	; 255
 542:	79 f0       	breq	.+30     	; 0x562 <__fp_splitA+0x2a>
 544:	87 95       	ror	r24
 546:	08 95       	ret
 548:	12 16       	cp	r1, r18
 54a:	13 06       	cpc	r1, r19
 54c:	14 06       	cpc	r1, r20
 54e:	55 1f       	adc	r21, r21
 550:	f2 cf       	rjmp	.-28     	; 0x536 <__fp_split3+0xe>
 552:	46 95       	lsr	r20
 554:	f1 df       	rcall	.-30     	; 0x538 <__fp_splitA>
 556:	08 c0       	rjmp	.+16     	; 0x568 <__fp_splitA+0x30>
 558:	16 16       	cp	r1, r22
 55a:	17 06       	cpc	r1, r23
 55c:	18 06       	cpc	r1, r24
 55e:	99 1f       	adc	r25, r25
 560:	f1 cf       	rjmp	.-30     	; 0x544 <__fp_splitA+0xc>
 562:	86 95       	lsr	r24
 564:	71 05       	cpc	r23, r1
 566:	61 05       	cpc	r22, r1
 568:	08 94       	sec
 56a:	08 95       	ret

0000056c <__fp_zero>:
 56c:	e8 94       	clt

0000056e <__fp_szero>:
 56e:	bb 27       	eor	r27, r27
 570:	66 27       	eor	r22, r22
 572:	77 27       	eor	r23, r23
 574:	cb 01       	movw	r24, r22
 576:	97 f9       	bld	r25, 7
 578:	08 95       	ret

0000057a <__mulsf3>:
 57a:	0e 94 d0 02 	call	0x5a0	; 0x5a0 <__mulsf3x>
 57e:	0c 94 41 03 	jmp	0x682	; 0x682 <__fp_round>
 582:	0e 94 33 03 	call	0x666	; 0x666 <__fp_pscA>
 586:	38 f0       	brcs	.+14     	; 0x596 <__mulsf3+0x1c>
 588:	0e 94 3a 03 	call	0x674	; 0x674 <__fp_pscB>
 58c:	20 f0       	brcs	.+8      	; 0x596 <__mulsf3+0x1c>
 58e:	95 23       	and	r25, r21
 590:	11 f0       	breq	.+4      	; 0x596 <__mulsf3+0x1c>
 592:	0c 94 2a 03 	jmp	0x654	; 0x654 <__fp_inf>
 596:	0c 94 30 03 	jmp	0x660	; 0x660 <__fp_nan>
 59a:	11 24       	eor	r1, r1
 59c:	0c 94 b7 02 	jmp	0x56e	; 0x56e <__fp_szero>

000005a0 <__mulsf3x>:
 5a0:	0e 94 94 02 	call	0x528	; 0x528 <__fp_split3>
 5a4:	70 f3       	brcs	.-36     	; 0x582 <__mulsf3+0x8>

000005a6 <__mulsf3_pse>:
 5a6:	95 9f       	mul	r25, r21
 5a8:	c1 f3       	breq	.-16     	; 0x59a <__mulsf3+0x20>
 5aa:	95 0f       	add	r25, r21
 5ac:	50 e0       	ldi	r21, 0x00	; 0
 5ae:	55 1f       	adc	r21, r21
 5b0:	62 9f       	mul	r22, r18
 5b2:	f0 01       	movw	r30, r0
 5b4:	72 9f       	mul	r23, r18
 5b6:	bb 27       	eor	r27, r27
 5b8:	f0 0d       	add	r31, r0
 5ba:	b1 1d       	adc	r27, r1
 5bc:	63 9f       	mul	r22, r19
 5be:	aa 27       	eor	r26, r26
 5c0:	f0 0d       	add	r31, r0
 5c2:	b1 1d       	adc	r27, r1
 5c4:	aa 1f       	adc	r26, r26
 5c6:	64 9f       	mul	r22, r20
 5c8:	66 27       	eor	r22, r22
 5ca:	b0 0d       	add	r27, r0
 5cc:	a1 1d       	adc	r26, r1
 5ce:	66 1f       	adc	r22, r22
 5d0:	82 9f       	mul	r24, r18
 5d2:	22 27       	eor	r18, r18
 5d4:	b0 0d       	add	r27, r0
 5d6:	a1 1d       	adc	r26, r1
 5d8:	62 1f       	adc	r22, r18
 5da:	73 9f       	mul	r23, r19
 5dc:	b0 0d       	add	r27, r0
 5de:	a1 1d       	adc	r26, r1
 5e0:	62 1f       	adc	r22, r18
 5e2:	83 9f       	mul	r24, r19
 5e4:	a0 0d       	add	r26, r0
 5e6:	61 1d       	adc	r22, r1
 5e8:	22 1f       	adc	r18, r18
 5ea:	74 9f       	mul	r23, r20
 5ec:	33 27       	eor	r19, r19
 5ee:	a0 0d       	add	r26, r0
 5f0:	61 1d       	adc	r22, r1
 5f2:	23 1f       	adc	r18, r19
 5f4:	84 9f       	mul	r24, r20
 5f6:	60 0d       	add	r22, r0
 5f8:	21 1d       	adc	r18, r1
 5fa:	82 2f       	mov	r24, r18
 5fc:	76 2f       	mov	r23, r22
 5fe:	6a 2f       	mov	r22, r26
 600:	11 24       	eor	r1, r1
 602:	9f 57       	subi	r25, 0x7F	; 127
 604:	50 40       	sbci	r21, 0x00	; 0
 606:	9a f0       	brmi	.+38     	; 0x62e <__mulsf3_pse+0x88>
 608:	f1 f0       	breq	.+60     	; 0x646 <__mulsf3_pse+0xa0>
 60a:	88 23       	and	r24, r24
 60c:	4a f0       	brmi	.+18     	; 0x620 <__mulsf3_pse+0x7a>
 60e:	ee 0f       	add	r30, r30
 610:	ff 1f       	adc	r31, r31
 612:	bb 1f       	adc	r27, r27
 614:	66 1f       	adc	r22, r22
 616:	77 1f       	adc	r23, r23
 618:	88 1f       	adc	r24, r24
 61a:	91 50       	subi	r25, 0x01	; 1
 61c:	50 40       	sbci	r21, 0x00	; 0
 61e:	a9 f7       	brne	.-22     	; 0x60a <__mulsf3_pse+0x64>
 620:	9e 3f       	cpi	r25, 0xFE	; 254
 622:	51 05       	cpc	r21, r1
 624:	80 f0       	brcs	.+32     	; 0x646 <__mulsf3_pse+0xa0>
 626:	0c 94 2a 03 	jmp	0x654	; 0x654 <__fp_inf>
 62a:	0c 94 b7 02 	jmp	0x56e	; 0x56e <__fp_szero>
 62e:	5f 3f       	cpi	r21, 0xFF	; 255
 630:	e4 f3       	brlt	.-8      	; 0x62a <__mulsf3_pse+0x84>
 632:	98 3e       	cpi	r25, 0xE8	; 232
 634:	d4 f3       	brlt	.-12     	; 0x62a <__mulsf3_pse+0x84>
 636:	86 95       	lsr	r24
 638:	77 95       	ror	r23
 63a:	67 95       	ror	r22
 63c:	b7 95       	ror	r27
 63e:	f7 95       	ror	r31
 640:	e7 95       	ror	r30
 642:	9f 5f       	subi	r25, 0xFF	; 255
 644:	c1 f7       	brne	.-16     	; 0x636 <__mulsf3_pse+0x90>
 646:	fe 2b       	or	r31, r30
 648:	88 0f       	add	r24, r24
 64a:	91 1d       	adc	r25, r1
 64c:	96 95       	lsr	r25
 64e:	87 95       	ror	r24
 650:	97 f9       	bld	r25, 7
 652:	08 95       	ret

00000654 <__fp_inf>:
 654:	97 f9       	bld	r25, 7
 656:	9f 67       	ori	r25, 0x7F	; 127
 658:	80 e8       	ldi	r24, 0x80	; 128
 65a:	70 e0       	ldi	r23, 0x00	; 0
 65c:	60 e0       	ldi	r22, 0x00	; 0
 65e:	08 95       	ret

00000660 <__fp_nan>:
 660:	9f ef       	ldi	r25, 0xFF	; 255
 662:	80 ec       	ldi	r24, 0xC0	; 192
 664:	08 95       	ret

00000666 <__fp_pscA>:
 666:	00 24       	eor	r0, r0
 668:	0a 94       	dec	r0
 66a:	16 16       	cp	r1, r22
 66c:	17 06       	cpc	r1, r23
 66e:	18 06       	cpc	r1, r24
 670:	09 06       	cpc	r0, r25
 672:	08 95       	ret

00000674 <__fp_pscB>:
 674:	00 24       	eor	r0, r0
 676:	0a 94       	dec	r0
 678:	12 16       	cp	r1, r18
 67a:	13 06       	cpc	r1, r19
 67c:	14 06       	cpc	r1, r20
 67e:	05 06       	cpc	r0, r21
 680:	08 95       	ret

00000682 <__fp_round>:
 682:	09 2e       	mov	r0, r25
 684:	03 94       	inc	r0
 686:	00 0c       	add	r0, r0
 688:	11 f4       	brne	.+4      	; 0x68e <__fp_round+0xc>
 68a:	88 23       	and	r24, r24
 68c:	52 f0       	brmi	.+20     	; 0x6a2 <__fp_round+0x20>
 68e:	bb 0f       	add	r27, r27
 690:	40 f4       	brcc	.+16     	; 0x6a2 <__fp_round+0x20>
 692:	bf 2b       	or	r27, r31
 694:	11 f4       	brne	.+4      	; 0x69a <__fp_round+0x18>
 696:	60 ff       	sbrs	r22, 0
 698:	04 c0       	rjmp	.+8      	; 0x6a2 <__fp_round+0x20>
 69a:	6f 5f       	subi	r22, 0xFF	; 255
 69c:	7f 4f       	sbci	r23, 0xFF	; 255
 69e:	8f 4f       	sbci	r24, 0xFF	; 255
 6a0:	9f 4f       	sbci	r25, 0xFF	; 255
 6a2:	08 95       	ret

000006a4 <__itoa_ncheck>:
 6a4:	bb 27       	eor	r27, r27
 6a6:	4a 30       	cpi	r20, 0x0A	; 10
 6a8:	31 f4       	brne	.+12     	; 0x6b6 <__itoa_ncheck+0x12>
 6aa:	99 23       	and	r25, r25
 6ac:	22 f4       	brpl	.+8      	; 0x6b6 <__itoa_ncheck+0x12>
 6ae:	bd e2       	ldi	r27, 0x2D	; 45
 6b0:	90 95       	com	r25
 6b2:	81 95       	neg	r24
 6b4:	9f 4f       	sbci	r25, 0xFF	; 255
 6b6:	0c 94 5e 03 	jmp	0x6bc	; 0x6bc <__utoa_common>

000006ba <__utoa_ncheck>:
 6ba:	bb 27       	eor	r27, r27

000006bc <__utoa_common>:
 6bc:	fb 01       	movw	r30, r22
 6be:	55 27       	eor	r21, r21
 6c0:	aa 27       	eor	r26, r26
 6c2:	88 0f       	add	r24, r24
 6c4:	99 1f       	adc	r25, r25
 6c6:	aa 1f       	adc	r26, r26
 6c8:	a4 17       	cp	r26, r20
 6ca:	10 f0       	brcs	.+4      	; 0x6d0 <__utoa_common+0x14>
 6cc:	a4 1b       	sub	r26, r20
 6ce:	83 95       	inc	r24
 6d0:	50 51       	subi	r21, 0x10	; 16
 6d2:	b9 f7       	brne	.-18     	; 0x6c2 <__utoa_common+0x6>
 6d4:	a0 5d       	subi	r26, 0xD0	; 208
 6d6:	aa 33       	cpi	r26, 0x3A	; 58
 6d8:	08 f0       	brcs	.+2      	; 0x6dc <__utoa_common+0x20>
 6da:	a9 5d       	subi	r26, 0xD9	; 217
 6dc:	a1 93       	st	Z+, r26
 6de:	00 97       	sbiw	r24, 0x00	; 0
 6e0:	79 f7       	brne	.-34     	; 0x6c0 <__utoa_common+0x4>
 6e2:	b1 11       	cpse	r27, r1
 6e4:	b1 93       	st	Z+, r27
 6e6:	11 92       	st	Z+, r1
 6e8:	cb 01       	movw	r24, r22
 6ea:	0c 94 77 03 	jmp	0x6ee	; 0x6ee <strrev>

000006ee <strrev>:
 6ee:	dc 01       	movw	r26, r24
 6f0:	fc 01       	movw	r30, r24
 6f2:	67 2f       	mov	r22, r23
 6f4:	71 91       	ld	r23, Z+
 6f6:	77 23       	and	r23, r23
 6f8:	e1 f7       	brne	.-8      	; 0x6f2 <strrev+0x4>
 6fa:	32 97       	sbiw	r30, 0x02	; 2
 6fc:	04 c0       	rjmp	.+8      	; 0x706 <strrev+0x18>
 6fe:	7c 91       	ld	r23, X
 700:	6d 93       	st	X+, r22
 702:	70 83       	st	Z, r23
 704:	62 91       	ld	r22, -Z
 706:	ae 17       	cp	r26, r30
 708:	bf 07       	cpc	r27, r31
 70a:	c8 f3       	brcs	.-14     	; 0x6fe <strrev+0x10>
 70c:	08 95       	ret

0000070e <_exit>:
 70e:	f8 94       	cli

00000710 <__stop_program>:
 710:	ff cf       	rjmp	.-2      	; 0x710 <__stop_program>
