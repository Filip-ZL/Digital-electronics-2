
project.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000002c  00800100  00000dae  00000e42  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000dae  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000012  0080012c  0080012c  00000e6e  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000e6e  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000ea0  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000158  00000000  00000000  00000ee0  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00001f4a  00000000  00000000  00001038  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000cf3  00000000  00000000  00002f82  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000eb6  00000000  00000000  00003c75  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000348  00000000  00000000  00004b2c  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000678  00000000  00000000  00004e74  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000e90  00000000  00000000  000054ec  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000120  00000000  00000000  0000637c  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   8:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  10:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  14:	0c 94 5b 01 	jmp	0x2b6	; 0x2b6 <__vector_5>
  18:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  1c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  20:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  24:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  28:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  2c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  30:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  34:	0c 94 d1 02 	jmp	0x5a2	; 0x5a2 <__vector_13>
  38:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  3c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  40:	0c 94 92 01 	jmp	0x324	; 0x324 <__vector_16>
  44:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  48:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  4c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  50:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  54:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  58:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  5c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  60:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  64:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
  74:	11 e0       	ldi	r17, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	ee ea       	ldi	r30, 0xAE	; 174
  7c:	fd e0       	ldi	r31, 0x0D	; 13
  7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
  80:	05 90       	lpm	r0, Z+
  82:	0d 92       	st	X+, r0
  84:	ac 32       	cpi	r26, 0x2C	; 44
  86:	b1 07       	cpc	r27, r17
  88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>

0000008a <__do_clear_bss>:
  8a:	21 e0       	ldi	r18, 0x01	; 1
  8c:	ac e2       	ldi	r26, 0x2C	; 44
  8e:	b1 e0       	ldi	r27, 0x01	; 1
  90:	01 c0       	rjmp	.+2      	; 0x94 <.do_clear_bss_start>

00000092 <.do_clear_bss_loop>:
  92:	1d 92       	st	X+, r1

00000094 <.do_clear_bss_start>:
  94:	ae 33       	cpi	r26, 0x3E	; 62
  96:	b2 07       	cpc	r27, r18
  98:	e1 f7       	brne	.-8      	; 0x92 <.do_clear_bss_loop>
  9a:	0e 94 7e 02 	call	0x4fc	; 0x4fc <main>
  9e:	0c 94 d5 06 	jmp	0xdaa	; 0xdaa <_exit>

000000a2 <__bad_interrupt>:
  a2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a6 <BAR_init>:
};

 
void BAR_init(void)
{
	GPIO_config_output(&DDRC, SEGMENT_LATCH);
  a6:	60 e0       	ldi	r22, 0x00	; 0
  a8:	87 e2       	ldi	r24, 0x27	; 39
  aa:	90 e0       	ldi	r25, 0x00	; 0
  ac:	0e 94 b6 01 	call	0x36c	; 0x36c <GPIO_config_output>
	GPIO_config_output(&DDRC, SEGMENT_CLK);
  b0:	62 e0       	ldi	r22, 0x02	; 2
  b2:	87 e2       	ldi	r24, 0x27	; 39
  b4:	90 e0       	ldi	r25, 0x00	; 0
  b6:	0e 94 b6 01 	call	0x36c	; 0x36c <GPIO_config_output>
	GPIO_config_output(&DDRB, SEGMENT_DATA);
  ba:	65 e0       	ldi	r22, 0x05	; 5
  bc:	84 e2       	ldi	r24, 0x24	; 36
  be:	90 e0       	ldi	r25, 0x00	; 0
  c0:	0e 94 b6 01 	call	0x36c	; 0x36c <GPIO_config_output>
  c4:	08 95       	ret

000000c6 <BAR_update_shift_regs>:
}

void BAR_update_shift_regs(uint16_t maxVal, uint16_t currentVal, uint8_t position)
{
  c6:	8f 92       	push	r8
  c8:	9f 92       	push	r9
  ca:	af 92       	push	r10
  cc:	bf 92       	push	r11
  ce:	ef 92       	push	r14
  d0:	ff 92       	push	r15
  d2:	1f 93       	push	r17
  d4:	cf 93       	push	r28
  d6:	df 93       	push	r29
  d8:	7c 01       	movw	r14, r24
	uint8_t bar_value;
	uint8_t bit_number;
	uint8_t percentVal;
	position = BAR_position[position];
  da:	e4 2f       	mov	r30, r20
  dc:	f0 e0       	ldi	r31, 0x00	; 0
  de:	e0 50       	subi	r30, 0x00	; 0
  e0:	ff 4f       	sbci	r31, 0xFF	; 255
  e2:	d0 81       	ld	r29, Z
	percentVal = round((currentVal/(float)maxVal)*100);
  e4:	80 e0       	ldi	r24, 0x00	; 0
  e6:	90 e0       	ldi	r25, 0x00	; 0
  e8:	0e 94 2f 05 	call	0xa5e	; 0xa5e <__floatunsisf>
  ec:	4b 01       	movw	r8, r22
  ee:	5c 01       	movw	r10, r24
  f0:	b7 01       	movw	r22, r14
  f2:	80 e0       	ldi	r24, 0x00	; 0
  f4:	90 e0       	ldi	r25, 0x00	; 0
  f6:	0e 94 2f 05 	call	0xa5e	; 0xa5e <__floatunsisf>
  fa:	9b 01       	movw	r18, r22
  fc:	ac 01       	movw	r20, r24
  fe:	c5 01       	movw	r24, r10
 100:	b4 01       	movw	r22, r8
 102:	0e 94 87 04 	call	0x90e	; 0x90e <__divsf3>
 106:	20 e0       	ldi	r18, 0x00	; 0
 108:	30 e0       	ldi	r19, 0x00	; 0
 10a:	48 ec       	ldi	r20, 0xC8	; 200
 10c:	52 e4       	ldi	r21, 0x42	; 66
 10e:	0e 94 e6 05 	call	0xbcc	; 0xbcc <__mulsf3>
 112:	0e 94 53 06 	call	0xca6	; 0xca6 <round>
 116:	0e 94 00 05 	call	0xa00	; 0xa00 <__fixunssfsi>
	if(percentVal > 100)
 11a:	65 36       	cpi	r22, 0x65	; 101
 11c:	18 f0       	brcs	.+6      	; 0x124 <BAR_update_shift_regs+0x5e>
	{
		bar_value = led_state[0];
 11e:	10 91 02 01 	lds	r17, 0x0102	; 0x800102 <led_state>
 122:	35 c0       	rjmp	.+106    	; 0x18e <BAR_update_shift_regs+0xc8>
	}
	else if(percentVal > 88 & percentVal <= 100)
 124:	87 ea       	ldi	r24, 0xA7	; 167
 126:	86 0f       	add	r24, r22
 128:	8c 30       	cpi	r24, 0x0C	; 12
 12a:	18 f4       	brcc	.+6      	; 0x132 <BAR_update_shift_regs+0x6c>
	{
		bar_value = led_state[1];
 12c:	10 91 03 01 	lds	r17, 0x0103	; 0x800103 <led_state+0x1>
 130:	2e c0       	rjmp	.+92     	; 0x18e <BAR_update_shift_regs+0xc8>
	}
	else if(percentVal > 76 & percentVal <= 88)
 132:	83 eb       	ldi	r24, 0xB3	; 179
 134:	86 0f       	add	r24, r22
 136:	8c 30       	cpi	r24, 0x0C	; 12
 138:	18 f4       	brcc	.+6      	; 0x140 <BAR_update_shift_regs+0x7a>
	{
		bar_value = led_state[2];
 13a:	10 91 04 01 	lds	r17, 0x0104	; 0x800104 <led_state+0x2>
 13e:	27 c0       	rjmp	.+78     	; 0x18e <BAR_update_shift_regs+0xc8>
	}
	else if(percentVal > 64 & percentVal <= 76)
 140:	8f eb       	ldi	r24, 0xBF	; 191
 142:	86 0f       	add	r24, r22
 144:	8c 30       	cpi	r24, 0x0C	; 12
 146:	18 f4       	brcc	.+6      	; 0x14e <BAR_update_shift_regs+0x88>
	{
		bar_value = led_state[3];
 148:	10 91 05 01 	lds	r17, 0x0105	; 0x800105 <led_state+0x3>
 14c:	20 c0       	rjmp	.+64     	; 0x18e <BAR_update_shift_regs+0xc8>
	}
	else if(percentVal > 52 & percentVal <= 64)
 14e:	8b ec       	ldi	r24, 0xCB	; 203
 150:	86 0f       	add	r24, r22
 152:	8c 30       	cpi	r24, 0x0C	; 12
 154:	18 f4       	brcc	.+6      	; 0x15c <BAR_update_shift_regs+0x96>
	{
		bar_value = led_state[4];
 156:	10 91 06 01 	lds	r17, 0x0106	; 0x800106 <led_state+0x4>
 15a:	19 c0       	rjmp	.+50     	; 0x18e <BAR_update_shift_regs+0xc8>
	}
	else if(percentVal > 40 & percentVal <= 52)
 15c:	87 ed       	ldi	r24, 0xD7	; 215
 15e:	86 0f       	add	r24, r22
 160:	8c 30       	cpi	r24, 0x0C	; 12
 162:	18 f4       	brcc	.+6      	; 0x16a <BAR_update_shift_regs+0xa4>
	{
		bar_value = led_state[5];
 164:	10 91 07 01 	lds	r17, 0x0107	; 0x800107 <led_state+0x5>
 168:	12 c0       	rjmp	.+36     	; 0x18e <BAR_update_shift_regs+0xc8>
	}
	else if(percentVal > 28 & percentVal <= 40)
 16a:	83 ee       	ldi	r24, 0xE3	; 227
 16c:	86 0f       	add	r24, r22
 16e:	8c 30       	cpi	r24, 0x0C	; 12
 170:	18 f4       	brcc	.+6      	; 0x178 <BAR_update_shift_regs+0xb2>
	{
		bar_value = led_state[6];
 172:	10 91 08 01 	lds	r17, 0x0108	; 0x800108 <led_state+0x6>
 176:	0b c0       	rjmp	.+22     	; 0x18e <BAR_update_shift_regs+0xc8>
	}
	else if(percentVal > 16 & percentVal <= 28)
 178:	8f ee       	ldi	r24, 0xEF	; 239
 17a:	86 0f       	add	r24, r22
 17c:	8c 30       	cpi	r24, 0x0C	; 12
 17e:	18 f4       	brcc	.+6      	; 0x186 <BAR_update_shift_regs+0xc0>
	{
		bar_value = led_state[7];
 180:	10 91 09 01 	lds	r17, 0x0109	; 0x800109 <led_state+0x7>
 184:	04 c0       	rjmp	.+8      	; 0x18e <BAR_update_shift_regs+0xc8>
	}
	else if(percentVal <= 16)
 186:	61 31       	cpi	r22, 0x11	; 17
 188:	10 f4       	brcc	.+4      	; 0x18e <BAR_update_shift_regs+0xc8>
	{
		bar_value = led_state[8];
 18a:	10 91 0a 01 	lds	r17, 0x010A	; 0x80010a <led_state+0x8>
	}
	
	GPIO_write_low(&PORTC, SEGMENT_LATCH);
 18e:	60 e0       	ldi	r22, 0x00	; 0
 190:	88 e2       	ldi	r24, 0x28	; 40
 192:	90 e0       	ldi	r25, 0x00	; 0
 194:	0e 94 c2 01 	call	0x384	; 0x384 <GPIO_write_low>
	GPIO_write_low(&PORTC, SEGMENT_CLK);
 198:	62 e0       	ldi	r22, 0x02	; 2
 19a:	88 e2       	ldi	r24, 0x28	; 40
 19c:	90 e0       	ldi	r25, 0x00	; 0
 19e:	0e 94 c2 01 	call	0x384	; 0x384 <GPIO_write_low>
	GPIO_write_low(&PORTB, SEGMENT_DATA);
 1a2:	65 e0       	ldi	r22, 0x05	; 5
 1a4:	85 e2       	ldi	r24, 0x25	; 37
 1a6:	90 e0       	ldi	r25, 0x00	; 0
 1a8:	0e 94 c2 01 	call	0x384	; 0x384 <GPIO_write_low>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 1ac:	85 e0       	ldi	r24, 0x05	; 5
 1ae:	8a 95       	dec	r24
 1b0:	f1 f7       	brne	.-4      	; 0x1ae <BAR_update_shift_regs+0xe8>
 1b2:	00 00       	nop
 1b4:	c8 e0       	ldi	r28, 0x08	; 8
	
	_delay_us(1);
	
	for(bit_number = 0; bit_number < 8; bit_number++)
	{
		if((bar_value & 1) == 0)
 1b6:	10 fd       	sbrc	r17, 0
 1b8:	06 c0       	rjmp	.+12     	; 0x1c6 <BAR_update_shift_regs+0x100>
		{
			GPIO_write_low(&PORTB, SEGMENT_DATA);	
 1ba:	65 e0       	ldi	r22, 0x05	; 5
 1bc:	85 e2       	ldi	r24, 0x25	; 37
 1be:	90 e0       	ldi	r25, 0x00	; 0
 1c0:	0e 94 c2 01 	call	0x384	; 0x384 <GPIO_write_low>
 1c4:	05 c0       	rjmp	.+10     	; 0x1d0 <BAR_update_shift_regs+0x10a>
		}
		else
		{
			GPIO_write_high(&PORTB, SEGMENT_DATA);
 1c6:	65 e0       	ldi	r22, 0x05	; 5
 1c8:	85 e2       	ldi	r24, 0x25	; 37
 1ca:	90 e0       	ldi	r25, 0x00	; 0
 1cc:	0e 94 cf 01 	call	0x39e	; 0x39e <GPIO_write_high>
 1d0:	85 e0       	ldi	r24, 0x05	; 5
 1d2:	8a 95       	dec	r24
 1d4:	f1 f7       	brne	.-4      	; 0x1d2 <BAR_update_shift_regs+0x10c>
 1d6:	00 00       	nop
		}
		_delay_us(1);
		
		GPIO_write_high(&PORTC, SEGMENT_CLK);
 1d8:	62 e0       	ldi	r22, 0x02	; 2
 1da:	88 e2       	ldi	r24, 0x28	; 40
 1dc:	90 e0       	ldi	r25, 0x00	; 0
 1de:	0e 94 cf 01 	call	0x39e	; 0x39e <GPIO_write_high>
 1e2:	85 e0       	ldi	r24, 0x05	; 5
 1e4:	8a 95       	dec	r24
 1e6:	f1 f7       	brne	.-4      	; 0x1e4 <BAR_update_shift_regs+0x11e>
 1e8:	00 00       	nop
		
		_delay_us(1);
		
		GPIO_write_low(&PORTC, SEGMENT_CLK);
 1ea:	62 e0       	ldi	r22, 0x02	; 2
 1ec:	88 e2       	ldi	r24, 0x28	; 40
 1ee:	90 e0       	ldi	r25, 0x00	; 0
 1f0:	0e 94 c2 01 	call	0x384	; 0x384 <GPIO_write_low>
		
		bar_value = bar_value >> 1;
 1f4:	16 95       	lsr	r17
 1f6:	c1 50       	subi	r28, 0x01	; 1
	GPIO_write_low(&PORTC, SEGMENT_CLK);
	GPIO_write_low(&PORTB, SEGMENT_DATA);
	
	_delay_us(1);
	
	for(bit_number = 0; bit_number < 8; bit_number++)
 1f8:	f1 f6       	brne	.-68     	; 0x1b6 <BAR_update_shift_regs+0xf0>
 1fa:	c8 e0       	ldi	r28, 0x08	; 8
		bar_value = bar_value >> 1;
	}
	for (bit_number = 0; bit_number < 8; bit_number++)
	{
		// Output DATA value (bit 0 of "position")
		if ((position & 1) == 0)
 1fc:	d0 fd       	sbrc	r29, 0
 1fe:	06 c0       	rjmp	.+12     	; 0x20c <BAR_update_shift_regs+0x146>
		{
			GPIO_write_low(&PORTB, SEGMENT_DATA);
 200:	65 e0       	ldi	r22, 0x05	; 5
 202:	85 e2       	ldi	r24, 0x25	; 37
 204:	90 e0       	ldi	r25, 0x00	; 0
 206:	0e 94 c2 01 	call	0x384	; 0x384 <GPIO_write_low>
 20a:	05 c0       	rjmp	.+10     	; 0x216 <BAR_update_shift_regs+0x150>
		}
		else
		{
			GPIO_write_high(&PORTB, SEGMENT_DATA);
 20c:	65 e0       	ldi	r22, 0x05	; 5
 20e:	85 e2       	ldi	r24, 0x25	; 37
 210:	90 e0       	ldi	r25, 0x00	; 0
 212:	0e 94 cf 01 	call	0x39e	; 0x39e <GPIO_write_high>
 216:	85 e0       	ldi	r24, 0x05	; 5
 218:	8a 95       	dec	r24
 21a:	f1 f7       	brne	.-4      	; 0x218 <BAR_update_shift_regs+0x152>
 21c:	00 00       	nop
		}
		// Wait 1 us
		_delay_us(1);
		// Pull CLK high
		GPIO_write_high(&PORTC, SEGMENT_CLK);
 21e:	62 e0       	ldi	r22, 0x02	; 2
 220:	88 e2       	ldi	r24, 0x28	; 40
 222:	90 e0       	ldi	r25, 0x00	; 0
 224:	0e 94 cf 01 	call	0x39e	; 0x39e <GPIO_write_high>
 228:	85 e0       	ldi	r24, 0x05	; 5
 22a:	8a 95       	dec	r24
 22c:	f1 f7       	brne	.-4      	; 0x22a <BAR_update_shift_regs+0x164>
 22e:	00 00       	nop
		// Wait 1 us
		_delay_us(1);
		// Pull CLK low
		GPIO_write_low(&PORTC, SEGMENT_CLK);
 230:	62 e0       	ldi	r22, 0x02	; 2
 232:	88 e2       	ldi	r24, 0x28	; 40
 234:	90 e0       	ldi	r25, 0x00	; 0
 236:	0e 94 c2 01 	call	0x384	; 0x384 <GPIO_write_low>
		    
		// Shift "position"
		position = position >> 1;
 23a:	d6 95       	lsr	r29
 23c:	c1 50       	subi	r28, 0x01	; 1
		
		GPIO_write_low(&PORTC, SEGMENT_CLK);
		
		bar_value = bar_value >> 1;
	}
	for (bit_number = 0; bit_number < 8; bit_number++)
 23e:	f1 f6       	brne	.-68     	; 0x1fc <BAR_update_shift_regs+0x136>
		// Shift "position"
		position = position >> 1;
	}

	// Pull LATCH high
	GPIO_write_high(&PORTC, SEGMENT_LATCH);
 240:	60 e0       	ldi	r22, 0x00	; 0
 242:	88 e2       	ldi	r24, 0x28	; 40
 244:	90 e0       	ldi	r25, 0x00	; 0
 246:	0e 94 cf 01 	call	0x39e	; 0x39e <GPIO_write_high>
 24a:	85 e0       	ldi	r24, 0x05	; 5
 24c:	8a 95       	dec	r24
 24e:	f1 f7       	brne	.-4      	; 0x24c <BAR_update_shift_regs+0x186>
 250:	00 00       	nop
	// Wait 1 us
	_delay_us(1);
		
 252:	df 91       	pop	r29
 254:	cf 91       	pop	r28
 256:	1f 91       	pop	r17
 258:	ff 90       	pop	r15
 25a:	ef 90       	pop	r14
 25c:	bf 90       	pop	r11
 25e:	af 90       	pop	r10
 260:	9f 90       	pop	r9
 262:	8f 90       	pop	r8
 264:	08 95       	ret

00000266 <deltatime_init>:
uint16_t us_deltatime = 0;


void deltatime_init(void)
{
	PCINT16_change_level_enable();
 266:	e9 e6       	ldi	r30, 0x69	; 105
 268:	f0 e0       	ldi	r31, 0x00	; 0
 26a:	80 81       	ld	r24, Z
 26c:	81 60       	ori	r24, 0x01	; 1
 26e:	80 83       	st	Z, r24
 270:	e8 e6       	ldi	r30, 0x68	; 104
 272:	f0 e0       	ldi	r31, 0x00	; 0
 274:	80 81       	ld	r24, Z
 276:	84 60       	ori	r24, 0x04	; 4
 278:	80 83       	st	Z, r24
 27a:	08 95       	ret

0000027c <count_deltatime>:
}

uint16_t count_deltatime(volatile uint8_t *reg_name, uint8_t pin_num)
{
 27c:	1f 93       	push	r17
 27e:	cf 93       	push	r28
 280:	df 93       	push	r29
 282:	ec 01       	movw	r28, r24
 284:	16 2f       	mov	r17, r22
	// sends 10 us pulse to trigger
	GPIO_write_high(&*reg_name, pin_num);
 286:	0e 94 cf 01 	call	0x39e	; 0x39e <GPIO_write_high>
 28a:	85 e3       	ldi	r24, 0x35	; 53
 28c:	8a 95       	dec	r24
 28e:	f1 f7       	brne	.-4      	; 0x28c <count_deltatime+0x10>
 290:	00 00       	nop
	_delay_us(10);
	GPIO_write_low(&*reg_name, pin_num);
 292:	61 2f       	mov	r22, r17
 294:	ce 01       	movw	r24, r28
 296:	0e 94 c2 01 	call	0x384	; 0x384 <GPIO_write_low>
	// Interruption start when state is changed
	PCINT16_interrupt_enable();
 29a:	ed e6       	ldi	r30, 0x6D	; 109
 29c:	f0 e0       	ldi	r31, 0x00	; 0
 29e:	80 81       	ld	r24, Z
 2a0:	81 60       	ori	r24, 0x01	; 1
 2a2:	80 83       	st	Z, r24
	sei();
 2a4:	78 94       	sei
	
	
	return us_deltatime;
	PCINT16_interrupt_disable();
		
}
 2a6:	80 91 2c 01 	lds	r24, 0x012C	; 0x80012c <__data_end>
 2aa:	90 91 2d 01 	lds	r25, 0x012D	; 0x80012d <__data_end+0x1>
 2ae:	df 91       	pop	r29
 2b0:	cf 91       	pop	r28
 2b2:	1f 91       	pop	r17
 2b4:	08 95       	ret

000002b6 <__vector_5>:

ISR(PCINT2_vect)
{
 2b6:	1f 92       	push	r1
 2b8:	0f 92       	push	r0
 2ba:	0f b6       	in	r0, 0x3f	; 63
 2bc:	0f 92       	push	r0
 2be:	11 24       	eor	r1, r1
 2c0:	8f 93       	push	r24
 2c2:	9f 93       	push	r25
 2c4:	ef 93       	push	r30
 2c6:	ff 93       	push	r31
	// condition for "rising edge"
	if(PIND & (1 << echo))
 2c8:	48 9b       	sbis	0x09, 0	; 9
 2ca:	10 c0       	rjmp	.+32     	; 0x2ec <__vector_5+0x36>
	{
		//stopwatch start
		currentTime = 0;
 2cc:	10 92 2f 01 	sts	0x012F, r1	; 0x80012f <currentTime+0x1>
 2d0:	10 92 2e 01 	sts	0x012E, r1	; 0x80012e <currentTime>
		TIM0_overflow_16u();
 2d4:	85 b5       	in	r24, 0x25	; 37
 2d6:	89 7f       	andi	r24, 0xF9	; 249
 2d8:	85 bd       	out	0x25, r24	; 37
 2da:	85 b5       	in	r24, 0x25	; 37
 2dc:	81 60       	ori	r24, 0x01	; 1
 2de:	85 bd       	out	0x25, r24	; 37
		TIM0_overflow_interrupt_enable();
 2e0:	ee e6       	ldi	r30, 0x6E	; 110
 2e2:	f0 e0       	ldi	r31, 0x00	; 0
 2e4:	80 81       	ld	r24, Z
 2e6:	81 60       	ori	r24, 0x01	; 1
 2e8:	80 83       	st	Z, r24
 2ea:	13 c0       	rjmp	.+38     	; 0x312 <__vector_5+0x5c>
	}
	// condition for "falling edge"
	else
	{
		// stopwatch disabled and currentTime is set to 0
		TIM0_overflow_interrupt_disable();
 2ec:	ee e6       	ldi	r30, 0x6E	; 110
 2ee:	f0 e0       	ldi	r31, 0x00	; 0
 2f0:	80 81       	ld	r24, Z
 2f2:	8e 7f       	andi	r24, 0xFE	; 254
 2f4:	80 83       	st	Z, r24
		us_deltatime = currentTime*16;
 2f6:	80 91 2e 01 	lds	r24, 0x012E	; 0x80012e <currentTime>
 2fa:	90 91 2f 01 	lds	r25, 0x012F	; 0x80012f <currentTime+0x1>
 2fe:	82 95       	swap	r24
 300:	92 95       	swap	r25
 302:	90 7f       	andi	r25, 0xF0	; 240
 304:	98 27       	eor	r25, r24
 306:	80 7f       	andi	r24, 0xF0	; 240
 308:	98 27       	eor	r25, r24
 30a:	90 93 2d 01 	sts	0x012D, r25	; 0x80012d <__data_end+0x1>
 30e:	80 93 2c 01 	sts	0x012C, r24	; 0x80012c <__data_end>
	}
}
 312:	ff 91       	pop	r31
 314:	ef 91       	pop	r30
 316:	9f 91       	pop	r25
 318:	8f 91       	pop	r24
 31a:	0f 90       	pop	r0
 31c:	0f be       	out	0x3f, r0	; 63
 31e:	0f 90       	pop	r0
 320:	1f 90       	pop	r1
 322:	18 95       	reti

00000324 <__vector_16>:

// timer/counter - stopwatch
ISR(TIMER0_OVF_vect)
{
 324:	1f 92       	push	r1
 326:	0f 92       	push	r0
 328:	0f b6       	in	r0, 0x3f	; 63
 32a:	0f 92       	push	r0
 32c:	11 24       	eor	r1, r1
 32e:	2f 93       	push	r18
 330:	8f 93       	push	r24
 332:	9f 93       	push	r25
	currentTime++;
 334:	80 91 2e 01 	lds	r24, 0x012E	; 0x80012e <currentTime>
 338:	90 91 2f 01 	lds	r25, 0x012F	; 0x80012f <currentTime+0x1>
 33c:	01 96       	adiw	r24, 0x01	; 1
	// resets when time is over 25ms - max. sensitivity
	if(currentTime > 1563)
 33e:	8c 31       	cpi	r24, 0x1C	; 28
 340:	26 e0       	ldi	r18, 0x06	; 6
 342:	92 07       	cpc	r25, r18
 344:	28 f4       	brcc	.+10     	; 0x350 <__vector_16+0x2c>
}

// timer/counter - stopwatch
ISR(TIMER0_OVF_vect)
{
	currentTime++;
 346:	90 93 2f 01 	sts	0x012F, r25	; 0x80012f <currentTime+0x1>
 34a:	80 93 2e 01 	sts	0x012E, r24	; 0x80012e <currentTime>
 34e:	06 c0       	rjmp	.+12     	; 0x35c <__vector_16+0x38>
	// resets when time is over 25ms - max. sensitivity
	if(currentTime > 1563)
	{
		currentTime = 1563;
 350:	8b e1       	ldi	r24, 0x1B	; 27
 352:	96 e0       	ldi	r25, 0x06	; 6
 354:	90 93 2f 01 	sts	0x012F, r25	; 0x80012f <currentTime+0x1>
 358:	80 93 2e 01 	sts	0x012E, r24	; 0x80012e <currentTime>
	}	
}
 35c:	9f 91       	pop	r25
 35e:	8f 91       	pop	r24
 360:	2f 91       	pop	r18
 362:	0f 90       	pop	r0
 364:	0f be       	out	0x3f, r0	; 63
 366:	0f 90       	pop	r0
 368:	1f 90       	pop	r1
 36a:	18 95       	reti

0000036c <GPIO_config_output>:
/*--------------------------------------------------------------------*/
void GPIO_config_input_pullup(volatile uint8_t *reg_name, uint8_t pin_num)
{
    *reg_name = *reg_name & ~(1<<pin_num);  // Data Direction Register
    *reg_name++;                    // Change pointer to Data Register
    *reg_name = *reg_name | (1<<pin_num);   // Data Register
 36c:	fc 01       	movw	r30, r24
 36e:	40 81       	ld	r20, Z
 370:	21 e0       	ldi	r18, 0x01	; 1
 372:	30 e0       	ldi	r19, 0x00	; 0
 374:	02 c0       	rjmp	.+4      	; 0x37a <GPIO_config_output+0xe>
 376:	22 0f       	add	r18, r18
 378:	33 1f       	adc	r19, r19
 37a:	6a 95       	dec	r22
 37c:	e2 f7       	brpl	.-8      	; 0x376 <GPIO_config_output+0xa>
 37e:	24 2b       	or	r18, r20
 380:	20 83       	st	Z, r18
 382:	08 95       	ret

00000384 <GPIO_write_low>:
}

/*--------------------------------------------------------------------*/
void GPIO_write_low(volatile uint8_t *reg_name, uint8_t pin_num)
{
 384:	fc 01       	movw	r30, r24
    *reg_name = *reg_name & ~(1<<pin_num);
 386:	90 81       	ld	r25, Z
 388:	21 e0       	ldi	r18, 0x01	; 1
 38a:	30 e0       	ldi	r19, 0x00	; 0
 38c:	02 c0       	rjmp	.+4      	; 0x392 <GPIO_write_low+0xe>
 38e:	22 0f       	add	r18, r18
 390:	33 1f       	adc	r19, r19
 392:	6a 95       	dec	r22
 394:	e2 f7       	brpl	.-8      	; 0x38e <GPIO_write_low+0xa>
 396:	20 95       	com	r18
 398:	29 23       	and	r18, r25
 39a:	20 83       	st	Z, r18
 39c:	08 95       	ret

0000039e <GPIO_write_high>:

/*--------------------------------------------------------------------*/
/* GPIO_write_high */
void GPIO_write_high(volatile uint8_t *reg_name, uint8_t pin_num)
{
	*reg_name |= (1<<pin_num);
 39e:	fc 01       	movw	r30, r24
 3a0:	40 81       	ld	r20, Z
 3a2:	21 e0       	ldi	r18, 0x01	; 1
 3a4:	30 e0       	ldi	r19, 0x00	; 0
 3a6:	02 c0       	rjmp	.+4      	; 0x3ac <GPIO_write_high+0xe>
 3a8:	22 0f       	add	r18, r18
 3aa:	33 1f       	adc	r19, r19
 3ac:	6a 95       	dec	r22
 3ae:	e2 f7       	brpl	.-8      	; 0x3a8 <GPIO_write_high+0xa>
 3b0:	24 2b       	or	r18, r20
 3b2:	20 83       	st	Z, r18
 3b4:	08 95       	ret

000003b6 <toggle_e>:

    while ( (c = pgm_read_byte(progmem_s++)) )
    {
        lcd_putc(c);
    }
}/* lcd_puts_p */
 3b6:	29 9a       	sbi	0x05, 1	; 5
 3b8:	85 e0       	ldi	r24, 0x05	; 5
 3ba:	8a 95       	dec	r24
 3bc:	f1 f7       	brne	.-4      	; 0x3ba <toggle_e+0x4>
 3be:	00 00       	nop
 3c0:	29 98       	cbi	0x05, 1	; 5
 3c2:	08 95       	ret

000003c4 <lcd_write>:
 3c4:	cf 93       	push	r28
 3c6:	c8 2f       	mov	r28, r24
 3c8:	66 23       	and	r22, r22
 3ca:	11 f0       	breq	.+4      	; 0x3d0 <lcd_write+0xc>
 3cc:	28 9a       	sbi	0x05, 0	; 5
 3ce:	01 c0       	rjmp	.+2      	; 0x3d2 <lcd_write+0xe>
 3d0:	28 98       	cbi	0x05, 0	; 5
 3d2:	54 9a       	sbi	0x0a, 4	; 10
 3d4:	55 9a       	sbi	0x0a, 5	; 10
 3d6:	56 9a       	sbi	0x0a, 6	; 10
 3d8:	57 9a       	sbi	0x0a, 7	; 10
 3da:	5f 98       	cbi	0x0b, 7	; 11
 3dc:	5e 98       	cbi	0x0b, 6	; 11
 3de:	5d 98       	cbi	0x0b, 5	; 11
 3e0:	5c 98       	cbi	0x0b, 4	; 11
 3e2:	cc 23       	and	r28, r28
 3e4:	0c f4       	brge	.+2      	; 0x3e8 <lcd_write+0x24>
 3e6:	5f 9a       	sbi	0x0b, 7	; 11
 3e8:	c6 fd       	sbrc	r28, 6
 3ea:	5e 9a       	sbi	0x0b, 6	; 11
 3ec:	c5 fd       	sbrc	r28, 5
 3ee:	5d 9a       	sbi	0x0b, 5	; 11
 3f0:	c4 fd       	sbrc	r28, 4
 3f2:	5c 9a       	sbi	0x0b, 4	; 11
 3f4:	0e 94 db 01 	call	0x3b6	; 0x3b6 <toggle_e>
 3f8:	5f 98       	cbi	0x0b, 7	; 11
 3fa:	5e 98       	cbi	0x0b, 6	; 11
 3fc:	5d 98       	cbi	0x0b, 5	; 11
 3fe:	5c 98       	cbi	0x0b, 4	; 11
 400:	c3 fd       	sbrc	r28, 3
 402:	5f 9a       	sbi	0x0b, 7	; 11
 404:	c2 fd       	sbrc	r28, 2
 406:	5e 9a       	sbi	0x0b, 6	; 11
 408:	c1 fd       	sbrc	r28, 1
 40a:	5d 9a       	sbi	0x0b, 5	; 11
 40c:	c0 fd       	sbrc	r28, 0
 40e:	5c 9a       	sbi	0x0b, 4	; 11
 410:	0e 94 db 01 	call	0x3b6	; 0x3b6 <toggle_e>
 414:	5c 9a       	sbi	0x0b, 4	; 11
 416:	5d 9a       	sbi	0x0b, 5	; 11
 418:	5e 9a       	sbi	0x0b, 6	; 11
 41a:	5f 9a       	sbi	0x0b, 7	; 11
 41c:	87 eb       	ldi	r24, 0xB7	; 183
 41e:	9b e0       	ldi	r25, 0x0B	; 11
 420:	01 97       	sbiw	r24, 0x01	; 1
 422:	f1 f7       	brne	.-4      	; 0x420 <__LOCK_REGION_LENGTH__+0x20>
 424:	00 c0       	rjmp	.+0      	; 0x426 <__LOCK_REGION_LENGTH__+0x26>
 426:	00 00       	nop
 428:	cf 91       	pop	r28
 42a:	08 95       	ret

0000042c <lcd_command>:
 42c:	60 e0       	ldi	r22, 0x00	; 0
 42e:	0e 94 e2 01 	call	0x3c4	; 0x3c4 <lcd_write>
 432:	08 95       	ret

00000434 <lcd_gotoxy>:
 434:	61 11       	cpse	r22, r1
 436:	04 c0       	rjmp	.+8      	; 0x440 <lcd_gotoxy+0xc>
 438:	80 58       	subi	r24, 0x80	; 128
 43a:	0e 94 16 02 	call	0x42c	; 0x42c <lcd_command>
 43e:	08 95       	ret
 440:	80 54       	subi	r24, 0x40	; 64
 442:	0e 94 16 02 	call	0x42c	; 0x42c <lcd_command>
 446:	08 95       	ret

00000448 <lcd_clrscr>:
 448:	81 e0       	ldi	r24, 0x01	; 1
 44a:	0e 94 16 02 	call	0x42c	; 0x42c <lcd_command>
 44e:	08 95       	ret

00000450 <lcd_putc>:
 450:	61 e0       	ldi	r22, 0x01	; 1
 452:	0e 94 e2 01 	call	0x3c4	; 0x3c4 <lcd_write>
 456:	08 95       	ret

00000458 <lcd_puts>:
 458:	cf 93       	push	r28
 45a:	df 93       	push	r29
 45c:	ec 01       	movw	r28, r24
 45e:	21 96       	adiw	r28, 0x01	; 1
 460:	fc 01       	movw	r30, r24
 462:	80 81       	ld	r24, Z
 464:	88 23       	and	r24, r24
 466:	29 f0       	breq	.+10     	; 0x472 <lcd_puts+0x1a>
 468:	0e 94 28 02 	call	0x450	; 0x450 <lcd_putc>
 46c:	89 91       	ld	r24, Y+
 46e:	81 11       	cpse	r24, r1
 470:	fb cf       	rjmp	.-10     	; 0x468 <lcd_puts+0x10>
 472:	df 91       	pop	r29
 474:	cf 91       	pop	r28
 476:	08 95       	ret

00000478 <lcd_init>:
*                  LCD_DISP_ON_CURSOR      display on, cursor on
*                  LCD_DISP_CURSOR_BLINK   display on, cursor on flashing
*  Returns:  none
*************************************************************************/
void lcd_init(uint8_t dispAttr)
{
 478:	cf 93       	push	r28
 47a:	c8 2f       	mov	r28, r24
        DDR(LCD_E_PORT)     |= _BV(LCD_E_PIN);
    }
    else
    {
        /* configure all port bits as output (LCD data and control lines on different ports */
        DDR(LCD_RS_PORT)    |= _BV(LCD_RS_PIN);
 47c:	20 9a       	sbi	0x04, 0	; 4
        DDR(LCD_RW_PORT)    |= _BV(LCD_RW_PIN);
 47e:	55 9a       	sbi	0x0a, 5	; 10
        DDR(LCD_E_PORT)     |= _BV(LCD_E_PIN);
 480:	21 9a       	sbi	0x04, 1	; 4
        DDR(LCD_DATA0_PORT) |= _BV(LCD_DATA0_PIN);
 482:	54 9a       	sbi	0x0a, 4	; 10
        DDR(LCD_DATA1_PORT) |= _BV(LCD_DATA1_PIN);
 484:	55 9a       	sbi	0x0a, 5	; 10
        DDR(LCD_DATA2_PORT) |= _BV(LCD_DATA2_PIN);
 486:	56 9a       	sbi	0x0a, 6	; 10
        DDR(LCD_DATA3_PORT) |= _BV(LCD_DATA3_PIN);
 488:	57 9a       	sbi	0x0a, 7	; 10
 48a:	8f ef       	ldi	r24, 0xFF	; 255
 48c:	99 ef       	ldi	r25, 0xF9	; 249
 48e:	01 97       	sbiw	r24, 0x01	; 1
 490:	f1 f7       	brne	.-4      	; 0x48e <lcd_init+0x16>
 492:	00 c0       	rjmp	.+0      	; 0x494 <lcd_init+0x1c>
 494:	00 00       	nop
    }
    delay(LCD_DELAY_BOOTUP); /* wait 16ms or more after power-on       */

    /* initial write to lcd is 8bit */
    LCD_DATA1_PORT |= _BV(LCD_DATA1_PIN); // LCD_FUNCTION>>4;
 496:	5d 9a       	sbi	0x0b, 5	; 11
    LCD_DATA0_PORT |= _BV(LCD_DATA0_PIN); // LCD_FUNCTION_8BIT>>4;
 498:	5c 9a       	sbi	0x0b, 4	; 11
    lcd_e_toggle();
 49a:	0e 94 db 01 	call	0x3b6	; 0x3b6 <toggle_e>
 49e:	8f e1       	ldi	r24, 0x1F	; 31
 4a0:	9e e4       	ldi	r25, 0x4E	; 78
 4a2:	01 97       	sbiw	r24, 0x01	; 1
 4a4:	f1 f7       	brne	.-4      	; 0x4a2 <lcd_init+0x2a>
 4a6:	00 c0       	rjmp	.+0      	; 0x4a8 <lcd_init+0x30>
 4a8:	00 00       	nop
    delay(LCD_DELAY_INIT); /* delay, busy flag can't be checked here */

    /* repeat last command */
    lcd_e_toggle();
 4aa:	0e 94 db 01 	call	0x3b6	; 0x3b6 <toggle_e>
 4ae:	8f ef       	ldi	r24, 0xFF	; 255
 4b0:	90 e0       	ldi	r25, 0x00	; 0
 4b2:	01 97       	sbiw	r24, 0x01	; 1
 4b4:	f1 f7       	brne	.-4      	; 0x4b2 <lcd_init+0x3a>
 4b6:	00 c0       	rjmp	.+0      	; 0x4b8 <lcd_init+0x40>
 4b8:	00 00       	nop
    delay(LCD_DELAY_INIT_REP); /* delay, busy flag can't be checked here */

    /* repeat last command a third time */
    lcd_e_toggle();
 4ba:	0e 94 db 01 	call	0x3b6	; 0x3b6 <toggle_e>
 4be:	8f ef       	ldi	r24, 0xFF	; 255
 4c0:	90 e0       	ldi	r25, 0x00	; 0
 4c2:	01 97       	sbiw	r24, 0x01	; 1
 4c4:	f1 f7       	brne	.-4      	; 0x4c2 <lcd_init+0x4a>
 4c6:	00 c0       	rjmp	.+0      	; 0x4c8 <lcd_init+0x50>
 4c8:	00 00       	nop
    delay(LCD_DELAY_INIT_REP); /* delay, busy flag can't be checked here */

    /* now configure for 4bit mode */
    LCD_DATA0_PORT &= ~_BV(LCD_DATA0_PIN); // LCD_FUNCTION_4BIT_1LINE>>4
 4ca:	5c 98       	cbi	0x0b, 4	; 11
    lcd_e_toggle();
 4cc:	0e 94 db 01 	call	0x3b6	; 0x3b6 <toggle_e>
 4d0:	8f ef       	ldi	r24, 0xFF	; 255
 4d2:	90 e0       	ldi	r25, 0x00	; 0
 4d4:	01 97       	sbiw	r24, 0x01	; 1
 4d6:	f1 f7       	brne	.-4      	; 0x4d4 <lcd_init+0x5c>
 4d8:	00 c0       	rjmp	.+0      	; 0x4da <lcd_init+0x62>
 4da:	00 00       	nop
    /* Display with KS0073 controller requires special commands for enabling 4 line mode */
    lcd_command(KS0073_EXTENDED_FUNCTION_REGISTER_ON);
    lcd_command(KS0073_4LINES_MODE);
    lcd_command(KS0073_EXTENDED_FUNCTION_REGISTER_OFF);
    #else
    lcd_command(LCD_FUNCTION_DEFAULT); /* function set: display lines  */
 4dc:	88 e2       	ldi	r24, 0x28	; 40
 4de:	0e 94 16 02 	call	0x42c	; 0x42c <lcd_command>
    #endif
    lcd_command(LCD_DISP_OFF);     /* display off                  */
 4e2:	88 e0       	ldi	r24, 0x08	; 8
 4e4:	0e 94 16 02 	call	0x42c	; 0x42c <lcd_command>
    lcd_clrscr();                  /* display clear                */
 4e8:	0e 94 24 02 	call	0x448	; 0x448 <lcd_clrscr>
    lcd_command(LCD_MODE_DEFAULT); /* set entry mode               */
 4ec:	86 e0       	ldi	r24, 0x06	; 6
 4ee:	0e 94 16 02 	call	0x42c	; 0x42c <lcd_command>
    lcd_command(dispAttr);         /* display/cursor control       */
 4f2:	8c 2f       	mov	r24, r28
 4f4:	0e 94 16 02 	call	0x42c	; 0x42c <lcd_command>
}/* lcd_init */
 4f8:	cf 91       	pop	r28
 4fa:	08 95       	ret

000004fc <main>:
uint16_t velocity = 340;

int main(void)
{
	// initialization of display and deltatime ports
	deltatime_init();
 4fc:	0e 94 33 01 	call	0x266	; 0x266 <deltatime_init>
	GPIO_config_output(&DDRB, trigger_front);
 500:	63 e0       	ldi	r22, 0x03	; 3
 502:	84 e2       	ldi	r24, 0x24	; 36
 504:	90 e0       	ldi	r25, 0x00	; 0
 506:	0e 94 b6 01 	call	0x36c	; 0x36c <GPIO_config_output>
	GPIO_config_output(&DDRB, trigger_back);
 50a:	62 e0       	ldi	r22, 0x02	; 2
 50c:	84 e2       	ldi	r24, 0x24	; 36
 50e:	90 e0       	ldi	r25, 0x00	; 0
 510:	0e 94 b6 01 	call	0x36c	; 0x36c <GPIO_config_output>
	GPIO_config_output(&DDRB, PB7);
 514:	67 e0       	ldi	r22, 0x07	; 7
 516:	84 e2       	ldi	r24, 0x24	; 36
 518:	90 e0       	ldi	r25, 0x00	; 0
 51a:	0e 94 b6 01 	call	0x36c	; 0x36c <GPIO_config_output>
	BAR_init();
 51e:	0e 94 53 00 	call	0xa6	; 0xa6 <BAR_init>
	lcd_init(LCD_DISP_ON);
 522:	8c e0       	ldi	r24, 0x0C	; 12
 524:	0e 94 3c 02 	call	0x478	; 0x478 <lcd_init>
	// Default text displayed on LCD
	lcd_gotoxy(0,0);
 528:	60 e0       	ldi	r22, 0x00	; 0
 52a:	80 e0       	ldi	r24, 0x00	; 0
 52c:	0e 94 1a 02 	call	0x434	; 0x434 <lcd_gotoxy>
	lcd_puts("Front:");
 530:	8d e0       	ldi	r24, 0x0D	; 13
 532:	91 e0       	ldi	r25, 0x01	; 1
 534:	0e 94 2c 02 	call	0x458	; 0x458 <lcd_puts>
	lcd_gotoxy(10,0);
 538:	60 e0       	ldi	r22, 0x00	; 0
 53a:	8a e0       	ldi	r24, 0x0A	; 10
 53c:	0e 94 1a 02 	call	0x434	; 0x434 <lcd_gotoxy>
	lcd_puts(">4");
 540:	84 e1       	ldi	r24, 0x14	; 20
 542:	91 e0       	ldi	r25, 0x01	; 1
 544:	0e 94 2c 02 	call	0x458	; 0x458 <lcd_puts>
	lcd_gotoxy(12,0);
 548:	60 e0       	ldi	r22, 0x00	; 0
 54a:	8c e0       	ldi	r24, 0x0C	; 12
 54c:	0e 94 1a 02 	call	0x434	; 0x434 <lcd_gotoxy>
	lcd_putc('m');
 550:	8d e6       	ldi	r24, 0x6D	; 109
 552:	0e 94 28 02 	call	0x450	; 0x450 <lcd_putc>
	
	lcd_gotoxy(0,1);
 556:	61 e0       	ldi	r22, 0x01	; 1
 558:	80 e0       	ldi	r24, 0x00	; 0
 55a:	0e 94 1a 02 	call	0x434	; 0x434 <lcd_gotoxy>
	lcd_puts("Back:");
 55e:	87 e1       	ldi	r24, 0x17	; 23
 560:	91 e0       	ldi	r25, 0x01	; 1
 562:	0e 94 2c 02 	call	0x458	; 0x458 <lcd_puts>
	lcd_gotoxy(10,1);
 566:	61 e0       	ldi	r22, 0x01	; 1
 568:	8a e0       	ldi	r24, 0x0A	; 10
 56a:	0e 94 1a 02 	call	0x434	; 0x434 <lcd_gotoxy>
	lcd_puts(">4");
 56e:	84 e1       	ldi	r24, 0x14	; 20
 570:	91 e0       	ldi	r25, 0x01	; 1
 572:	0e 94 2c 02 	call	0x458	; 0x458 <lcd_puts>
	lcd_gotoxy(12,1);
 576:	61 e0       	ldi	r22, 0x01	; 1
 578:	8c e0       	ldi	r24, 0x0C	; 12
 57a:	0e 94 1a 02 	call	0x434	; 0x434 <lcd_gotoxy>
	lcd_putc('m');
 57e:	8d e6       	ldi	r24, 0x6D	; 109
 580:	0e 94 28 02 	call	0x450	; 0x450 <lcd_putc>
	
	// TIMER 2 enabled
	TIM1_overflow_4ms();
 584:	e1 e8       	ldi	r30, 0x81	; 129
 586:	f0 e0       	ldi	r31, 0x00	; 0
 588:	80 81       	ld	r24, Z
 58a:	89 7f       	andi	r24, 0xF9	; 249
 58c:	80 83       	st	Z, r24
 58e:	80 81       	ld	r24, Z
 590:	81 60       	ori	r24, 0x01	; 1
 592:	80 83       	st	Z, r24
	TIM1_overflow_interrupt_enable();
 594:	ef e6       	ldi	r30, 0x6F	; 111
 596:	f0 e0       	ldi	r31, 0x00	; 0
 598:	80 81       	ld	r24, Z
 59a:	81 60       	ori	r24, 0x01	; 1
 59c:	80 83       	st	Z, r24
	
	sei();
 59e:	78 94       	sei
 5a0:	ff cf       	rjmp	.-2      	; 0x5a0 <main+0xa4>

000005a2 <__vector_13>:
    }
	return 0;
}

ISR(TIMER1_OVF_vect)
{
 5a2:	1f 92       	push	r1
 5a4:	0f 92       	push	r0
 5a6:	0f b6       	in	r0, 0x3f	; 63
 5a8:	0f 92       	push	r0
 5aa:	11 24       	eor	r1, r1
 5ac:	8f 92       	push	r8
 5ae:	9f 92       	push	r9
 5b0:	af 92       	push	r10
 5b2:	bf 92       	push	r11
 5b4:	cf 92       	push	r12
 5b6:	df 92       	push	r13
 5b8:	ef 92       	push	r14
 5ba:	ff 92       	push	r15
 5bc:	2f 93       	push	r18
 5be:	3f 93       	push	r19
 5c0:	4f 93       	push	r20
 5c2:	5f 93       	push	r21
 5c4:	6f 93       	push	r22
 5c6:	7f 93       	push	r23
 5c8:	8f 93       	push	r24
 5ca:	9f 93       	push	r25
 5cc:	af 93       	push	r26
 5ce:	bf 93       	push	r27
 5d0:	ef 93       	push	r30
 5d2:	ff 93       	push	r31
 5d4:	cf 93       	push	r28
 5d6:	df 93       	push	r29
 5d8:	1f 92       	push	r1
 5da:	cd b7       	in	r28, 0x3d	; 61
 5dc:	de b7       	in	r29, 0x3e	; 62

	 //variables used in interruption
	static uint8_t counter = 0;
	static uint8_t k = 0;
	char lcd_string[] = "";
 5de:	19 82       	std	Y+1, r1	; 0x01
	counter++;
 5e0:	80 91 31 01 	lds	r24, 0x0131	; 0x800131 <counter.2242>
 5e4:	8f 5f       	subi	r24, 0xFF	; 255
 5e6:	80 93 31 01 	sts	0x0131, r24	; 0x800131 <counter.2242>
	// cycle repeat once for 60 cycles
	if (counter > 10)
 5ea:	8b 30       	cpi	r24, 0x0B	; 11
 5ec:	08 f4       	brcc	.+2      	; 0x5f0 <__vector_13+0x4e>
 5ee:	6e c1       	rjmp	.+732    	; 0x8cc <__vector_13+0x32a>
	{
		if(k == 0)
 5f0:	80 91 30 01 	lds	r24, 0x0130	; 0x800130 <k.2243>
 5f4:	81 11       	cpse	r24, r1
 5f6:	45 c0       	rjmp	.+138    	; 0x682 <__vector_13+0xe0>
		{
			GPIO_write_high(&PORTB, PB7);
 5f8:	67 e0       	ldi	r22, 0x07	; 7
 5fa:	85 e2       	ldi	r24, 0x25	; 37
 5fc:	90 e0       	ldi	r25, 0x00	; 0
 5fe:	0e 94 cf 01 	call	0x39e	; 0x39e <GPIO_write_high>
			delta_time1 = count_deltatime(&PORTB, trigger_front);
 602:	63 e0       	ldi	r22, 0x03	; 3
 604:	85 e2       	ldi	r24, 0x25	; 37
 606:	90 e0       	ldi	r25, 0x00	; 0
 608:	0e 94 3e 01 	call	0x27c	; 0x27c <count_deltatime>
 60c:	7c 01       	movw	r14, r24
 60e:	90 93 3d 01 	sts	0x013D, r25	; 0x80013d <delta_time1+0x1>
 612:	80 93 3c 01 	sts	0x013C, r24	; 0x80013c <delta_time1>
			front_distance = round((velocity*(delta_time1/(float)10000))/(float)2);
 616:	60 91 0b 01 	lds	r22, 0x010B	; 0x80010b <velocity>
 61a:	70 91 0c 01 	lds	r23, 0x010C	; 0x80010c <velocity+0x1>
 61e:	80 e0       	ldi	r24, 0x00	; 0
 620:	90 e0       	ldi	r25, 0x00	; 0
 622:	0e 94 2f 05 	call	0xa5e	; 0xa5e <__floatunsisf>
 626:	4b 01       	movw	r8, r22
 628:	5c 01       	movw	r10, r24
 62a:	b7 01       	movw	r22, r14
 62c:	80 e0       	ldi	r24, 0x00	; 0
 62e:	90 e0       	ldi	r25, 0x00	; 0
 630:	0e 94 2f 05 	call	0xa5e	; 0xa5e <__floatunsisf>
 634:	20 e0       	ldi	r18, 0x00	; 0
 636:	30 e4       	ldi	r19, 0x40	; 64
 638:	4c e1       	ldi	r20, 0x1C	; 28
 63a:	56 e4       	ldi	r21, 0x46	; 70
 63c:	0e 94 87 04 	call	0x90e	; 0x90e <__divsf3>
 640:	9b 01       	movw	r18, r22
 642:	ac 01       	movw	r20, r24
 644:	c5 01       	movw	r24, r10
 646:	b4 01       	movw	r22, r8
 648:	0e 94 e6 05 	call	0xbcc	; 0xbcc <__mulsf3>
 64c:	20 e0       	ldi	r18, 0x00	; 0
 64e:	30 e0       	ldi	r19, 0x00	; 0
 650:	40 e0       	ldi	r20, 0x00	; 0
 652:	5f e3       	ldi	r21, 0x3F	; 63
 654:	0e 94 e6 05 	call	0xbcc	; 0xbcc <__mulsf3>
 658:	0e 94 53 06 	call	0xca6	; 0xca6 <round>
 65c:	60 93 36 01 	sts	0x0136, r22	; 0x800136 <front_distance>
 660:	70 93 37 01 	sts	0x0137, r23	; 0x800137 <front_distance+0x1>
 664:	80 93 38 01 	sts	0x0138, r24	; 0x800138 <front_distance+0x2>
 668:	90 93 39 01 	sts	0x0139, r25	; 0x800139 <front_distance+0x3>
			BAR_update_shift_regs(200, front_distance, front_view);
 66c:	0e 94 00 05 	call	0xa00	; 0xa00 <__fixunssfsi>
 670:	40 e0       	ldi	r20, 0x00	; 0
 672:	88 ec       	ldi	r24, 0xC8	; 200
 674:	90 e0       	ldi	r25, 0x00	; 0
 676:	0e 94 63 00 	call	0xc6	; 0xc6 <BAR_update_shift_regs>
			k = 1;
 67a:	81 e0       	ldi	r24, 0x01	; 1
 67c:	80 93 30 01 	sts	0x0130, r24	; 0x800130 <k.2243>
 680:	43 c0       	rjmp	.+134    	; 0x708 <__vector_13+0x166>
		}
		else
		{
			GPIO_write_low(&PORTB, PB7);
 682:	67 e0       	ldi	r22, 0x07	; 7
 684:	85 e2       	ldi	r24, 0x25	; 37
 686:	90 e0       	ldi	r25, 0x00	; 0
 688:	0e 94 c2 01 	call	0x384	; 0x384 <GPIO_write_low>
			delta_time2 = count_deltatime(&PORTB, trigger_back);
 68c:	62 e0       	ldi	r22, 0x02	; 2
 68e:	85 e2       	ldi	r24, 0x25	; 37
 690:	90 e0       	ldi	r25, 0x00	; 0
 692:	0e 94 3e 01 	call	0x27c	; 0x27c <count_deltatime>
 696:	7c 01       	movw	r14, r24
 698:	90 93 3b 01 	sts	0x013B, r25	; 0x80013b <delta_time2+0x1>
 69c:	80 93 3a 01 	sts	0x013A, r24	; 0x80013a <delta_time2>
			back_distance = round((velocity*(delta_time2/(float)10000))/(float)2);
 6a0:	60 91 0b 01 	lds	r22, 0x010B	; 0x80010b <velocity>
 6a4:	70 91 0c 01 	lds	r23, 0x010C	; 0x80010c <velocity+0x1>
 6a8:	80 e0       	ldi	r24, 0x00	; 0
 6aa:	90 e0       	ldi	r25, 0x00	; 0
 6ac:	0e 94 2f 05 	call	0xa5e	; 0xa5e <__floatunsisf>
 6b0:	4b 01       	movw	r8, r22
 6b2:	5c 01       	movw	r10, r24
 6b4:	b7 01       	movw	r22, r14
 6b6:	80 e0       	ldi	r24, 0x00	; 0
 6b8:	90 e0       	ldi	r25, 0x00	; 0
 6ba:	0e 94 2f 05 	call	0xa5e	; 0xa5e <__floatunsisf>
 6be:	20 e0       	ldi	r18, 0x00	; 0
 6c0:	30 e4       	ldi	r19, 0x40	; 64
 6c2:	4c e1       	ldi	r20, 0x1C	; 28
 6c4:	56 e4       	ldi	r21, 0x46	; 70
 6c6:	0e 94 87 04 	call	0x90e	; 0x90e <__divsf3>
 6ca:	9b 01       	movw	r18, r22
 6cc:	ac 01       	movw	r20, r24
 6ce:	c5 01       	movw	r24, r10
 6d0:	b4 01       	movw	r22, r8
 6d2:	0e 94 e6 05 	call	0xbcc	; 0xbcc <__mulsf3>
 6d6:	20 e0       	ldi	r18, 0x00	; 0
 6d8:	30 e0       	ldi	r19, 0x00	; 0
 6da:	40 e0       	ldi	r20, 0x00	; 0
 6dc:	5f e3       	ldi	r21, 0x3F	; 63
 6de:	0e 94 e6 05 	call	0xbcc	; 0xbcc <__mulsf3>
 6e2:	0e 94 53 06 	call	0xca6	; 0xca6 <round>
 6e6:	60 93 32 01 	sts	0x0132, r22	; 0x800132 <back_distance>
 6ea:	70 93 33 01 	sts	0x0133, r23	; 0x800133 <back_distance+0x1>
 6ee:	80 93 34 01 	sts	0x0134, r24	; 0x800134 <back_distance+0x2>
 6f2:	90 93 35 01 	sts	0x0135, r25	; 0x800135 <back_distance+0x3>
			BAR_update_shift_regs(200, back_distance, back_view);
 6f6:	0e 94 00 05 	call	0xa00	; 0xa00 <__fixunssfsi>
 6fa:	41 e0       	ldi	r20, 0x01	; 1
 6fc:	88 ec       	ldi	r24, 0xC8	; 200
 6fe:	90 e0       	ldi	r25, 0x00	; 0
 700:	0e 94 63 00 	call	0xc6	; 0xc6 <BAR_update_shift_regs>
			k = 0;
 704:	10 92 30 01 	sts	0x0130, r1	; 0x800130 <k.2243>
		}
		// count_deltatime function counts width of echo pulse

		counter = 0;
 708:	10 92 31 01 	sts	0x0131, r1	; 0x800131 <counter.2242>
		// sensor accurency is guaranted from 4cm to 4m - this condition is up limitation
		if(back_distance > 400)
 70c:	c0 90 32 01 	lds	r12, 0x0132	; 0x800132 <back_distance>
 710:	d0 90 33 01 	lds	r13, 0x0133	; 0x800133 <back_distance+0x1>
 714:	e0 90 34 01 	lds	r14, 0x0134	; 0x800134 <back_distance+0x2>
 718:	f0 90 35 01 	lds	r15, 0x0135	; 0x800135 <back_distance+0x3>
 71c:	20 e0       	ldi	r18, 0x00	; 0
 71e:	30 e0       	ldi	r19, 0x00	; 0
 720:	48 ec       	ldi	r20, 0xC8	; 200
 722:	53 e4       	ldi	r21, 0x43	; 67
 724:	c7 01       	movw	r24, r14
 726:	b6 01       	movw	r22, r12
 728:	0e 94 e1 05 	call	0xbc2	; 0xbc2 <__gesf2>
 72c:	18 16       	cp	r1, r24
 72e:	8c f4       	brge	.+34     	; 0x752 <__vector_13+0x1b0>
		{
			lcd_gotoxy(10,0);
 730:	60 e0       	ldi	r22, 0x00	; 0
 732:	8a e0       	ldi	r24, 0x0A	; 10
 734:	0e 94 1a 02 	call	0x434	; 0x434 <lcd_gotoxy>
			lcd_puts("      ");
 738:	8d e1       	ldi	r24, 0x1D	; 29
 73a:	91 e0       	ldi	r25, 0x01	; 1
 73c:	0e 94 2c 02 	call	0x458	; 0x458 <lcd_puts>
			lcd_gotoxy(10,0);
 740:	60 e0       	ldi	r22, 0x00	; 0
 742:	8a e0       	ldi	r24, 0x0A	; 10
 744:	0e 94 1a 02 	call	0x434	; 0x434 <lcd_gotoxy>
			lcd_puts(">4m");
 748:	84 e2       	ldi	r24, 0x24	; 36
 74a:	91 e0       	ldi	r25, 0x01	; 1
 74c:	0e 94 2c 02 	call	0x458	; 0x458 <lcd_puts>
 750:	4d c0       	rjmp	.+154    	; 0x7ec <__vector_13+0x24a>
		}
		
		else if (back_distance <= 2)
 752:	20 e0       	ldi	r18, 0x00	; 0
 754:	30 e0       	ldi	r19, 0x00	; 0
 756:	40 e0       	ldi	r20, 0x00	; 0
 758:	50 e4       	ldi	r21, 0x40	; 64
 75a:	c7 01       	movw	r24, r14
 75c:	b6 01       	movw	r22, r12
 75e:	0e 94 82 04 	call	0x904	; 0x904 <__cmpsf2>
 762:	18 16       	cp	r1, r24
 764:	cc f0       	brlt	.+50     	; 0x798 <__vector_13+0x1f6>
		{
			lcd_gotoxy(10,0);
 766:	60 e0       	ldi	r22, 0x00	; 0
 768:	8a e0       	ldi	r24, 0x0A	; 10
 76a:	0e 94 1a 02 	call	0x434	; 0x434 <lcd_gotoxy>
			lcd_puts("   ");
 76e:	80 e2       	ldi	r24, 0x20	; 32
 770:	91 e0       	ldi	r25, 0x01	; 1
 772:	0e 94 2c 02 	call	0x458	; 0x458 <lcd_puts>
    } else if (__radix < 2 || __radix > 36) {
	*__s = 0;
	return __s;
    } else {
	extern char *__itoa_ncheck (int, char *, unsigned char);
	return __itoa_ncheck (__val, __s, __radix);
 776:	4a e0       	ldi	r20, 0x0A	; 10
 778:	be 01       	movw	r22, r28
 77a:	6f 5f       	subi	r22, 0xFF	; 255
 77c:	7f 4f       	sbci	r23, 0xFF	; 255
 77e:	80 e0       	ldi	r24, 0x00	; 0
 780:	90 e0       	ldi	r25, 0x00	; 0
 782:	0e 94 a0 06 	call	0xd40	; 0xd40 <__itoa_ncheck>
			itoa(0, lcd_string, 10);
			lcd_gotoxy(10,0);
 786:	60 e0       	ldi	r22, 0x00	; 0
 788:	8a e0       	ldi	r24, 0x0A	; 10
 78a:	0e 94 1a 02 	call	0x434	; 0x434 <lcd_gotoxy>
			lcd_puts(lcd_string);
 78e:	ce 01       	movw	r24, r28
 790:	01 96       	adiw	r24, 0x01	; 1
 792:	0e 94 2c 02 	call	0x458	; 0x458 <lcd_puts>
 796:	2a c0       	rjmp	.+84     	; 0x7ec <__vector_13+0x24a>
		}
		else
		{
			lcd_gotoxy(10,0);
 798:	60 e0       	ldi	r22, 0x00	; 0
 79a:	8a e0       	ldi	r24, 0x0A	; 10
 79c:	0e 94 1a 02 	call	0x434	; 0x434 <lcd_gotoxy>
			lcd_puts("   ");
 7a0:	80 e2       	ldi	r24, 0x20	; 32
 7a2:	91 e0       	ldi	r25, 0x01	; 1
 7a4:	0e 94 2c 02 	call	0x458	; 0x458 <lcd_puts>
 7a8:	60 91 32 01 	lds	r22, 0x0132	; 0x800132 <back_distance>
 7ac:	70 91 33 01 	lds	r23, 0x0133	; 0x800133 <back_distance+0x1>
 7b0:	80 91 34 01 	lds	r24, 0x0134	; 0x800134 <back_distance+0x2>
 7b4:	90 91 35 01 	lds	r25, 0x0135	; 0x800135 <back_distance+0x3>
 7b8:	0e 94 f9 04 	call	0x9f2	; 0x9f2 <__fixsfsi>
 7bc:	dc 01       	movw	r26, r24
 7be:	cb 01       	movw	r24, r22
 7c0:	4a e0       	ldi	r20, 0x0A	; 10
 7c2:	be 01       	movw	r22, r28
 7c4:	6f 5f       	subi	r22, 0xFF	; 255
 7c6:	7f 4f       	sbci	r23, 0xFF	; 255
 7c8:	0e 94 a0 06 	call	0xd40	; 0xd40 <__itoa_ncheck>
			itoa(back_distance, lcd_string, 10);
			lcd_gotoxy(10,0);
 7cc:	60 e0       	ldi	r22, 0x00	; 0
 7ce:	8a e0       	ldi	r24, 0x0A	; 10
 7d0:	0e 94 1a 02 	call	0x434	; 0x434 <lcd_gotoxy>
			lcd_puts(lcd_string);
 7d4:	ce 01       	movw	r24, r28
 7d6:	01 96       	adiw	r24, 0x01	; 1
 7d8:	0e 94 2c 02 	call	0x458	; 0x458 <lcd_puts>
			lcd_gotoxy(13,0);
 7dc:	60 e0       	ldi	r22, 0x00	; 0
 7de:	8d e0       	ldi	r24, 0x0D	; 13
 7e0:	0e 94 1a 02 	call	0x434	; 0x434 <lcd_gotoxy>
			lcd_puts("cm");
 7e4:	88 e2       	ldi	r24, 0x28	; 40
 7e6:	91 e0       	ldi	r25, 0x01	; 1
 7e8:	0e 94 2c 02 	call	0x458	; 0x458 <lcd_puts>
		}
		
		if(front_distance > 400)
 7ec:	c0 90 36 01 	lds	r12, 0x0136	; 0x800136 <front_distance>
 7f0:	d0 90 37 01 	lds	r13, 0x0137	; 0x800137 <front_distance+0x1>
 7f4:	e0 90 38 01 	lds	r14, 0x0138	; 0x800138 <front_distance+0x2>
 7f8:	f0 90 39 01 	lds	r15, 0x0139	; 0x800139 <front_distance+0x3>
 7fc:	20 e0       	ldi	r18, 0x00	; 0
 7fe:	30 e0       	ldi	r19, 0x00	; 0
 800:	48 ec       	ldi	r20, 0xC8	; 200
 802:	53 e4       	ldi	r21, 0x43	; 67
 804:	c7 01       	movw	r24, r14
 806:	b6 01       	movw	r22, r12
 808:	0e 94 e1 05 	call	0xbc2	; 0xbc2 <__gesf2>
 80c:	18 16       	cp	r1, r24
 80e:	8c f4       	brge	.+34     	; 0x832 <__vector_13+0x290>
		{
			lcd_gotoxy(10,1);
 810:	61 e0       	ldi	r22, 0x01	; 1
 812:	8a e0       	ldi	r24, 0x0A	; 10
 814:	0e 94 1a 02 	call	0x434	; 0x434 <lcd_gotoxy>
			lcd_puts("      ");
 818:	8d e1       	ldi	r24, 0x1D	; 29
 81a:	91 e0       	ldi	r25, 0x01	; 1
 81c:	0e 94 2c 02 	call	0x458	; 0x458 <lcd_puts>
			lcd_gotoxy(10,1);
 820:	61 e0       	ldi	r22, 0x01	; 1
 822:	8a e0       	ldi	r24, 0x0A	; 10
 824:	0e 94 1a 02 	call	0x434	; 0x434 <lcd_gotoxy>
			lcd_puts(">4m");
 828:	84 e2       	ldi	r24, 0x24	; 36
 82a:	91 e0       	ldi	r25, 0x01	; 1
 82c:	0e 94 2c 02 	call	0x458	; 0x458 <lcd_puts>
 830:	4d c0       	rjmp	.+154    	; 0x8cc <__vector_13+0x32a>
		}
		
		else if (front_distance <= 2)
 832:	20 e0       	ldi	r18, 0x00	; 0
 834:	30 e0       	ldi	r19, 0x00	; 0
 836:	40 e0       	ldi	r20, 0x00	; 0
 838:	50 e4       	ldi	r21, 0x40	; 64
 83a:	c7 01       	movw	r24, r14
 83c:	b6 01       	movw	r22, r12
 83e:	0e 94 82 04 	call	0x904	; 0x904 <__cmpsf2>
 842:	18 16       	cp	r1, r24
 844:	cc f0       	brlt	.+50     	; 0x878 <__vector_13+0x2d6>
		{
			lcd_gotoxy(10,1);
 846:	61 e0       	ldi	r22, 0x01	; 1
 848:	8a e0       	ldi	r24, 0x0A	; 10
 84a:	0e 94 1a 02 	call	0x434	; 0x434 <lcd_gotoxy>
			lcd_puts("   ");
 84e:	80 e2       	ldi	r24, 0x20	; 32
 850:	91 e0       	ldi	r25, 0x01	; 1
 852:	0e 94 2c 02 	call	0x458	; 0x458 <lcd_puts>
 856:	4a e0       	ldi	r20, 0x0A	; 10
 858:	be 01       	movw	r22, r28
 85a:	6f 5f       	subi	r22, 0xFF	; 255
 85c:	7f 4f       	sbci	r23, 0xFF	; 255
 85e:	80 e0       	ldi	r24, 0x00	; 0
 860:	90 e0       	ldi	r25, 0x00	; 0
 862:	0e 94 a0 06 	call	0xd40	; 0xd40 <__itoa_ncheck>
			itoa(0, lcd_string, 10);
			lcd_gotoxy(10,1);
 866:	61 e0       	ldi	r22, 0x01	; 1
 868:	8a e0       	ldi	r24, 0x0A	; 10
 86a:	0e 94 1a 02 	call	0x434	; 0x434 <lcd_gotoxy>
			lcd_puts(lcd_string);
 86e:	ce 01       	movw	r24, r28
 870:	01 96       	adiw	r24, 0x01	; 1
 872:	0e 94 2c 02 	call	0x458	; 0x458 <lcd_puts>
 876:	2a c0       	rjmp	.+84     	; 0x8cc <__vector_13+0x32a>
		}
		else
		{
			lcd_gotoxy(10,1);
 878:	61 e0       	ldi	r22, 0x01	; 1
 87a:	8a e0       	ldi	r24, 0x0A	; 10
 87c:	0e 94 1a 02 	call	0x434	; 0x434 <lcd_gotoxy>
			lcd_puts("   ");
 880:	80 e2       	ldi	r24, 0x20	; 32
 882:	91 e0       	ldi	r25, 0x01	; 1
 884:	0e 94 2c 02 	call	0x458	; 0x458 <lcd_puts>
 888:	60 91 36 01 	lds	r22, 0x0136	; 0x800136 <front_distance>
 88c:	70 91 37 01 	lds	r23, 0x0137	; 0x800137 <front_distance+0x1>
 890:	80 91 38 01 	lds	r24, 0x0138	; 0x800138 <front_distance+0x2>
 894:	90 91 39 01 	lds	r25, 0x0139	; 0x800139 <front_distance+0x3>
 898:	0e 94 f9 04 	call	0x9f2	; 0x9f2 <__fixsfsi>
 89c:	dc 01       	movw	r26, r24
 89e:	cb 01       	movw	r24, r22
 8a0:	4a e0       	ldi	r20, 0x0A	; 10
 8a2:	be 01       	movw	r22, r28
 8a4:	6f 5f       	subi	r22, 0xFF	; 255
 8a6:	7f 4f       	sbci	r23, 0xFF	; 255
 8a8:	0e 94 a0 06 	call	0xd40	; 0xd40 <__itoa_ncheck>
			itoa(front_distance, lcd_string, 10);
			lcd_gotoxy(10,1);
 8ac:	61 e0       	ldi	r22, 0x01	; 1
 8ae:	8a e0       	ldi	r24, 0x0A	; 10
 8b0:	0e 94 1a 02 	call	0x434	; 0x434 <lcd_gotoxy>
			lcd_puts(lcd_string);
 8b4:	ce 01       	movw	r24, r28
 8b6:	01 96       	adiw	r24, 0x01	; 1
 8b8:	0e 94 2c 02 	call	0x458	; 0x458 <lcd_puts>
			lcd_gotoxy(13,1);
 8bc:	61 e0       	ldi	r22, 0x01	; 1
 8be:	8d e0       	ldi	r24, 0x0D	; 13
 8c0:	0e 94 1a 02 	call	0x434	; 0x434 <lcd_gotoxy>
			lcd_puts("cm");
 8c4:	88 e2       	ldi	r24, 0x28	; 40
 8c6:	91 e0       	ldi	r25, 0x01	; 1
 8c8:	0e 94 2c 02 	call	0x458	; 0x458 <lcd_puts>
		}
		
	}
	
}
 8cc:	0f 90       	pop	r0
 8ce:	df 91       	pop	r29
 8d0:	cf 91       	pop	r28
 8d2:	ff 91       	pop	r31
 8d4:	ef 91       	pop	r30
 8d6:	bf 91       	pop	r27
 8d8:	af 91       	pop	r26
 8da:	9f 91       	pop	r25
 8dc:	8f 91       	pop	r24
 8de:	7f 91       	pop	r23
 8e0:	6f 91       	pop	r22
 8e2:	5f 91       	pop	r21
 8e4:	4f 91       	pop	r20
 8e6:	3f 91       	pop	r19
 8e8:	2f 91       	pop	r18
 8ea:	ff 90       	pop	r15
 8ec:	ef 90       	pop	r14
 8ee:	df 90       	pop	r13
 8f0:	cf 90       	pop	r12
 8f2:	bf 90       	pop	r11
 8f4:	af 90       	pop	r10
 8f6:	9f 90       	pop	r9
 8f8:	8f 90       	pop	r8
 8fa:	0f 90       	pop	r0
 8fc:	0f be       	out	0x3f, r0	; 63
 8fe:	0f 90       	pop	r0
 900:	1f 90       	pop	r1
 902:	18 95       	reti

00000904 <__cmpsf2>:
 904:	0e 94 6c 05 	call	0xad8	; 0xad8 <__fp_cmp>
 908:	08 f4       	brcc	.+2      	; 0x90c <__cmpsf2+0x8>
 90a:	81 e0       	ldi	r24, 0x01	; 1
 90c:	08 95       	ret

0000090e <__divsf3>:
 90e:	0e 94 9b 04 	call	0x936	; 0x936 <__divsf3x>
 912:	0c 94 a7 05 	jmp	0xb4e	; 0xb4e <__fp_round>
 916:	0e 94 a0 05 	call	0xb40	; 0xb40 <__fp_pscB>
 91a:	58 f0       	brcs	.+22     	; 0x932 <__divsf3+0x24>
 91c:	0e 94 99 05 	call	0xb32	; 0xb32 <__fp_pscA>
 920:	40 f0       	brcs	.+16     	; 0x932 <__divsf3+0x24>
 922:	29 f4       	brne	.+10     	; 0x92e <__divsf3+0x20>
 924:	5f 3f       	cpi	r21, 0xFF	; 255
 926:	29 f0       	breq	.+10     	; 0x932 <__divsf3+0x24>
 928:	0c 94 90 05 	jmp	0xb20	; 0xb20 <__fp_inf>
 92c:	51 11       	cpse	r21, r1
 92e:	0c 94 db 05 	jmp	0xbb6	; 0xbb6 <__fp_szero>
 932:	0c 94 96 05 	jmp	0xb2c	; 0xb2c <__fp_nan>

00000936 <__divsf3x>:
 936:	0e 94 b8 05 	call	0xb70	; 0xb70 <__fp_split3>
 93a:	68 f3       	brcs	.-38     	; 0x916 <__divsf3+0x8>

0000093c <__divsf3_pse>:
 93c:	99 23       	and	r25, r25
 93e:	b1 f3       	breq	.-20     	; 0x92c <__divsf3+0x1e>
 940:	55 23       	and	r21, r21
 942:	91 f3       	breq	.-28     	; 0x928 <__divsf3+0x1a>
 944:	95 1b       	sub	r25, r21
 946:	55 0b       	sbc	r21, r21
 948:	bb 27       	eor	r27, r27
 94a:	aa 27       	eor	r26, r26
 94c:	62 17       	cp	r22, r18
 94e:	73 07       	cpc	r23, r19
 950:	84 07       	cpc	r24, r20
 952:	38 f0       	brcs	.+14     	; 0x962 <__divsf3_pse+0x26>
 954:	9f 5f       	subi	r25, 0xFF	; 255
 956:	5f 4f       	sbci	r21, 0xFF	; 255
 958:	22 0f       	add	r18, r18
 95a:	33 1f       	adc	r19, r19
 95c:	44 1f       	adc	r20, r20
 95e:	aa 1f       	adc	r26, r26
 960:	a9 f3       	breq	.-22     	; 0x94c <__divsf3_pse+0x10>
 962:	35 d0       	rcall	.+106    	; 0x9ce <__divsf3_pse+0x92>
 964:	0e 2e       	mov	r0, r30
 966:	3a f0       	brmi	.+14     	; 0x976 <__divsf3_pse+0x3a>
 968:	e0 e8       	ldi	r30, 0x80	; 128
 96a:	32 d0       	rcall	.+100    	; 0x9d0 <__divsf3_pse+0x94>
 96c:	91 50       	subi	r25, 0x01	; 1
 96e:	50 40       	sbci	r21, 0x00	; 0
 970:	e6 95       	lsr	r30
 972:	00 1c       	adc	r0, r0
 974:	ca f7       	brpl	.-14     	; 0x968 <__divsf3_pse+0x2c>
 976:	2b d0       	rcall	.+86     	; 0x9ce <__divsf3_pse+0x92>
 978:	fe 2f       	mov	r31, r30
 97a:	29 d0       	rcall	.+82     	; 0x9ce <__divsf3_pse+0x92>
 97c:	66 0f       	add	r22, r22
 97e:	77 1f       	adc	r23, r23
 980:	88 1f       	adc	r24, r24
 982:	bb 1f       	adc	r27, r27
 984:	26 17       	cp	r18, r22
 986:	37 07       	cpc	r19, r23
 988:	48 07       	cpc	r20, r24
 98a:	ab 07       	cpc	r26, r27
 98c:	b0 e8       	ldi	r27, 0x80	; 128
 98e:	09 f0       	breq	.+2      	; 0x992 <__divsf3_pse+0x56>
 990:	bb 0b       	sbc	r27, r27
 992:	80 2d       	mov	r24, r0
 994:	bf 01       	movw	r22, r30
 996:	ff 27       	eor	r31, r31
 998:	93 58       	subi	r25, 0x83	; 131
 99a:	5f 4f       	sbci	r21, 0xFF	; 255
 99c:	3a f0       	brmi	.+14     	; 0x9ac <__divsf3_pse+0x70>
 99e:	9e 3f       	cpi	r25, 0xFE	; 254
 9a0:	51 05       	cpc	r21, r1
 9a2:	78 f0       	brcs	.+30     	; 0x9c2 <__divsf3_pse+0x86>
 9a4:	0c 94 90 05 	jmp	0xb20	; 0xb20 <__fp_inf>
 9a8:	0c 94 db 05 	jmp	0xbb6	; 0xbb6 <__fp_szero>
 9ac:	5f 3f       	cpi	r21, 0xFF	; 255
 9ae:	e4 f3       	brlt	.-8      	; 0x9a8 <__divsf3_pse+0x6c>
 9b0:	98 3e       	cpi	r25, 0xE8	; 232
 9b2:	d4 f3       	brlt	.-12     	; 0x9a8 <__divsf3_pse+0x6c>
 9b4:	86 95       	lsr	r24
 9b6:	77 95       	ror	r23
 9b8:	67 95       	ror	r22
 9ba:	b7 95       	ror	r27
 9bc:	f7 95       	ror	r31
 9be:	9f 5f       	subi	r25, 0xFF	; 255
 9c0:	c9 f7       	brne	.-14     	; 0x9b4 <__divsf3_pse+0x78>
 9c2:	88 0f       	add	r24, r24
 9c4:	91 1d       	adc	r25, r1
 9c6:	96 95       	lsr	r25
 9c8:	87 95       	ror	r24
 9ca:	97 f9       	bld	r25, 7
 9cc:	08 95       	ret
 9ce:	e1 e0       	ldi	r30, 0x01	; 1
 9d0:	66 0f       	add	r22, r22
 9d2:	77 1f       	adc	r23, r23
 9d4:	88 1f       	adc	r24, r24
 9d6:	bb 1f       	adc	r27, r27
 9d8:	62 17       	cp	r22, r18
 9da:	73 07       	cpc	r23, r19
 9dc:	84 07       	cpc	r24, r20
 9de:	ba 07       	cpc	r27, r26
 9e0:	20 f0       	brcs	.+8      	; 0x9ea <__divsf3_pse+0xae>
 9e2:	62 1b       	sub	r22, r18
 9e4:	73 0b       	sbc	r23, r19
 9e6:	84 0b       	sbc	r24, r20
 9e8:	ba 0b       	sbc	r27, r26
 9ea:	ee 1f       	adc	r30, r30
 9ec:	88 f7       	brcc	.-30     	; 0x9d0 <__divsf3_pse+0x94>
 9ee:	e0 95       	com	r30
 9f0:	08 95       	ret

000009f2 <__fixsfsi>:
 9f2:	0e 94 00 05 	call	0xa00	; 0xa00 <__fixunssfsi>
 9f6:	68 94       	set
 9f8:	b1 11       	cpse	r27, r1
 9fa:	0c 94 db 05 	jmp	0xbb6	; 0xbb6 <__fp_szero>
 9fe:	08 95       	ret

00000a00 <__fixunssfsi>:
 a00:	0e 94 c0 05 	call	0xb80	; 0xb80 <__fp_splitA>
 a04:	88 f0       	brcs	.+34     	; 0xa28 <__fixunssfsi+0x28>
 a06:	9f 57       	subi	r25, 0x7F	; 127
 a08:	98 f0       	brcs	.+38     	; 0xa30 <__fixunssfsi+0x30>
 a0a:	b9 2f       	mov	r27, r25
 a0c:	99 27       	eor	r25, r25
 a0e:	b7 51       	subi	r27, 0x17	; 23
 a10:	b0 f0       	brcs	.+44     	; 0xa3e <__fixunssfsi+0x3e>
 a12:	e1 f0       	breq	.+56     	; 0xa4c <__fixunssfsi+0x4c>
 a14:	66 0f       	add	r22, r22
 a16:	77 1f       	adc	r23, r23
 a18:	88 1f       	adc	r24, r24
 a1a:	99 1f       	adc	r25, r25
 a1c:	1a f0       	brmi	.+6      	; 0xa24 <__fixunssfsi+0x24>
 a1e:	ba 95       	dec	r27
 a20:	c9 f7       	brne	.-14     	; 0xa14 <__fixunssfsi+0x14>
 a22:	14 c0       	rjmp	.+40     	; 0xa4c <__fixunssfsi+0x4c>
 a24:	b1 30       	cpi	r27, 0x01	; 1
 a26:	91 f0       	breq	.+36     	; 0xa4c <__fixunssfsi+0x4c>
 a28:	0e 94 da 05 	call	0xbb4	; 0xbb4 <__fp_zero>
 a2c:	b1 e0       	ldi	r27, 0x01	; 1
 a2e:	08 95       	ret
 a30:	0c 94 da 05 	jmp	0xbb4	; 0xbb4 <__fp_zero>
 a34:	67 2f       	mov	r22, r23
 a36:	78 2f       	mov	r23, r24
 a38:	88 27       	eor	r24, r24
 a3a:	b8 5f       	subi	r27, 0xF8	; 248
 a3c:	39 f0       	breq	.+14     	; 0xa4c <__fixunssfsi+0x4c>
 a3e:	b9 3f       	cpi	r27, 0xF9	; 249
 a40:	cc f3       	brlt	.-14     	; 0xa34 <__fixunssfsi+0x34>
 a42:	86 95       	lsr	r24
 a44:	77 95       	ror	r23
 a46:	67 95       	ror	r22
 a48:	b3 95       	inc	r27
 a4a:	d9 f7       	brne	.-10     	; 0xa42 <__fixunssfsi+0x42>
 a4c:	3e f4       	brtc	.+14     	; 0xa5c <__fixunssfsi+0x5c>
 a4e:	90 95       	com	r25
 a50:	80 95       	com	r24
 a52:	70 95       	com	r23
 a54:	61 95       	neg	r22
 a56:	7f 4f       	sbci	r23, 0xFF	; 255
 a58:	8f 4f       	sbci	r24, 0xFF	; 255
 a5a:	9f 4f       	sbci	r25, 0xFF	; 255
 a5c:	08 95       	ret

00000a5e <__floatunsisf>:
 a5e:	e8 94       	clt
 a60:	09 c0       	rjmp	.+18     	; 0xa74 <__floatsisf+0x12>

00000a62 <__floatsisf>:
 a62:	97 fb       	bst	r25, 7
 a64:	3e f4       	brtc	.+14     	; 0xa74 <__floatsisf+0x12>
 a66:	90 95       	com	r25
 a68:	80 95       	com	r24
 a6a:	70 95       	com	r23
 a6c:	61 95       	neg	r22
 a6e:	7f 4f       	sbci	r23, 0xFF	; 255
 a70:	8f 4f       	sbci	r24, 0xFF	; 255
 a72:	9f 4f       	sbci	r25, 0xFF	; 255
 a74:	99 23       	and	r25, r25
 a76:	a9 f0       	breq	.+42     	; 0xaa2 <__floatsisf+0x40>
 a78:	f9 2f       	mov	r31, r25
 a7a:	96 e9       	ldi	r25, 0x96	; 150
 a7c:	bb 27       	eor	r27, r27
 a7e:	93 95       	inc	r25
 a80:	f6 95       	lsr	r31
 a82:	87 95       	ror	r24
 a84:	77 95       	ror	r23
 a86:	67 95       	ror	r22
 a88:	b7 95       	ror	r27
 a8a:	f1 11       	cpse	r31, r1
 a8c:	f8 cf       	rjmp	.-16     	; 0xa7e <__floatsisf+0x1c>
 a8e:	fa f4       	brpl	.+62     	; 0xace <__floatsisf+0x6c>
 a90:	bb 0f       	add	r27, r27
 a92:	11 f4       	brne	.+4      	; 0xa98 <__floatsisf+0x36>
 a94:	60 ff       	sbrs	r22, 0
 a96:	1b c0       	rjmp	.+54     	; 0xace <__floatsisf+0x6c>
 a98:	6f 5f       	subi	r22, 0xFF	; 255
 a9a:	7f 4f       	sbci	r23, 0xFF	; 255
 a9c:	8f 4f       	sbci	r24, 0xFF	; 255
 a9e:	9f 4f       	sbci	r25, 0xFF	; 255
 aa0:	16 c0       	rjmp	.+44     	; 0xace <__floatsisf+0x6c>
 aa2:	88 23       	and	r24, r24
 aa4:	11 f0       	breq	.+4      	; 0xaaa <__floatsisf+0x48>
 aa6:	96 e9       	ldi	r25, 0x96	; 150
 aa8:	11 c0       	rjmp	.+34     	; 0xacc <__floatsisf+0x6a>
 aaa:	77 23       	and	r23, r23
 aac:	21 f0       	breq	.+8      	; 0xab6 <__floatsisf+0x54>
 aae:	9e e8       	ldi	r25, 0x8E	; 142
 ab0:	87 2f       	mov	r24, r23
 ab2:	76 2f       	mov	r23, r22
 ab4:	05 c0       	rjmp	.+10     	; 0xac0 <__floatsisf+0x5e>
 ab6:	66 23       	and	r22, r22
 ab8:	71 f0       	breq	.+28     	; 0xad6 <__floatsisf+0x74>
 aba:	96 e8       	ldi	r25, 0x86	; 134
 abc:	86 2f       	mov	r24, r22
 abe:	70 e0       	ldi	r23, 0x00	; 0
 ac0:	60 e0       	ldi	r22, 0x00	; 0
 ac2:	2a f0       	brmi	.+10     	; 0xace <__floatsisf+0x6c>
 ac4:	9a 95       	dec	r25
 ac6:	66 0f       	add	r22, r22
 ac8:	77 1f       	adc	r23, r23
 aca:	88 1f       	adc	r24, r24
 acc:	da f7       	brpl	.-10     	; 0xac4 <__floatsisf+0x62>
 ace:	88 0f       	add	r24, r24
 ad0:	96 95       	lsr	r25
 ad2:	87 95       	ror	r24
 ad4:	97 f9       	bld	r25, 7
 ad6:	08 95       	ret

00000ad8 <__fp_cmp>:
 ad8:	99 0f       	add	r25, r25
 ada:	00 08       	sbc	r0, r0
 adc:	55 0f       	add	r21, r21
 ade:	aa 0b       	sbc	r26, r26
 ae0:	e0 e8       	ldi	r30, 0x80	; 128
 ae2:	fe ef       	ldi	r31, 0xFE	; 254
 ae4:	16 16       	cp	r1, r22
 ae6:	17 06       	cpc	r1, r23
 ae8:	e8 07       	cpc	r30, r24
 aea:	f9 07       	cpc	r31, r25
 aec:	c0 f0       	brcs	.+48     	; 0xb1e <__fp_cmp+0x46>
 aee:	12 16       	cp	r1, r18
 af0:	13 06       	cpc	r1, r19
 af2:	e4 07       	cpc	r30, r20
 af4:	f5 07       	cpc	r31, r21
 af6:	98 f0       	brcs	.+38     	; 0xb1e <__fp_cmp+0x46>
 af8:	62 1b       	sub	r22, r18
 afa:	73 0b       	sbc	r23, r19
 afc:	84 0b       	sbc	r24, r20
 afe:	95 0b       	sbc	r25, r21
 b00:	39 f4       	brne	.+14     	; 0xb10 <__fp_cmp+0x38>
 b02:	0a 26       	eor	r0, r26
 b04:	61 f0       	breq	.+24     	; 0xb1e <__fp_cmp+0x46>
 b06:	23 2b       	or	r18, r19
 b08:	24 2b       	or	r18, r20
 b0a:	25 2b       	or	r18, r21
 b0c:	21 f4       	brne	.+8      	; 0xb16 <__fp_cmp+0x3e>
 b0e:	08 95       	ret
 b10:	0a 26       	eor	r0, r26
 b12:	09 f4       	brne	.+2      	; 0xb16 <__fp_cmp+0x3e>
 b14:	a1 40       	sbci	r26, 0x01	; 1
 b16:	a6 95       	lsr	r26
 b18:	8f ef       	ldi	r24, 0xFF	; 255
 b1a:	81 1d       	adc	r24, r1
 b1c:	81 1d       	adc	r24, r1
 b1e:	08 95       	ret

00000b20 <__fp_inf>:
 b20:	97 f9       	bld	r25, 7
 b22:	9f 67       	ori	r25, 0x7F	; 127
 b24:	80 e8       	ldi	r24, 0x80	; 128
 b26:	70 e0       	ldi	r23, 0x00	; 0
 b28:	60 e0       	ldi	r22, 0x00	; 0
 b2a:	08 95       	ret

00000b2c <__fp_nan>:
 b2c:	9f ef       	ldi	r25, 0xFF	; 255
 b2e:	80 ec       	ldi	r24, 0xC0	; 192
 b30:	08 95       	ret

00000b32 <__fp_pscA>:
 b32:	00 24       	eor	r0, r0
 b34:	0a 94       	dec	r0
 b36:	16 16       	cp	r1, r22
 b38:	17 06       	cpc	r1, r23
 b3a:	18 06       	cpc	r1, r24
 b3c:	09 06       	cpc	r0, r25
 b3e:	08 95       	ret

00000b40 <__fp_pscB>:
 b40:	00 24       	eor	r0, r0
 b42:	0a 94       	dec	r0
 b44:	12 16       	cp	r1, r18
 b46:	13 06       	cpc	r1, r19
 b48:	14 06       	cpc	r1, r20
 b4a:	05 06       	cpc	r0, r21
 b4c:	08 95       	ret

00000b4e <__fp_round>:
 b4e:	09 2e       	mov	r0, r25
 b50:	03 94       	inc	r0
 b52:	00 0c       	add	r0, r0
 b54:	11 f4       	brne	.+4      	; 0xb5a <__fp_round+0xc>
 b56:	88 23       	and	r24, r24
 b58:	52 f0       	brmi	.+20     	; 0xb6e <__fp_round+0x20>
 b5a:	bb 0f       	add	r27, r27
 b5c:	40 f4       	brcc	.+16     	; 0xb6e <__fp_round+0x20>
 b5e:	bf 2b       	or	r27, r31
 b60:	11 f4       	brne	.+4      	; 0xb66 <__fp_round+0x18>
 b62:	60 ff       	sbrs	r22, 0
 b64:	04 c0       	rjmp	.+8      	; 0xb6e <__fp_round+0x20>
 b66:	6f 5f       	subi	r22, 0xFF	; 255
 b68:	7f 4f       	sbci	r23, 0xFF	; 255
 b6a:	8f 4f       	sbci	r24, 0xFF	; 255
 b6c:	9f 4f       	sbci	r25, 0xFF	; 255
 b6e:	08 95       	ret

00000b70 <__fp_split3>:
 b70:	57 fd       	sbrc	r21, 7
 b72:	90 58       	subi	r25, 0x80	; 128
 b74:	44 0f       	add	r20, r20
 b76:	55 1f       	adc	r21, r21
 b78:	59 f0       	breq	.+22     	; 0xb90 <__fp_splitA+0x10>
 b7a:	5f 3f       	cpi	r21, 0xFF	; 255
 b7c:	71 f0       	breq	.+28     	; 0xb9a <__fp_splitA+0x1a>
 b7e:	47 95       	ror	r20

00000b80 <__fp_splitA>:
 b80:	88 0f       	add	r24, r24
 b82:	97 fb       	bst	r25, 7
 b84:	99 1f       	adc	r25, r25
 b86:	61 f0       	breq	.+24     	; 0xba0 <__fp_splitA+0x20>
 b88:	9f 3f       	cpi	r25, 0xFF	; 255
 b8a:	79 f0       	breq	.+30     	; 0xbaa <__fp_splitA+0x2a>
 b8c:	87 95       	ror	r24
 b8e:	08 95       	ret
 b90:	12 16       	cp	r1, r18
 b92:	13 06       	cpc	r1, r19
 b94:	14 06       	cpc	r1, r20
 b96:	55 1f       	adc	r21, r21
 b98:	f2 cf       	rjmp	.-28     	; 0xb7e <__fp_split3+0xe>
 b9a:	46 95       	lsr	r20
 b9c:	f1 df       	rcall	.-30     	; 0xb80 <__fp_splitA>
 b9e:	08 c0       	rjmp	.+16     	; 0xbb0 <__fp_splitA+0x30>
 ba0:	16 16       	cp	r1, r22
 ba2:	17 06       	cpc	r1, r23
 ba4:	18 06       	cpc	r1, r24
 ba6:	99 1f       	adc	r25, r25
 ba8:	f1 cf       	rjmp	.-30     	; 0xb8c <__fp_splitA+0xc>
 baa:	86 95       	lsr	r24
 bac:	71 05       	cpc	r23, r1
 bae:	61 05       	cpc	r22, r1
 bb0:	08 94       	sec
 bb2:	08 95       	ret

00000bb4 <__fp_zero>:
 bb4:	e8 94       	clt

00000bb6 <__fp_szero>:
 bb6:	bb 27       	eor	r27, r27
 bb8:	66 27       	eor	r22, r22
 bba:	77 27       	eor	r23, r23
 bbc:	cb 01       	movw	r24, r22
 bbe:	97 f9       	bld	r25, 7
 bc0:	08 95       	ret

00000bc2 <__gesf2>:
 bc2:	0e 94 6c 05 	call	0xad8	; 0xad8 <__fp_cmp>
 bc6:	08 f4       	brcc	.+2      	; 0xbca <__gesf2+0x8>
 bc8:	8f ef       	ldi	r24, 0xFF	; 255
 bca:	08 95       	ret

00000bcc <__mulsf3>:
 bcc:	0e 94 f9 05 	call	0xbf2	; 0xbf2 <__mulsf3x>
 bd0:	0c 94 a7 05 	jmp	0xb4e	; 0xb4e <__fp_round>
 bd4:	0e 94 99 05 	call	0xb32	; 0xb32 <__fp_pscA>
 bd8:	38 f0       	brcs	.+14     	; 0xbe8 <__mulsf3+0x1c>
 bda:	0e 94 a0 05 	call	0xb40	; 0xb40 <__fp_pscB>
 bde:	20 f0       	brcs	.+8      	; 0xbe8 <__mulsf3+0x1c>
 be0:	95 23       	and	r25, r21
 be2:	11 f0       	breq	.+4      	; 0xbe8 <__mulsf3+0x1c>
 be4:	0c 94 90 05 	jmp	0xb20	; 0xb20 <__fp_inf>
 be8:	0c 94 96 05 	jmp	0xb2c	; 0xb2c <__fp_nan>
 bec:	11 24       	eor	r1, r1
 bee:	0c 94 db 05 	jmp	0xbb6	; 0xbb6 <__fp_szero>

00000bf2 <__mulsf3x>:
 bf2:	0e 94 b8 05 	call	0xb70	; 0xb70 <__fp_split3>
 bf6:	70 f3       	brcs	.-36     	; 0xbd4 <__mulsf3+0x8>

00000bf8 <__mulsf3_pse>:
 bf8:	95 9f       	mul	r25, r21
 bfa:	c1 f3       	breq	.-16     	; 0xbec <__mulsf3+0x20>
 bfc:	95 0f       	add	r25, r21
 bfe:	50 e0       	ldi	r21, 0x00	; 0
 c00:	55 1f       	adc	r21, r21
 c02:	62 9f       	mul	r22, r18
 c04:	f0 01       	movw	r30, r0
 c06:	72 9f       	mul	r23, r18
 c08:	bb 27       	eor	r27, r27
 c0a:	f0 0d       	add	r31, r0
 c0c:	b1 1d       	adc	r27, r1
 c0e:	63 9f       	mul	r22, r19
 c10:	aa 27       	eor	r26, r26
 c12:	f0 0d       	add	r31, r0
 c14:	b1 1d       	adc	r27, r1
 c16:	aa 1f       	adc	r26, r26
 c18:	64 9f       	mul	r22, r20
 c1a:	66 27       	eor	r22, r22
 c1c:	b0 0d       	add	r27, r0
 c1e:	a1 1d       	adc	r26, r1
 c20:	66 1f       	adc	r22, r22
 c22:	82 9f       	mul	r24, r18
 c24:	22 27       	eor	r18, r18
 c26:	b0 0d       	add	r27, r0
 c28:	a1 1d       	adc	r26, r1
 c2a:	62 1f       	adc	r22, r18
 c2c:	73 9f       	mul	r23, r19
 c2e:	b0 0d       	add	r27, r0
 c30:	a1 1d       	adc	r26, r1
 c32:	62 1f       	adc	r22, r18
 c34:	83 9f       	mul	r24, r19
 c36:	a0 0d       	add	r26, r0
 c38:	61 1d       	adc	r22, r1
 c3a:	22 1f       	adc	r18, r18
 c3c:	74 9f       	mul	r23, r20
 c3e:	33 27       	eor	r19, r19
 c40:	a0 0d       	add	r26, r0
 c42:	61 1d       	adc	r22, r1
 c44:	23 1f       	adc	r18, r19
 c46:	84 9f       	mul	r24, r20
 c48:	60 0d       	add	r22, r0
 c4a:	21 1d       	adc	r18, r1
 c4c:	82 2f       	mov	r24, r18
 c4e:	76 2f       	mov	r23, r22
 c50:	6a 2f       	mov	r22, r26
 c52:	11 24       	eor	r1, r1
 c54:	9f 57       	subi	r25, 0x7F	; 127
 c56:	50 40       	sbci	r21, 0x00	; 0
 c58:	9a f0       	brmi	.+38     	; 0xc80 <__mulsf3_pse+0x88>
 c5a:	f1 f0       	breq	.+60     	; 0xc98 <__mulsf3_pse+0xa0>
 c5c:	88 23       	and	r24, r24
 c5e:	4a f0       	brmi	.+18     	; 0xc72 <__mulsf3_pse+0x7a>
 c60:	ee 0f       	add	r30, r30
 c62:	ff 1f       	adc	r31, r31
 c64:	bb 1f       	adc	r27, r27
 c66:	66 1f       	adc	r22, r22
 c68:	77 1f       	adc	r23, r23
 c6a:	88 1f       	adc	r24, r24
 c6c:	91 50       	subi	r25, 0x01	; 1
 c6e:	50 40       	sbci	r21, 0x00	; 0
 c70:	a9 f7       	brne	.-22     	; 0xc5c <__mulsf3_pse+0x64>
 c72:	9e 3f       	cpi	r25, 0xFE	; 254
 c74:	51 05       	cpc	r21, r1
 c76:	80 f0       	brcs	.+32     	; 0xc98 <__mulsf3_pse+0xa0>
 c78:	0c 94 90 05 	jmp	0xb20	; 0xb20 <__fp_inf>
 c7c:	0c 94 db 05 	jmp	0xbb6	; 0xbb6 <__fp_szero>
 c80:	5f 3f       	cpi	r21, 0xFF	; 255
 c82:	e4 f3       	brlt	.-8      	; 0xc7c <__mulsf3_pse+0x84>
 c84:	98 3e       	cpi	r25, 0xE8	; 232
 c86:	d4 f3       	brlt	.-12     	; 0xc7c <__mulsf3_pse+0x84>
 c88:	86 95       	lsr	r24
 c8a:	77 95       	ror	r23
 c8c:	67 95       	ror	r22
 c8e:	b7 95       	ror	r27
 c90:	f7 95       	ror	r31
 c92:	e7 95       	ror	r30
 c94:	9f 5f       	subi	r25, 0xFF	; 255
 c96:	c1 f7       	brne	.-16     	; 0xc88 <__mulsf3_pse+0x90>
 c98:	fe 2b       	or	r31, r30
 c9a:	88 0f       	add	r24, r24
 c9c:	91 1d       	adc	r25, r1
 c9e:	96 95       	lsr	r25
 ca0:	87 95       	ror	r24
 ca2:	97 f9       	bld	r25, 7
 ca4:	08 95       	ret

00000ca6 <round>:
 ca6:	0e 94 c0 05 	call	0xb80	; 0xb80 <__fp_splitA>
 caa:	e8 f0       	brcs	.+58     	; 0xce6 <round+0x40>
 cac:	9e 37       	cpi	r25, 0x7E	; 126
 cae:	e8 f0       	brcs	.+58     	; 0xcea <round+0x44>
 cb0:	96 39       	cpi	r25, 0x96	; 150
 cb2:	b8 f4       	brcc	.+46     	; 0xce2 <round+0x3c>
 cb4:	9e 38       	cpi	r25, 0x8E	; 142
 cb6:	48 f4       	brcc	.+18     	; 0xcca <round+0x24>
 cb8:	67 2f       	mov	r22, r23
 cba:	78 2f       	mov	r23, r24
 cbc:	88 27       	eor	r24, r24
 cbe:	98 5f       	subi	r25, 0xF8	; 248
 cc0:	f9 cf       	rjmp	.-14     	; 0xcb4 <round+0xe>
 cc2:	86 95       	lsr	r24
 cc4:	77 95       	ror	r23
 cc6:	67 95       	ror	r22
 cc8:	93 95       	inc	r25
 cca:	95 39       	cpi	r25, 0x95	; 149
 ccc:	d0 f3       	brcs	.-12     	; 0xcc2 <round+0x1c>
 cce:	b6 2f       	mov	r27, r22
 cd0:	b1 70       	andi	r27, 0x01	; 1
 cd2:	6b 0f       	add	r22, r27
 cd4:	71 1d       	adc	r23, r1
 cd6:	81 1d       	adc	r24, r1
 cd8:	20 f4       	brcc	.+8      	; 0xce2 <round+0x3c>
 cda:	87 95       	ror	r24
 cdc:	77 95       	ror	r23
 cde:	67 95       	ror	r22
 ce0:	93 95       	inc	r25
 ce2:	0c 94 77 06 	jmp	0xcee	; 0xcee <__fp_mintl>
 ce6:	0c 94 92 06 	jmp	0xd24	; 0xd24 <__fp_mpack>
 cea:	0c 94 db 05 	jmp	0xbb6	; 0xbb6 <__fp_szero>

00000cee <__fp_mintl>:
 cee:	88 23       	and	r24, r24
 cf0:	71 f4       	brne	.+28     	; 0xd0e <__fp_mintl+0x20>
 cf2:	77 23       	and	r23, r23
 cf4:	21 f0       	breq	.+8      	; 0xcfe <__fp_mintl+0x10>
 cf6:	98 50       	subi	r25, 0x08	; 8
 cf8:	87 2b       	or	r24, r23
 cfa:	76 2f       	mov	r23, r22
 cfc:	07 c0       	rjmp	.+14     	; 0xd0c <__fp_mintl+0x1e>
 cfe:	66 23       	and	r22, r22
 d00:	11 f4       	brne	.+4      	; 0xd06 <__fp_mintl+0x18>
 d02:	99 27       	eor	r25, r25
 d04:	0d c0       	rjmp	.+26     	; 0xd20 <__fp_mintl+0x32>
 d06:	90 51       	subi	r25, 0x10	; 16
 d08:	86 2b       	or	r24, r22
 d0a:	70 e0       	ldi	r23, 0x00	; 0
 d0c:	60 e0       	ldi	r22, 0x00	; 0
 d0e:	2a f0       	brmi	.+10     	; 0xd1a <__fp_mintl+0x2c>
 d10:	9a 95       	dec	r25
 d12:	66 0f       	add	r22, r22
 d14:	77 1f       	adc	r23, r23
 d16:	88 1f       	adc	r24, r24
 d18:	da f7       	brpl	.-10     	; 0xd10 <__fp_mintl+0x22>
 d1a:	88 0f       	add	r24, r24
 d1c:	96 95       	lsr	r25
 d1e:	87 95       	ror	r24
 d20:	97 f9       	bld	r25, 7
 d22:	08 95       	ret

00000d24 <__fp_mpack>:
 d24:	9f 3f       	cpi	r25, 0xFF	; 255
 d26:	31 f0       	breq	.+12     	; 0xd34 <__fp_mpack_finite+0xc>

00000d28 <__fp_mpack_finite>:
 d28:	91 50       	subi	r25, 0x01	; 1
 d2a:	20 f4       	brcc	.+8      	; 0xd34 <__fp_mpack_finite+0xc>
 d2c:	87 95       	ror	r24
 d2e:	77 95       	ror	r23
 d30:	67 95       	ror	r22
 d32:	b7 95       	ror	r27
 d34:	88 0f       	add	r24, r24
 d36:	91 1d       	adc	r25, r1
 d38:	96 95       	lsr	r25
 d3a:	87 95       	ror	r24
 d3c:	97 f9       	bld	r25, 7
 d3e:	08 95       	ret

00000d40 <__itoa_ncheck>:
 d40:	bb 27       	eor	r27, r27
 d42:	4a 30       	cpi	r20, 0x0A	; 10
 d44:	31 f4       	brne	.+12     	; 0xd52 <__itoa_ncheck+0x12>
 d46:	99 23       	and	r25, r25
 d48:	22 f4       	brpl	.+8      	; 0xd52 <__itoa_ncheck+0x12>
 d4a:	bd e2       	ldi	r27, 0x2D	; 45
 d4c:	90 95       	com	r25
 d4e:	81 95       	neg	r24
 d50:	9f 4f       	sbci	r25, 0xFF	; 255
 d52:	0c 94 ac 06 	jmp	0xd58	; 0xd58 <__utoa_common>

00000d56 <__utoa_ncheck>:
 d56:	bb 27       	eor	r27, r27

00000d58 <__utoa_common>:
 d58:	fb 01       	movw	r30, r22
 d5a:	55 27       	eor	r21, r21
 d5c:	aa 27       	eor	r26, r26
 d5e:	88 0f       	add	r24, r24
 d60:	99 1f       	adc	r25, r25
 d62:	aa 1f       	adc	r26, r26
 d64:	a4 17       	cp	r26, r20
 d66:	10 f0       	brcs	.+4      	; 0xd6c <__utoa_common+0x14>
 d68:	a4 1b       	sub	r26, r20
 d6a:	83 95       	inc	r24
 d6c:	50 51       	subi	r21, 0x10	; 16
 d6e:	b9 f7       	brne	.-18     	; 0xd5e <__utoa_common+0x6>
 d70:	a0 5d       	subi	r26, 0xD0	; 208
 d72:	aa 33       	cpi	r26, 0x3A	; 58
 d74:	08 f0       	brcs	.+2      	; 0xd78 <__utoa_common+0x20>
 d76:	a9 5d       	subi	r26, 0xD9	; 217
 d78:	a1 93       	st	Z+, r26
 d7a:	00 97       	sbiw	r24, 0x00	; 0
 d7c:	79 f7       	brne	.-34     	; 0xd5c <__utoa_common+0x4>
 d7e:	b1 11       	cpse	r27, r1
 d80:	b1 93       	st	Z+, r27
 d82:	11 92       	st	Z+, r1
 d84:	cb 01       	movw	r24, r22
 d86:	0c 94 c5 06 	jmp	0xd8a	; 0xd8a <strrev>

00000d8a <strrev>:
 d8a:	dc 01       	movw	r26, r24
 d8c:	fc 01       	movw	r30, r24
 d8e:	67 2f       	mov	r22, r23
 d90:	71 91       	ld	r23, Z+
 d92:	77 23       	and	r23, r23
 d94:	e1 f7       	brne	.-8      	; 0xd8e <strrev+0x4>
 d96:	32 97       	sbiw	r30, 0x02	; 2
 d98:	04 c0       	rjmp	.+8      	; 0xda2 <strrev+0x18>
 d9a:	7c 91       	ld	r23, X
 d9c:	6d 93       	st	X+, r22
 d9e:	70 83       	st	Z, r23
 da0:	62 91       	ld	r22, -Z
 da2:	ae 17       	cp	r26, r30
 da4:	bf 07       	cpc	r27, r31
 da6:	c8 f3       	brcs	.-14     	; 0xd9a <strrev+0x10>
 da8:	08 95       	ret

00000daa <_exit>:
 daa:	f8 94       	cli

00000dac <__stop_program>:
 dac:	ff cf       	rjmp	.-2      	; 0xdac <__stop_program>
